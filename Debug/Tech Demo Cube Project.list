
Tech Demo Cube Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000391c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003acc  08003acc  00013acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b64  08003b64  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003b64  08003b64  00013b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b6c  08003b6c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b6c  08003b6c  00013b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b70  08003b70  00013b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  08003be4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08003be4  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abdc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018cd  00000000  00000000  0002ac7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  0002c550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000850  00000000  00000000  0002ce38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000286ba  00000000  00000000  0002d688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000097d9  00000000  00000000  00055d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7fe3  00000000  00000000  0005f51b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001574fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002738  00000000  00000000  00157554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003ab4 	.word	0x08003ab4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08003ab4 	.word	0x08003ab4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b092      	sub	sp, #72	; 0x48
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint8_t buf[64];
	int counter = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	647b      	str	r3, [r7, #68]	; 0x44
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 faa8 	bl	8000af6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f835 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f8b3 	bl	8000714 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005ae:	f000 f885 	bl	80006bc <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 80005b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b6:	4814      	ldr	r0, [pc, #80]	; (8000608 <main+0x70>)
 80005b8:	f000 fdae 	bl	8001118 <HAL_GPIO_ReadPin>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0f7      	beq.n	80005b2 <main+0x1a>
		  HAL_Delay(25);
 80005c2:	2019      	movs	r0, #25
 80005c4:	f000 fb0c 	bl	8000be0 <HAL_Delay>
		  sprintf((char*)buf, "Button Pressed %d Times!\r\n", counter);
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80005cc:	490f      	ldr	r1, [pc, #60]	; (800060c <main+0x74>)
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fe42 	bl	8003258 <siprintf>
		  HAL_UART_Transmit(&hlpuart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff fe0a 	bl	80001f0 <strlen>
 80005dc:	4603      	mov	r3, r0
 80005de:	b29a      	uxth	r2, r3
 80005e0:	1d39      	adds	r1, r7, #4
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	480a      	ldr	r0, [pc, #40]	; (8000610 <main+0x78>)
 80005e8:	f002 f97e 	bl	80028e8 <HAL_UART_Transmit>
		  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 80005ec:	bf00      	nop
 80005ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <main+0x70>)
 80005f4:	f000 fd90 	bl	8001118 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d1f7      	bne.n	80005ee <main+0x56>
		  counter++;
 80005fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000600:	3301      	adds	r3, #1
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8000604:	e7d5      	b.n	80005b2 <main+0x1a>
 8000606:	bf00      	nop
 8000608:	48000800 	.word	0x48000800
 800060c:	08003acc 	.word	0x08003acc
 8000610:	20000098 	.word	0x20000098

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b096      	sub	sp, #88	; 0x58
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	2244      	movs	r2, #68	; 0x44
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f002 fe10 	bl	8003248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	463b      	mov	r3, r7
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000636:	f44f 7000 	mov.w	r0, #512	; 0x200
 800063a:	f000 fdab 	bl	8001194 <HAL_PWREx_ControlVoltageScaling>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000644:	f000 f912 	bl	800086c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000648:	2310      	movs	r3, #16
 800064a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8000654:	2390      	movs	r3, #144	; 0x90
 8000656:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800065c:	2301      	movs	r3, #1
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000660:	2305      	movs	r3, #5
 8000662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 8000664:	2347      	movs	r3, #71	; 0x47
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8000670:	2306      	movs	r3, #6
 8000672:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4618      	mov	r0, r3
 800067a:	f000 fdf1 	bl	8001260 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000684:	f000 f8f2 	bl	800086c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2303      	movs	r3, #3
 800068e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000690:	2390      	movs	r3, #144	; 0x90
 8000692:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000698:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800069e:	463b      	mov	r3, r7
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fa02 	bl	8001aac <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006ae:	f000 f8dd 	bl	800086c <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3758      	adds	r7, #88	; 0x58
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_LPUART1_UART_Init+0x50>)
 80006c2:	4a13      	ldr	r2, [pc, #76]	; (8000710 <MX_LPUART1_UART_Init+0x54>)
 80006c4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_LPUART1_UART_Init+0x50>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_LPUART1_UART_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0d      	ldr	r3, [pc, #52]	; (800070c <MX_LPUART1_UART_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_LPUART1_UART_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_LPUART1_UART_Init+0x50>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_LPUART1_UART_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_LPUART1_UART_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_LPUART1_UART_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_LPUART1_UART_Init+0x50>)
 80006fa:	f002 f8a7 	bl	800284c <HAL_UART_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000704:	f000 f8b2 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000098 	.word	0x20000098
 8000710:	40008000 	.word	0x40008000

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	4b4c      	ldr	r3, [pc, #304]	; (800085c <MX_GPIO_Init+0x148>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a4b      	ldr	r2, [pc, #300]	; (800085c <MX_GPIO_Init+0x148>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b49      	ldr	r3, [pc, #292]	; (800085c <MX_GPIO_Init+0x148>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	4b46      	ldr	r3, [pc, #280]	; (800085c <MX_GPIO_Init+0x148>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a45      	ldr	r2, [pc, #276]	; (800085c <MX_GPIO_Init+0x148>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b43      	ldr	r3, [pc, #268]	; (800085c <MX_GPIO_Init+0x148>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b40      	ldr	r3, [pc, #256]	; (800085c <MX_GPIO_Init+0x148>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a3f      	ldr	r2, [pc, #252]	; (800085c <MX_GPIO_Init+0x148>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b3d      	ldr	r3, [pc, #244]	; (800085c <MX_GPIO_Init+0x148>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000772:	4b3a      	ldr	r3, [pc, #232]	; (800085c <MX_GPIO_Init+0x148>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a39      	ldr	r2, [pc, #228]	; (800085c <MX_GPIO_Init+0x148>)
 8000778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b37      	ldr	r3, [pc, #220]	; (800085c <MX_GPIO_Init+0x148>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800078a:	f000 fd59 	bl	8001240 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b33      	ldr	r3, [pc, #204]	; (800085c <MX_GPIO_Init+0x148>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a32      	ldr	r2, [pc, #200]	; (800085c <MX_GPIO_Init+0x148>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b30      	ldr	r3, [pc, #192]	; (800085c <MX_GPIO_Init+0x148>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80007ac:	482c      	ldr	r0, [pc, #176]	; (8000860 <MX_GPIO_Init+0x14c>)
 80007ae:	f000 fccb 	bl	8001148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
 80007b8:	482a      	ldr	r0, [pc, #168]	; (8000864 <MX_GPIO_Init+0x150>)
 80007ba:	f000 fcc5 	bl	8001148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4619      	mov	r1, r3
 80007d2:	4825      	ldr	r0, [pc, #148]	; (8000868 <MX_GPIO_Init+0x154>)
 80007d4:	f000 fb0e 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80007d8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	481b      	ldr	r0, [pc, #108]	; (8000860 <MX_GPIO_Init+0x14c>)
 80007f2:	f000 faff 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 80007f6:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80007fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	4816      	ldr	r0, [pc, #88]	; (8000864 <MX_GPIO_Init+0x150>)
 800080c:	f000 faf2 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 8000810:	f44f 5331 	mov.w	r3, #11328	; 0x2c40
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	480e      	ldr	r0, [pc, #56]	; (8000864 <MX_GPIO_Init+0x150>)
 800082a:	f000 fae3 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800082e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000834:	2302      	movs	r3, #2
 8000836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083c:	2303      	movs	r3, #3
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000840:	230a      	movs	r3, #10
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084e:	f000 fad1 	bl	8000df4 <HAL_GPIO_Init>

}
 8000852:	bf00      	nop
 8000854:	3728      	adds	r7, #40	; 0x28
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40021000 	.word	0x40021000
 8000860:	48000400 	.word	0x48000400
 8000864:	48001800 	.word	0x48001800
 8000868:	48000800 	.word	0x48000800

0800086c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000870:	b672      	cpsid	i
}
 8000872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000874:	e7fe      	b.n	8000874 <Error_Handler+0x8>
	...

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <HAL_MspInit+0x44>)
 8000880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000882:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <HAL_MspInit+0x44>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6613      	str	r3, [r2, #96]	; 0x60
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <HAL_MspInit+0x44>)
 800088c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <HAL_MspInit+0x44>)
 8000898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089a:	4a08      	ldr	r2, [pc, #32]	; (80008bc <HAL_MspInit+0x44>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a0:	6593      	str	r3, [r2, #88]	; 0x58
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_MspInit+0x44>)
 80008a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40021000 	.word	0x40021000

080008c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b0ac      	sub	sp, #176	; 0xb0
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	228c      	movs	r2, #140	; 0x8c
 80008de:	2100      	movs	r1, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	f002 fcb1 	bl	8003248 <memset>
  if(huart->Instance==LPUART1)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a22      	ldr	r2, [pc, #136]	; (8000974 <HAL_UART_MspInit+0xb4>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d13d      	bne.n	800096c <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80008f0:	2320      	movs	r3, #32
 80008f2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	4618      	mov	r0, r3
 80008fe:	f001 fadb 	bl	8001eb8 <HAL_RCCEx_PeriphCLKConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000908:	f7ff ffb0 	bl	800086c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800090c:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <HAL_UART_MspInit+0xb8>)
 800090e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000910:	4a19      	ldr	r2, [pc, #100]	; (8000978 <HAL_UART_MspInit+0xb8>)
 8000912:	f043 0301 	orr.w	r3, r3, #1
 8000916:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <HAL_UART_MspInit+0xb8>)
 800091a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <HAL_UART_MspInit+0xb8>)
 8000926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000928:	4a13      	ldr	r2, [pc, #76]	; (8000978 <HAL_UART_MspInit+0xb8>)
 800092a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800092e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <HAL_UART_MspInit+0xb8>)
 8000932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 800093c:	f000 fc80 	bl	8001240 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000940:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000944:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000954:	2303      	movs	r3, #3
 8000956:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800095a:	2308      	movs	r3, #8
 800095c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000960:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000964:	4619      	mov	r1, r3
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <HAL_UART_MspInit+0xbc>)
 8000968:	f000 fa44 	bl	8000df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800096c:	bf00      	nop
 800096e:	37b0      	adds	r7, #176	; 0xb0
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40008000 	.word	0x40008000
 8000978:	40021000 	.word	0x40021000
 800097c:	48001800 	.word	0x48001800

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <NMI_Handler+0x4>

08000986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <MemManage_Handler+0x4>

08000992 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <UsageFault_Handler+0x4>

0800099e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009cc:	f000 f8e8 	bl	8000ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009dc:	4a14      	ldr	r2, [pc, #80]	; (8000a30 <_sbrk+0x5c>)
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <_sbrk+0x60>)
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e8:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <_sbrk+0x64>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d102      	bne.n	80009f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <_sbrk+0x64>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <_sbrk+0x68>)
 80009f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <_sbrk+0x64>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d207      	bcs.n	8000a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a04:	f002 fbf6 	bl	80031f4 <__errno>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a12:	e009      	b.n	8000a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <_sbrk+0x64>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a1a:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <_sbrk+0x64>)
 8000a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a26:	68fb      	ldr	r3, [r7, #12]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20040000 	.word	0x20040000
 8000a34:	00000400 	.word	0x00000400
 8000a38:	2000008c 	.word	0x2000008c
 8000a3c:	20000130 	.word	0x20000130

08000a40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a44:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <SystemInit+0x5c>)
 8000a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4a:	4a14      	ldr	r2, [pc, #80]	; (8000a9c <SystemInit+0x5c>)
 8000a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <SystemInit+0x60>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a11      	ldr	r2, [pc, #68]	; (8000aa0 <SystemInit+0x60>)
 8000a5a:	f043 0301 	orr.w	r3, r3, #1
 8000a5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <SystemInit+0x60>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <SystemInit+0x60>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <SystemInit+0x60>)
 8000a6c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a70:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a74:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <SystemInit+0x60>)
 8000a78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a7c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <SystemInit+0x60>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <SystemInit+0x60>)
 8000a84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a88:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <SystemInit+0x60>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000adc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aa8:	f7ff ffca 	bl	8000a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000aac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000aae:	e003      	b.n	8000ab8 <LoopCopyDataInit>

08000ab0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ab2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ab4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ab6:	3104      	adds	r1, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ab8:	480a      	ldr	r0, [pc, #40]	; (8000ae4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000abc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000abe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ac0:	d3f6      	bcc.n	8000ab0 <CopyDataInit>
	ldr	r2, =_sbss
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ac4:	e002      	b.n	8000acc <LoopFillZerobss>

08000ac6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ac6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ac8:	f842 3b04 	str.w	r3, [r2], #4

08000acc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <LoopForever+0x16>)
	cmp	r2, r3
 8000ace:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ad0:	d3f9      	bcc.n	8000ac6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f002 fb95 	bl	8003200 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ad6:	f7ff fd5f 	bl	8000598 <main>

08000ada <LoopForever>:

LoopForever:
    b LoopForever
 8000ada:	e7fe      	b.n	8000ada <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000adc:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 8000ae0:	08003b74 	.word	0x08003b74
	ldr	r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ae8:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000aec:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000af0:	20000130 	.word	0x20000130

08000af4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <ADC1_2_IRQHandler>

08000af6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000afc:	2300      	movs	r3, #0
 8000afe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b00:	2003      	movs	r0, #3
 8000b02:	f000 f943 	bl	8000d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b06:	2000      	movs	r0, #0
 8000b08:	f000 f80e 	bl	8000b28 <HAL_InitTick>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d002      	beq.n	8000b18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	71fb      	strb	r3, [r7, #7]
 8000b16:	e001      	b.n	8000b1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b18:	f7ff feae 	bl	8000878 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b30:	2300      	movs	r3, #0
 8000b32:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b34:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <HAL_InitTick+0x6c>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d023      	beq.n	8000b84 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b3c:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <HAL_InitTick+0x70>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <HAL_InitTick+0x6c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4619      	mov	r1, r3
 8000b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 f941 	bl	8000dda <HAL_SYSTICK_Config>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d10f      	bne.n	8000b7e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b0f      	cmp	r3, #15
 8000b62:	d809      	bhi.n	8000b78 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b64:	2200      	movs	r2, #0
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	f000 f919 	bl	8000da2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b70:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <HAL_InitTick+0x74>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	e007      	b.n	8000b88 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	73fb      	strb	r3, [r7, #15]
 8000b7c:	e004      	b.n	8000b88 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	73fb      	strb	r3, [r7, #15]
 8000b82:	e001      	b.n	8000b88 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b84:	2301      	movs	r3, #1
 8000b86:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000008 	.word	0x20000008
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	20000004 	.word	0x20000004

08000ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x20>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_IncTick+0x24>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <HAL_IncTick+0x24>)
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	2000011c 	.word	0x2000011c

08000bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return uwTick;
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <HAL_GetTick+0x14>)
 8000bce:	681b      	ldr	r3, [r3, #0]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	2000011c 	.word	0x2000011c

08000be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be8:	f7ff ffee 	bl	8000bc8 <HAL_GetTick>
 8000bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf8:	d005      	beq.n	8000c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <HAL_Delay+0x44>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4413      	add	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c06:	bf00      	nop
 8000c08:	f7ff ffde 	bl	8000bc8 <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d8f7      	bhi.n	8000c08 <HAL_Delay+0x28>
  {
  }
}
 8000c18:	bf00      	nop
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000008 	.word	0x20000008

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	60d3      	str	r3, [r2, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	6039      	str	r1, [r7, #0]
 8000c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	db0a      	blt.n	8000cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	490c      	ldr	r1, [pc, #48]	; (8000cd8 <__NVIC_SetPriority+0x4c>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	0112      	lsls	r2, r2, #4
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	440b      	add	r3, r1
 8000cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb4:	e00a      	b.n	8000ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4908      	ldr	r1, [pc, #32]	; (8000cdc <__NVIC_SetPriority+0x50>)
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	3b04      	subs	r3, #4
 8000cc4:	0112      	lsls	r2, r2, #4
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	440b      	add	r3, r1
 8000cca:	761a      	strb	r2, [r3, #24]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000e100 	.word	0xe000e100
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	; 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f1c3 0307 	rsb	r3, r3, #7
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	bf28      	it	cs
 8000cfe:	2304      	movcs	r3, #4
 8000d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3304      	adds	r3, #4
 8000d06:	2b06      	cmp	r3, #6
 8000d08:	d902      	bls.n	8000d10 <NVIC_EncodePriority+0x30>
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3b03      	subs	r3, #3
 8000d0e:	e000      	b.n	8000d12 <NVIC_EncodePriority+0x32>
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	f04f 32ff 	mov.w	r2, #4294967295
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	401a      	ands	r2, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d28:	f04f 31ff 	mov.w	r1, #4294967295
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	43d9      	mvns	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	4313      	orrs	r3, r2
         );
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3724      	adds	r7, #36	; 0x24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
	...

08000d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d58:	d301      	bcc.n	8000d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e00f      	b.n	8000d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <SysTick_Config+0x40>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d66:	210f      	movs	r1, #15
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6c:	f7ff ff8e 	bl	8000c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <SysTick_Config+0x40>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d76:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <SysTick_Config+0x40>)
 8000d78:	2207      	movs	r2, #7
 8000d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	e000e010 	.word	0xe000e010

08000d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff ff47 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b086      	sub	sp, #24
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4603      	mov	r3, r0
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
 8000dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000db4:	f7ff ff5c 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000db8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	68b9      	ldr	r1, [r7, #8]
 8000dbe:	6978      	ldr	r0, [r7, #20]
 8000dc0:	f7ff ff8e 	bl	8000ce0 <NVIC_EncodePriority>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dca:	4611      	mov	r1, r2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff ff5d 	bl	8000c8c <__NVIC_SetPriority>
}
 8000dd2:	bf00      	nop
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ffb0 	bl	8000d48 <SysTick_Config>
 8000de8:	4603      	mov	r3, r0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b087      	sub	sp, #28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e02:	e166      	b.n	80010d2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	2101      	movs	r1, #1
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e10:	4013      	ands	r3, r2
 8000e12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f000 8158 	beq.w	80010cc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d00b      	beq.n	8000e3c <HAL_GPIO_Init+0x48>
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d007      	beq.n	8000e3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e30:	2b11      	cmp	r3, #17
 8000e32:	d003      	beq.n	8000e3c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b12      	cmp	r3, #18
 8000e3a:	d130      	bne.n	8000e9e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	68da      	ldr	r2, [r3, #12]
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e72:	2201      	movs	r2, #1
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	091b      	lsrs	r3, r3, #4
 8000e88:	f003 0201 	and.w	r2, r3, #1
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0xea>
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b12      	cmp	r3, #18
 8000edc:	d123      	bne.n	8000f26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	08da      	lsrs	r2, r3, #3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3208      	adds	r2, #8
 8000ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	220f      	movs	r2, #15
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	691a      	ldr	r2, [r3, #16]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	f003 0307 	and.w	r3, r3, #7
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	08da      	lsrs	r2, r3, #3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3208      	adds	r2, #8
 8000f20:	6939      	ldr	r1, [r7, #16]
 8000f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	2203      	movs	r2, #3
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0203 	and.w	r2, r3, #3
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f000 80b2 	beq.w	80010cc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f68:	4b61      	ldr	r3, [pc, #388]	; (80010f0 <HAL_GPIO_Init+0x2fc>)
 8000f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6c:	4a60      	ldr	r2, [pc, #384]	; (80010f0 <HAL_GPIO_Init+0x2fc>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	6613      	str	r3, [r2, #96]	; 0x60
 8000f74:	4b5e      	ldr	r3, [pc, #376]	; (80010f0 <HAL_GPIO_Init+0x2fc>)
 8000f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f80:	4a5c      	ldr	r2, [pc, #368]	; (80010f4 <HAL_GPIO_Init+0x300>)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	089b      	lsrs	r3, r3, #2
 8000f86:	3302      	adds	r3, #2
 8000f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	220f      	movs	r2, #15
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000faa:	d02b      	beq.n	8001004 <HAL_GPIO_Init+0x210>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a52      	ldr	r2, [pc, #328]	; (80010f8 <HAL_GPIO_Init+0x304>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d025      	beq.n	8001000 <HAL_GPIO_Init+0x20c>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a51      	ldr	r2, [pc, #324]	; (80010fc <HAL_GPIO_Init+0x308>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d01f      	beq.n	8000ffc <HAL_GPIO_Init+0x208>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a50      	ldr	r2, [pc, #320]	; (8001100 <HAL_GPIO_Init+0x30c>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d019      	beq.n	8000ff8 <HAL_GPIO_Init+0x204>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a4f      	ldr	r2, [pc, #316]	; (8001104 <HAL_GPIO_Init+0x310>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d013      	beq.n	8000ff4 <HAL_GPIO_Init+0x200>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a4e      	ldr	r2, [pc, #312]	; (8001108 <HAL_GPIO_Init+0x314>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d00d      	beq.n	8000ff0 <HAL_GPIO_Init+0x1fc>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a4d      	ldr	r2, [pc, #308]	; (800110c <HAL_GPIO_Init+0x318>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d007      	beq.n	8000fec <HAL_GPIO_Init+0x1f8>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a4c      	ldr	r2, [pc, #304]	; (8001110 <HAL_GPIO_Init+0x31c>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d101      	bne.n	8000fe8 <HAL_GPIO_Init+0x1f4>
 8000fe4:	2307      	movs	r3, #7
 8000fe6:	e00e      	b.n	8001006 <HAL_GPIO_Init+0x212>
 8000fe8:	2308      	movs	r3, #8
 8000fea:	e00c      	b.n	8001006 <HAL_GPIO_Init+0x212>
 8000fec:	2306      	movs	r3, #6
 8000fee:	e00a      	b.n	8001006 <HAL_GPIO_Init+0x212>
 8000ff0:	2305      	movs	r3, #5
 8000ff2:	e008      	b.n	8001006 <HAL_GPIO_Init+0x212>
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	e006      	b.n	8001006 <HAL_GPIO_Init+0x212>
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e004      	b.n	8001006 <HAL_GPIO_Init+0x212>
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	e002      	b.n	8001006 <HAL_GPIO_Init+0x212>
 8001000:	2301      	movs	r3, #1
 8001002:	e000      	b.n	8001006 <HAL_GPIO_Init+0x212>
 8001004:	2300      	movs	r3, #0
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	f002 0203 	and.w	r2, r2, #3
 800100c:	0092      	lsls	r2, r2, #2
 800100e:	4093      	lsls	r3, r2
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001016:	4937      	ldr	r1, [pc, #220]	; (80010f4 <HAL_GPIO_Init+0x300>)
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	3302      	adds	r3, #2
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001024:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <HAL_GPIO_Init+0x320>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001048:	4a32      	ldr	r2, [pc, #200]	; (8001114 <HAL_GPIO_Init+0x320>)
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800104e:	4b31      	ldr	r3, [pc, #196]	; (8001114 <HAL_GPIO_Init+0x320>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	43db      	mvns	r3, r3
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4313      	orrs	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001072:	4a28      	ldr	r2, [pc, #160]	; (8001114 <HAL_GPIO_Init+0x320>)
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001078:	4b26      	ldr	r3, [pc, #152]	; (8001114 <HAL_GPIO_Init+0x320>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	43db      	mvns	r3, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800109c:	4a1d      	ldr	r2, [pc, #116]	; (8001114 <HAL_GPIO_Init+0x320>)
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <HAL_GPIO_Init+0x320>)
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010c6:	4a13      	ldr	r2, [pc, #76]	; (8001114 <HAL_GPIO_Init+0x320>)
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	3301      	adds	r3, #1
 80010d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	fa22 f303 	lsr.w	r3, r2, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f47f ae91 	bne.w	8000e04 <HAL_GPIO_Init+0x10>
  }
}
 80010e2:	bf00      	nop
 80010e4:	bf00      	nop
 80010e6:	371c      	adds	r7, #28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40010000 	.word	0x40010000
 80010f8:	48000400 	.word	0x48000400
 80010fc:	48000800 	.word	0x48000800
 8001100:	48000c00 	.word	0x48000c00
 8001104:	48001000 	.word	0x48001000
 8001108:	48001400 	.word	0x48001400
 800110c:	48001800 	.word	0x48001800
 8001110:	48001c00 	.word	0x48001c00
 8001114:	40010400 	.word	0x40010400

08001118 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	691a      	ldr	r2, [r3, #16]
 8001128:	887b      	ldrh	r3, [r7, #2]
 800112a:	4013      	ands	r3, r2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d002      	beq.n	8001136 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001130:	2301      	movs	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	e001      	b.n	800113a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001136:	2300      	movs	r3, #0
 8001138:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
 8001154:	4613      	mov	r3, r2
 8001156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001158:	787b      	ldrb	r3, [r7, #1]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800115e:	887a      	ldrh	r2, [r7, #2]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001164:	e002      	b.n	800116c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001166:	887a      	ldrh	r2, [r7, #2]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <HAL_PWREx_GetVoltageRange+0x18>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001184:	4618      	mov	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	40007000 	.word	0x40007000

08001194 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011a2:	d130      	bne.n	8001206 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011a4:	4b23      	ldr	r3, [pc, #140]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011b0:	d038      	beq.n	8001224 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b2:	4b20      	ldr	r3, [pc, #128]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011ba:	4a1e      	ldr	r2, [pc, #120]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011c2:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2232      	movs	r2, #50	; 0x32
 80011c8:	fb02 f303 	mul.w	r3, r2, r3
 80011cc:	4a1b      	ldr	r2, [pc, #108]	; (800123c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011ce:	fba2 2303 	umull	r2, r3, r2, r3
 80011d2:	0c9b      	lsrs	r3, r3, #18
 80011d4:	3301      	adds	r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011d8:	e002      	b.n	80011e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	3b01      	subs	r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ec:	d102      	bne.n	80011f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1f2      	bne.n	80011da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001200:	d110      	bne.n	8001224 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e00f      	b.n	8001226 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800120e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001212:	d007      	beq.n	8001224 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800121c:	4a05      	ldr	r2, [pc, #20]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001222:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40007000 	.word	0x40007000
 8001238:	20000000 	.word	0x20000000
 800123c:	431bde83 	.word	0x431bde83

08001240 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <HAL_PWREx_EnableVddIO2+0x1c>)
 800124a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800124e:	6053      	str	r3, [r2, #4]
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40007000 	.word	0x40007000

08001260 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d102      	bne.n	8001274 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	f000 bc16 	b.w	8001aa0 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001274:	4ba0      	ldr	r3, [pc, #640]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f003 030c 	and.w	r3, r3, #12
 800127c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800127e:	4b9e      	ldr	r3, [pc, #632]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0310 	and.w	r3, r3, #16
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 80e4 	beq.w	800145e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d007      	beq.n	80012ac <HAL_RCC_OscConfig+0x4c>
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	2b0c      	cmp	r3, #12
 80012a0:	f040 808b 	bne.w	80013ba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	f040 8087 	bne.w	80013ba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012ac:	4b92      	ldr	r3, [pc, #584]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d005      	beq.n	80012c4 <HAL_RCC_OscConfig+0x64>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d101      	bne.n	80012c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e3ed      	b.n	8001aa0 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a1a      	ldr	r2, [r3, #32]
 80012c8:	4b8b      	ldr	r3, [pc, #556]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0308 	and.w	r3, r3, #8
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d004      	beq.n	80012de <HAL_RCC_OscConfig+0x7e>
 80012d4:	4b88      	ldr	r3, [pc, #544]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012dc:	e005      	b.n	80012ea <HAL_RCC_OscConfig+0x8a>
 80012de:	4b86      	ldr	r3, [pc, #536]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 80012e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012e4:	091b      	lsrs	r3, r3, #4
 80012e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d223      	bcs.n	8001336 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a1b      	ldr	r3, [r3, #32]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 fd80 	bl	8001df8 <RCC_SetFlashLatencyFromMSIRange>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e3ce      	b.n	8001aa0 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001302:	4b7d      	ldr	r3, [pc, #500]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a7c      	ldr	r2, [pc, #496]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 8001308:	f043 0308 	orr.w	r3, r3, #8
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	4b7a      	ldr	r3, [pc, #488]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	4977      	ldr	r1, [pc, #476]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 800131c:	4313      	orrs	r3, r2
 800131e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001320:	4b75      	ldr	r3, [pc, #468]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	4972      	ldr	r1, [pc, #456]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 8001330:	4313      	orrs	r3, r2
 8001332:	604b      	str	r3, [r1, #4]
 8001334:	e025      	b.n	8001382 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001336:	4b70      	ldr	r3, [pc, #448]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a6f      	ldr	r2, [pc, #444]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 800133c:	f043 0308 	orr.w	r3, r3, #8
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	4b6d      	ldr	r3, [pc, #436]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	496a      	ldr	r1, [pc, #424]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 8001350:	4313      	orrs	r3, r2
 8001352:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001354:	4b68      	ldr	r3, [pc, #416]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69db      	ldr	r3, [r3, #28]
 8001360:	021b      	lsls	r3, r3, #8
 8001362:	4965      	ldr	r1, [pc, #404]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 8001364:	4313      	orrs	r3, r2
 8001366:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d109      	bne.n	8001382 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	4618      	mov	r0, r3
 8001374:	f000 fd40 	bl	8001df8 <RCC_SetFlashLatencyFromMSIRange>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e38e      	b.n	8001aa0 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001382:	f000 fc75 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8001386:	4602      	mov	r2, r0
 8001388:	4b5b      	ldr	r3, [pc, #364]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	091b      	lsrs	r3, r3, #4
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	495a      	ldr	r1, [pc, #360]	; (80014fc <HAL_RCC_OscConfig+0x29c>)
 8001394:	5ccb      	ldrb	r3, [r1, r3]
 8001396:	f003 031f 	and.w	r3, r3, #31
 800139a:	fa22 f303 	lsr.w	r3, r2, r3
 800139e:	4a58      	ldr	r2, [pc, #352]	; (8001500 <HAL_RCC_OscConfig+0x2a0>)
 80013a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013a2:	4b58      	ldr	r3, [pc, #352]	; (8001504 <HAL_RCC_OscConfig+0x2a4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fbbe 	bl	8000b28 <HAL_InitTick>
 80013ac:	4603      	mov	r3, r0
 80013ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d052      	beq.n	800145c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	e372      	b.n	8001aa0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d032      	beq.n	8001428 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013c2:	4b4d      	ldr	r3, [pc, #308]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a4c      	ldr	r2, [pc, #304]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013ce:	f7ff fbfb 	bl	8000bc8 <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013d6:	f7ff fbf7 	bl	8000bc8 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e35b      	b.n	8001aa0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013e8:	4b43      	ldr	r3, [pc, #268]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0f0      	beq.n	80013d6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013f4:	4b40      	ldr	r3, [pc, #256]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a3f      	ldr	r2, [pc, #252]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 80013fa:	f043 0308 	orr.w	r3, r3, #8
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b3d      	ldr	r3, [pc, #244]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	493a      	ldr	r1, [pc, #232]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 800140e:	4313      	orrs	r3, r2
 8001410:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001412:	4b39      	ldr	r3, [pc, #228]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	4935      	ldr	r1, [pc, #212]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 8001422:	4313      	orrs	r3, r2
 8001424:	604b      	str	r3, [r1, #4]
 8001426:	e01a      	b.n	800145e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001428:	4b33      	ldr	r3, [pc, #204]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a32      	ldr	r2, [pc, #200]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 800142e:	f023 0301 	bic.w	r3, r3, #1
 8001432:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001434:	f7ff fbc8 	bl	8000bc8 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800143c:	f7ff fbc4 	bl	8000bc8 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e328      	b.n	8001aa0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800144e:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f0      	bne.n	800143c <HAL_RCC_OscConfig+0x1dc>
 800145a:	e000      	b.n	800145e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800145c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d073      	beq.n	8001552 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	2b08      	cmp	r3, #8
 800146e:	d005      	beq.n	800147c <HAL_RCC_OscConfig+0x21c>
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	2b0c      	cmp	r3, #12
 8001474:	d10e      	bne.n	8001494 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	2b03      	cmp	r3, #3
 800147a:	d10b      	bne.n	8001494 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147c:	4b1e      	ldr	r3, [pc, #120]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d063      	beq.n	8001550 <HAL_RCC_OscConfig+0x2f0>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d15f      	bne.n	8001550 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e305      	b.n	8001aa0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800149c:	d106      	bne.n	80014ac <HAL_RCC_OscConfig+0x24c>
 800149e:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a15      	ldr	r2, [pc, #84]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 80014a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e01d      	b.n	80014e8 <HAL_RCC_OscConfig+0x288>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014b4:	d10c      	bne.n	80014d0 <HAL_RCC_OscConfig+0x270>
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a0f      	ldr	r2, [pc, #60]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 80014bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a0c      	ldr	r2, [pc, #48]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 80014c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	e00b      	b.n	80014e8 <HAL_RCC_OscConfig+0x288>
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a08      	ldr	r2, [pc, #32]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 80014d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a05      	ldr	r2, [pc, #20]	; (80014f8 <HAL_RCC_OscConfig+0x298>)
 80014e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d01b      	beq.n	8001528 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f0:	f7ff fb6a 	bl	8000bc8 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014f6:	e010      	b.n	800151a <HAL_RCC_OscConfig+0x2ba>
 80014f8:	40021000 	.word	0x40021000
 80014fc:	08003ae8 	.word	0x08003ae8
 8001500:	20000000 	.word	0x20000000
 8001504:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001508:	f7ff fb5e 	bl	8000bc8 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	; 0x64
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e2c2      	b.n	8001aa0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800151a:	4baf      	ldr	r3, [pc, #700]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0f0      	beq.n	8001508 <HAL_RCC_OscConfig+0x2a8>
 8001526:	e014      	b.n	8001552 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001528:	f7ff fb4e 	bl	8000bc8 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001530:	f7ff fb4a 	bl	8000bc8 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b64      	cmp	r3, #100	; 0x64
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e2ae      	b.n	8001aa0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001542:	4ba5      	ldr	r3, [pc, #660]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x2d0>
 800154e:	e000      	b.n	8001552 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d060      	beq.n	8001620 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	2b04      	cmp	r3, #4
 8001562:	d005      	beq.n	8001570 <HAL_RCC_OscConfig+0x310>
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	2b0c      	cmp	r3, #12
 8001568:	d119      	bne.n	800159e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d116      	bne.n	800159e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001570:	4b99      	ldr	r3, [pc, #612]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <HAL_RCC_OscConfig+0x328>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e28b      	b.n	8001aa0 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001588:	4b93      	ldr	r3, [pc, #588]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	061b      	lsls	r3, r3, #24
 8001596:	4990      	ldr	r1, [pc, #576]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 8001598:	4313      	orrs	r3, r2
 800159a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800159c:	e040      	b.n	8001620 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d023      	beq.n	80015ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a6:	4b8c      	ldr	r3, [pc, #560]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a8b      	ldr	r2, [pc, #556]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 80015ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b2:	f7ff fb09 	bl	8000bc8 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ba:	f7ff fb05 	bl	8000bc8 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e269      	b.n	8001aa0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015cc:	4b82      	ldr	r3, [pc, #520]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0f0      	beq.n	80015ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d8:	4b7f      	ldr	r3, [pc, #508]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	061b      	lsls	r3, r3, #24
 80015e6:	497c      	ldr	r1, [pc, #496]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]
 80015ec:	e018      	b.n	8001620 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ee:	4b7a      	ldr	r3, [pc, #488]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a79      	ldr	r2, [pc, #484]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 80015f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fa:	f7ff fae5 	bl	8000bc8 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001602:	f7ff fae1 	bl	8000bc8 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e245      	b.n	8001aa0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001614:	4b70      	ldr	r3, [pc, #448]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1f0      	bne.n	8001602 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	2b00      	cmp	r3, #0
 800162a:	d03c      	beq.n	80016a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d01c      	beq.n	800166e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001634:	4b68      	ldr	r3, [pc, #416]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 8001636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163a:	4a67      	ldr	r2, [pc, #412]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001644:	f7ff fac0 	bl	8000bc8 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164c:	f7ff fabc 	bl	8000bc8 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e220      	b.n	8001aa0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800165e:	4b5e      	ldr	r3, [pc, #376]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 8001660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0ef      	beq.n	800164c <HAL_RCC_OscConfig+0x3ec>
 800166c:	e01b      	b.n	80016a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800166e:	4b5a      	ldr	r3, [pc, #360]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 8001670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001674:	4a58      	ldr	r2, [pc, #352]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 8001676:	f023 0301 	bic.w	r3, r3, #1
 800167a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167e:	f7ff faa3 	bl	8000bc8 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001686:	f7ff fa9f 	bl	8000bc8 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e203      	b.n	8001aa0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001698:	4b4f      	ldr	r3, [pc, #316]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 800169a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1ef      	bne.n	8001686 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0304 	and.w	r3, r3, #4
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 80a6 	beq.w	8001800 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016b4:	2300      	movs	r3, #0
 80016b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016b8:	4b47      	ldr	r3, [pc, #284]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 80016ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d10d      	bne.n	80016e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016c4:	4b44      	ldr	r3, [pc, #272]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 80016c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c8:	4a43      	ldr	r2, [pc, #268]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 80016ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ce:	6593      	str	r3, [r2, #88]	; 0x58
 80016d0:	4b41      	ldr	r3, [pc, #260]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 80016d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016dc:	2301      	movs	r3, #1
 80016de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e0:	4b3e      	ldr	r3, [pc, #248]	; (80017dc <HAL_RCC_OscConfig+0x57c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d118      	bne.n	800171e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016ec:	4b3b      	ldr	r3, [pc, #236]	; (80017dc <HAL_RCC_OscConfig+0x57c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a3a      	ldr	r2, [pc, #232]	; (80017dc <HAL_RCC_OscConfig+0x57c>)
 80016f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016f8:	f7ff fa66 	bl	8000bc8 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001700:	f7ff fa62 	bl	8000bc8 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e1c6      	b.n	8001aa0 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001712:	4b32      	ldr	r3, [pc, #200]	; (80017dc <HAL_RCC_OscConfig+0x57c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d108      	bne.n	8001738 <HAL_RCC_OscConfig+0x4d8>
 8001726:	4b2c      	ldr	r3, [pc, #176]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 8001728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172c:	4a2a      	ldr	r2, [pc, #168]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001736:	e024      	b.n	8001782 <HAL_RCC_OscConfig+0x522>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2b05      	cmp	r3, #5
 800173e:	d110      	bne.n	8001762 <HAL_RCC_OscConfig+0x502>
 8001740:	4b25      	ldr	r3, [pc, #148]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 8001742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001746:	4a24      	ldr	r2, [pc, #144]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001750:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 8001752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001756:	4a20      	ldr	r2, [pc, #128]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001760:	e00f      	b.n	8001782 <HAL_RCC_OscConfig+0x522>
 8001762:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 8001764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001768:	4a1b      	ldr	r2, [pc, #108]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 800176a:	f023 0301 	bic.w	r3, r3, #1
 800176e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 8001774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001778:	4a17      	ldr	r2, [pc, #92]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 800177a:	f023 0304 	bic.w	r3, r3, #4
 800177e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d016      	beq.n	80017b8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178a:	f7ff fa1d 	bl	8000bc8 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001790:	e00a      	b.n	80017a8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001792:	f7ff fa19 	bl	8000bc8 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e17b      	b.n	8001aa0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017a8:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <HAL_RCC_OscConfig+0x578>)
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0ed      	beq.n	8001792 <HAL_RCC_OscConfig+0x532>
 80017b6:	e01a      	b.n	80017ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b8:	f7ff fa06 	bl	8000bc8 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017be:	e00f      	b.n	80017e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c0:	f7ff fa02 	bl	8000bc8 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d906      	bls.n	80017e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e164      	b.n	8001aa0 <HAL_RCC_OscConfig+0x840>
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017e0:	4ba8      	ldr	r3, [pc, #672]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 80017e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1e8      	bne.n	80017c0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017ee:	7ffb      	ldrb	r3, [r7, #31]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d105      	bne.n	8001800 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f4:	4ba3      	ldr	r3, [pc, #652]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 80017f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f8:	4aa2      	ldr	r2, [pc, #648]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 80017fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0320 	and.w	r3, r3, #32
 8001808:	2b00      	cmp	r3, #0
 800180a:	d03c      	beq.n	8001886 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001810:	2b00      	cmp	r3, #0
 8001812:	d01c      	beq.n	800184e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001814:	4b9b      	ldr	r3, [pc, #620]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 8001816:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800181a:	4a9a      	ldr	r2, [pc, #616]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001824:	f7ff f9d0 	bl	8000bc8 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800182c:	f7ff f9cc 	bl	8000bc8 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e130      	b.n	8001aa0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800183e:	4b91      	ldr	r3, [pc, #580]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 8001840:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0ef      	beq.n	800182c <HAL_RCC_OscConfig+0x5cc>
 800184c:	e01b      	b.n	8001886 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800184e:	4b8d      	ldr	r3, [pc, #564]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 8001850:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001854:	4a8b      	ldr	r2, [pc, #556]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 8001856:	f023 0301 	bic.w	r3, r3, #1
 800185a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185e:	f7ff f9b3 	bl	8000bc8 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001866:	f7ff f9af 	bl	8000bc8 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e113      	b.n	8001aa0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001878:	4b82      	ldr	r3, [pc, #520]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 800187a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1ef      	bne.n	8001866 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 8107 	beq.w	8001a9e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001894:	2b02      	cmp	r3, #2
 8001896:	f040 80cb 	bne.w	8001a30 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800189a:	4b7a      	ldr	r3, [pc, #488]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f003 0203 	and.w	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d12c      	bne.n	8001908 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	3b01      	subs	r3, #1
 80018ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d123      	bne.n	8001908 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d11b      	bne.n	8001908 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018dc:	429a      	cmp	r2, r3
 80018de:	d113      	bne.n	8001908 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ea:	085b      	lsrs	r3, r3, #1
 80018ec:	3b01      	subs	r3, #1
 80018ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d109      	bne.n	8001908 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	085b      	lsrs	r3, r3, #1
 8001900:	3b01      	subs	r3, #1
 8001902:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001904:	429a      	cmp	r2, r3
 8001906:	d06d      	beq.n	80019e4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	2b0c      	cmp	r3, #12
 800190c:	d068      	beq.n	80019e0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800190e:	4b5d      	ldr	r3, [pc, #372]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d105      	bne.n	8001926 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800191a:	4b5a      	ldr	r3, [pc, #360]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e0ba      	b.n	8001aa0 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800192a:	4b56      	ldr	r3, [pc, #344]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a55      	ldr	r2, [pc, #340]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 8001930:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001934:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001936:	f7ff f947 	bl	8000bc8 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193e:	f7ff f943 	bl	8000bc8 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e0a7      	b.n	8001aa0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001950:	4b4c      	ldr	r3, [pc, #304]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1f0      	bne.n	800193e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800195c:	4b49      	ldr	r3, [pc, #292]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	4b49      	ldr	r3, [pc, #292]	; (8001a88 <HAL_RCC_OscConfig+0x828>)
 8001962:	4013      	ands	r3, r2
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800196c:	3a01      	subs	r2, #1
 800196e:	0112      	lsls	r2, r2, #4
 8001970:	4311      	orrs	r1, r2
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001976:	0212      	lsls	r2, r2, #8
 8001978:	4311      	orrs	r1, r2
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800197e:	0852      	lsrs	r2, r2, #1
 8001980:	3a01      	subs	r2, #1
 8001982:	0552      	lsls	r2, r2, #21
 8001984:	4311      	orrs	r1, r2
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800198a:	0852      	lsrs	r2, r2, #1
 800198c:	3a01      	subs	r2, #1
 800198e:	0652      	lsls	r2, r2, #25
 8001990:	4311      	orrs	r1, r2
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001996:	06d2      	lsls	r2, r2, #27
 8001998:	430a      	orrs	r2, r1
 800199a:	493a      	ldr	r1, [pc, #232]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 800199c:	4313      	orrs	r3, r2
 800199e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019a0:	4b38      	ldr	r3, [pc, #224]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a37      	ldr	r2, [pc, #220]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 80019a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019ac:	4b35      	ldr	r3, [pc, #212]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	4a34      	ldr	r2, [pc, #208]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 80019b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019b8:	f7ff f906 	bl	8000bc8 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c0:	f7ff f902 	bl	8000bc8 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e066      	b.n	8001aa0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d2:	4b2c      	ldr	r3, [pc, #176]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019de:	e05e      	b.n	8001a9e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e05d      	b.n	8001aa0 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e4:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d156      	bne.n	8001a9e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019f0:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a23      	ldr	r2, [pc, #140]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 80019f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019fc:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	4a20      	ldr	r2, [pc, #128]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 8001a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a08:	f7ff f8de 	bl	8000bc8 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a10:	f7ff f8da 	bl	8000bc8 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e03e      	b.n	8001aa0 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a22:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCC_OscConfig+0x7b0>
 8001a2e:	e036      	b.n	8001a9e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	2b0c      	cmp	r3, #12
 8001a34:	d031      	beq.n	8001a9a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a36:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 8001a3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a40:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d105      	bne.n	8001a5a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	4a0c      	ldr	r2, [pc, #48]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 8001a54:	f023 0303 	bic.w	r3, r3, #3
 8001a58:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <HAL_RCC_OscConfig+0x824>)
 8001a60:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a68:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6a:	f7ff f8ad 	bl	8000bc8 <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a70:	e00c      	b.n	8001a8c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a72:	f7ff f8a9 	bl	8000bc8 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d905      	bls.n	8001a8c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e00d      	b.n	8001aa0 <HAL_RCC_OscConfig+0x840>
 8001a84:	40021000 	.word	0x40021000
 8001a88:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_RCC_OscConfig+0x848>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1ec      	bne.n	8001a72 <HAL_RCC_OscConfig+0x812>
 8001a98:	e001      	b.n	8001a9e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3720      	adds	r7, #32
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40021000 	.word	0x40021000

08001aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0c8      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac0:	4b66      	ldr	r3, [pc, #408]	; (8001c5c <HAL_RCC_ClockConfig+0x1b0>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d910      	bls.n	8001af0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ace:	4b63      	ldr	r3, [pc, #396]	; (8001c5c <HAL_RCC_ClockConfig+0x1b0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 0207 	bic.w	r2, r3, #7
 8001ad6:	4961      	ldr	r1, [pc, #388]	; (8001c5c <HAL_RCC_ClockConfig+0x1b0>)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ade:	4b5f      	ldr	r3, [pc, #380]	; (8001c5c <HAL_RCC_ClockConfig+0x1b0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0b0      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d04c      	beq.n	8001b96 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b03      	cmp	r3, #3
 8001b02:	d107      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b04:	4b56      	ldr	r3, [pc, #344]	; (8001c60 <HAL_RCC_ClockConfig+0x1b4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d121      	bne.n	8001b54 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e09e      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d107      	bne.n	8001b2c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b1c:	4b50      	ldr	r3, [pc, #320]	; (8001c60 <HAL_RCC_ClockConfig+0x1b4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d115      	bne.n	8001b54 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e092      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d107      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b34:	4b4a      	ldr	r3, [pc, #296]	; (8001c60 <HAL_RCC_ClockConfig+0x1b4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d109      	bne.n	8001b54 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e086      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b44:	4b46      	ldr	r3, [pc, #280]	; (8001c60 <HAL_RCC_ClockConfig+0x1b4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e07e      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b54:	4b42      	ldr	r3, [pc, #264]	; (8001c60 <HAL_RCC_ClockConfig+0x1b4>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f023 0203 	bic.w	r2, r3, #3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	493f      	ldr	r1, [pc, #252]	; (8001c60 <HAL_RCC_ClockConfig+0x1b4>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b66:	f7ff f82f 	bl	8000bc8 <HAL_GetTick>
 8001b6a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6c:	e00a      	b.n	8001b84 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6e:	f7ff f82b 	bl	8000bc8 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e066      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b84:	4b36      	ldr	r3, [pc, #216]	; (8001c60 <HAL_RCC_ClockConfig+0x1b4>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 020c 	and.w	r2, r3, #12
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d1eb      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d008      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba2:	4b2f      	ldr	r3, [pc, #188]	; (8001c60 <HAL_RCC_ClockConfig+0x1b4>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	492c      	ldr	r1, [pc, #176]	; (8001c60 <HAL_RCC_ClockConfig+0x1b4>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b29      	ldr	r3, [pc, #164]	; (8001c5c <HAL_RCC_ClockConfig+0x1b0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d210      	bcs.n	8001be4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc2:	4b26      	ldr	r3, [pc, #152]	; (8001c5c <HAL_RCC_ClockConfig+0x1b0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 0207 	bic.w	r2, r3, #7
 8001bca:	4924      	ldr	r1, [pc, #144]	; (8001c5c <HAL_RCC_ClockConfig+0x1b0>)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd2:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <HAL_RCC_ClockConfig+0x1b0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e036      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d008      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <HAL_RCC_ClockConfig+0x1b4>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	4918      	ldr	r1, [pc, #96]	; (8001c60 <HAL_RCC_ClockConfig+0x1b4>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d009      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c0e:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <HAL_RCC_ClockConfig+0x1b4>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4910      	ldr	r1, [pc, #64]	; (8001c60 <HAL_RCC_ClockConfig+0x1b4>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c22:	f000 f825 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8001c26:	4602      	mov	r2, r0
 8001c28:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <HAL_RCC_ClockConfig+0x1b4>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	490c      	ldr	r1, [pc, #48]	; (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001c34:	5ccb      	ldrb	r3, [r1, r3]
 8001c36:	f003 031f 	and.w	r3, r3, #31
 8001c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe ff6e 	bl	8000b28 <HAL_InitTick>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c50:	7afb      	ldrb	r3, [r7, #11]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40022000 	.word	0x40022000
 8001c60:	40021000 	.word	0x40021000
 8001c64:	08003ae8 	.word	0x08003ae8
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	20000004 	.word	0x20000004

08001c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	; 0x24
 8001c74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c7e:	4b3e      	ldr	r3, [pc, #248]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c88:	4b3b      	ldr	r3, [pc, #236]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	2b0c      	cmp	r3, #12
 8001c9c:	d121      	bne.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d11e      	bne.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ca4:	4b34      	ldr	r3, [pc, #208]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d107      	bne.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cb0:	4b31      	ldr	r3, [pc, #196]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb6:	0a1b      	lsrs	r3, r3, #8
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	e005      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cc0:	4b2d      	ldr	r3, [pc, #180]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ccc:	4a2b      	ldr	r2, [pc, #172]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10d      	bne.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d102      	bne.n	8001cee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ce8:	4b25      	ldr	r3, [pc, #148]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cea:	61bb      	str	r3, [r7, #24]
 8001cec:	e004      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d101      	bne.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cf4:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cf6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	2b0c      	cmp	r3, #12
 8001cfc:	d134      	bne.n	8001d68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d003      	beq.n	8001d16 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d003      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0xac>
 8001d14:	e005      	b.n	8001d22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d16:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d18:	617b      	str	r3, [r7, #20]
      break;
 8001d1a:	e005      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d1c:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d1e:	617b      	str	r3, [r7, #20]
      break;
 8001d20:	e002      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	617b      	str	r3, [r7, #20]
      break;
 8001d26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d28:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	3301      	adds	r3, #1
 8001d34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	0a1b      	lsrs	r3, r3, #8
 8001d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	fb02 f203 	mul.w	r2, r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	0e5b      	lsrs	r3, r3, #25
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	3301      	adds	r3, #1
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d68:	69bb      	ldr	r3, [r7, #24]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3724      	adds	r7, #36	; 0x24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	08003b00 	.word	0x08003b00
 8001d80:	00f42400 	.word	0x00f42400
 8001d84:	007a1200 	.word	0x007a1200

08001d88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d8c:	4b03      	ldr	r3, [pc, #12]	; (8001d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000000 	.word	0x20000000

08001da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001da4:	f7ff fff0 	bl	8001d88 <HAL_RCC_GetHCLKFreq>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4904      	ldr	r1, [pc, #16]	; (8001dc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001db6:	5ccb      	ldrb	r3, [r1, r3]
 8001db8:	f003 031f 	and.w	r3, r3, #31
 8001dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	08003af8 	.word	0x08003af8

08001dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dd0:	f7ff ffda 	bl	8001d88 <HAL_RCC_GetHCLKFreq>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	0adb      	lsrs	r3, r3, #11
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	4904      	ldr	r1, [pc, #16]	; (8001df4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001de2:	5ccb      	ldrb	r3, [r1, r3]
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40021000 	.word	0x40021000
 8001df4:	08003af8 	.word	0x08003af8

08001df8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e00:	2300      	movs	r3, #0
 8001e02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e04:	4b2a      	ldr	r3, [pc, #168]	; (8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e10:	f7ff f9b2 	bl	8001178 <HAL_PWREx_GetVoltageRange>
 8001e14:	6178      	str	r0, [r7, #20]
 8001e16:	e014      	b.n	8001e42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e18:	4b25      	ldr	r3, [pc, #148]	; (8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1c:	4a24      	ldr	r2, [pc, #144]	; (8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e22:	6593      	str	r3, [r2, #88]	; 0x58
 8001e24:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e30:	f7ff f9a2 	bl	8001178 <HAL_PWREx_GetVoltageRange>
 8001e34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e36:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3a:	4a1d      	ldr	r2, [pc, #116]	; (8001eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e48:	d10b      	bne.n	8001e62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b80      	cmp	r3, #128	; 0x80
 8001e4e:	d919      	bls.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2ba0      	cmp	r3, #160	; 0xa0
 8001e54:	d902      	bls.n	8001e5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e56:	2302      	movs	r3, #2
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	e013      	b.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	e010      	b.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b80      	cmp	r3, #128	; 0x80
 8001e66:	d902      	bls.n	8001e6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e68:	2303      	movs	r3, #3
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	e00a      	b.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b80      	cmp	r3, #128	; 0x80
 8001e72:	d102      	bne.n	8001e7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e74:	2302      	movs	r3, #2
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	e004      	b.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b70      	cmp	r3, #112	; 0x70
 8001e7e:	d101      	bne.n	8001e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e80:	2301      	movs	r3, #1
 8001e82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f023 0207 	bic.w	r2, r3, #7
 8001e8c:	4909      	ldr	r1, [pc, #36]	; (8001eb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e94:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d001      	beq.n	8001ea6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40022000 	.word	0x40022000

08001eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d041      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ed8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001edc:	d02a      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ede:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ee2:	d824      	bhi.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ee4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ee8:	d008      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001eea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001eee:	d81e      	bhi.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00a      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001ef4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ef8:	d010      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001efa:	e018      	b.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001efc:	4b86      	ldr	r3, [pc, #536]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	4a85      	ldr	r2, [pc, #532]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f06:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f08:	e015      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f000 facd 	bl	80024b0 <RCCEx_PLLSAI1_Config>
 8001f16:	4603      	mov	r3, r0
 8001f18:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f1a:	e00c      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3320      	adds	r3, #32
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 fbb6 	bl	8002694 <RCCEx_PLLSAI2_Config>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f2c:	e003      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	74fb      	strb	r3, [r7, #19]
      break;
 8001f32:	e000      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f36:	7cfb      	ldrb	r3, [r7, #19]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10b      	bne.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f3c:	4b76      	ldr	r3, [pc, #472]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f4a:	4973      	ldr	r1, [pc, #460]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f52:	e001      	b.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f54:	7cfb      	ldrb	r3, [r7, #19]
 8001f56:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d041      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f6c:	d02a      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f72:	d824      	bhi.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f78:	d008      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f7e:	d81e      	bhi.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00a      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f88:	d010      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f8a:	e018      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f8c:	4b62      	ldr	r3, [pc, #392]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	4a61      	ldr	r2, [pc, #388]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f96:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f98:	e015      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 fa85 	bl	80024b0 <RCCEx_PLLSAI1_Config>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001faa:	e00c      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3320      	adds	r3, #32
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 fb6e 	bl	8002694 <RCCEx_PLLSAI2_Config>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fbc:	e003      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	74fb      	strb	r3, [r7, #19]
      break;
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fc6:	7cfb      	ldrb	r3, [r7, #19]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10b      	bne.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fcc:	4b52      	ldr	r3, [pc, #328]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fda:	494f      	ldr	r1, [pc, #316]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fe2:	e001      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fe4:	7cfb      	ldrb	r3, [r7, #19]
 8001fe6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 80a0 	beq.w	8002136 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ffa:	4b47      	ldr	r3, [pc, #284]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800200a:	2300      	movs	r3, #0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00d      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002010:	4b41      	ldr	r3, [pc, #260]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002014:	4a40      	ldr	r2, [pc, #256]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800201a:	6593      	str	r3, [r2, #88]	; 0x58
 800201c:	4b3e      	ldr	r3, [pc, #248]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002028:	2301      	movs	r3, #1
 800202a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800202c:	4b3b      	ldr	r3, [pc, #236]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a3a      	ldr	r2, [pc, #232]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002036:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002038:	f7fe fdc6 	bl	8000bc8 <HAL_GetTick>
 800203c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800203e:	e009      	b.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002040:	f7fe fdc2 	bl	8000bc8 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d902      	bls.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	74fb      	strb	r3, [r7, #19]
        break;
 8002052:	e005      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002054:	4b31      	ldr	r3, [pc, #196]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0ef      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002060:	7cfb      	ldrb	r3, [r7, #19]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d15c      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002066:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002070:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d01f      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	429a      	cmp	r2, r3
 8002082:	d019      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002084:	4b24      	ldr	r3, [pc, #144]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800208e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002090:	4b21      	ldr	r3, [pc, #132]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002096:	4a20      	ldr	r2, [pc, #128]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020a0:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a6:	4a1c      	ldr	r2, [pc, #112]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020b0:	4a19      	ldr	r2, [pc, #100]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d016      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c2:	f7fe fd81 	bl	8000bc8 <HAL_GetTick>
 80020c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c8:	e00b      	b.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ca:	f7fe fd7d 	bl	8000bc8 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d8:	4293      	cmp	r3, r2
 80020da:	d902      	bls.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	74fb      	strb	r3, [r7, #19]
            break;
 80020e0:	e006      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e2:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ec      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80020f0:	7cfb      	ldrb	r3, [r7, #19]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10c      	bne.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020f6:	4b08      	ldr	r3, [pc, #32]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002106:	4904      	ldr	r1, [pc, #16]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800210e:	e009      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002110:	7cfb      	ldrb	r3, [r7, #19]
 8002112:	74bb      	strb	r3, [r7, #18]
 8002114:	e006      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002120:	7cfb      	ldrb	r3, [r7, #19]
 8002122:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002124:	7c7b      	ldrb	r3, [r7, #17]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d105      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800212a:	4ba6      	ldr	r3, [pc, #664]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800212c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212e:	4aa5      	ldr	r2, [pc, #660]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002134:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00a      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002142:	4ba0      	ldr	r3, [pc, #640]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002148:	f023 0203 	bic.w	r2, r3, #3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002150:	499c      	ldr	r1, [pc, #624]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002152:	4313      	orrs	r3, r2
 8002154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00a      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002164:	4b97      	ldr	r3, [pc, #604]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216a:	f023 020c 	bic.w	r2, r3, #12
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002172:	4994      	ldr	r1, [pc, #592]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002174:	4313      	orrs	r3, r2
 8002176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002186:	4b8f      	ldr	r3, [pc, #572]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	498b      	ldr	r1, [pc, #556]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021a8:	4b86      	ldr	r3, [pc, #536]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	4983      	ldr	r1, [pc, #524]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021ca:	4b7e      	ldr	r3, [pc, #504]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d8:	497a      	ldr	r1, [pc, #488]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021ec:	4b75      	ldr	r3, [pc, #468]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fa:	4972      	ldr	r1, [pc, #456]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800220e:	4b6d      	ldr	r3, [pc, #436]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002214:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800221c:	4969      	ldr	r1, [pc, #420]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00a      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002230:	4b64      	ldr	r3, [pc, #400]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002236:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800223e:	4961      	ldr	r1, [pc, #388]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002252:	4b5c      	ldr	r3, [pc, #368]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002258:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002260:	4958      	ldr	r1, [pc, #352]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002274:	4b53      	ldr	r3, [pc, #332]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002282:	4950      	ldr	r1, [pc, #320]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00a      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002296:	4b4b      	ldr	r3, [pc, #300]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a4:	4947      	ldr	r1, [pc, #284]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00a      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80022b8:	4b42      	ldr	r3, [pc, #264]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022be:	f023 0203 	bic.w	r2, r3, #3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c6:	493f      	ldr	r1, [pc, #252]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d028      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022da:	4b3a      	ldr	r3, [pc, #232]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e8:	4936      	ldr	r1, [pc, #216]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022f8:	d106      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022fa:	4b32      	ldr	r3, [pc, #200]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	4a31      	ldr	r2, [pc, #196]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002300:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002304:	60d3      	str	r3, [r2, #12]
 8002306:	e011      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002310:	d10c      	bne.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3304      	adds	r3, #4
 8002316:	2101      	movs	r1, #1
 8002318:	4618      	mov	r0, r3
 800231a:	f000 f8c9 	bl	80024b0 <RCCEx_PLLSAI1_Config>
 800231e:	4603      	mov	r3, r0
 8002320:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002322:	7cfb      	ldrb	r3, [r7, #19]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002328:	7cfb      	ldrb	r3, [r7, #19]
 800232a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d028      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002338:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002346:	491f      	ldr	r1, [pc, #124]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002352:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002356:	d106      	bne.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002358:	4b1a      	ldr	r3, [pc, #104]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4a19      	ldr	r2, [pc, #100]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800235e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002362:	60d3      	str	r3, [r2, #12]
 8002364:	e011      	b.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800236a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800236e:	d10c      	bne.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3304      	adds	r3, #4
 8002374:	2101      	movs	r1, #1
 8002376:	4618      	mov	r0, r3
 8002378:	f000 f89a 	bl	80024b0 <RCCEx_PLLSAI1_Config>
 800237c:	4603      	mov	r3, r0
 800237e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002380:	7cfb      	ldrb	r3, [r7, #19]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002386:	7cfb      	ldrb	r3, [r7, #19]
 8002388:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d02a      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023a4:	4907      	ldr	r1, [pc, #28]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023b4:	d108      	bne.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023b6:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	4a02      	ldr	r2, [pc, #8]	; (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023c0:	60d3      	str	r3, [r2, #12]
 80023c2:	e013      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x534>
 80023c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023d0:	d10c      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3304      	adds	r3, #4
 80023d6:	2101      	movs	r1, #1
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 f869 	bl	80024b0 <RCCEx_PLLSAI1_Config>
 80023de:	4603      	mov	r3, r0
 80023e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023e2:	7cfb      	ldrb	r3, [r7, #19]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80023e8:	7cfb      	ldrb	r3, [r7, #19]
 80023ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d02f      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023f8:	4b2c      	ldr	r3, [pc, #176]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002406:	4929      	ldr	r1, [pc, #164]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002412:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002416:	d10d      	bne.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3304      	adds	r3, #4
 800241c:	2102      	movs	r1, #2
 800241e:	4618      	mov	r0, r3
 8002420:	f000 f846 	bl	80024b0 <RCCEx_PLLSAI1_Config>
 8002424:	4603      	mov	r3, r0
 8002426:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002428:	7cfb      	ldrb	r3, [r7, #19]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d014      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800242e:	7cfb      	ldrb	r3, [r7, #19]
 8002430:	74bb      	strb	r3, [r7, #18]
 8002432:	e011      	b.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800243c:	d10c      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3320      	adds	r3, #32
 8002442:	2102      	movs	r1, #2
 8002444:	4618      	mov	r0, r3
 8002446:	f000 f925 	bl	8002694 <RCCEx_PLLSAI2_Config>
 800244a:	4603      	mov	r3, r0
 800244c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800244e:	7cfb      	ldrb	r3, [r7, #19]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002454:	7cfb      	ldrb	r3, [r7, #19]
 8002456:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00b      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002464:	4b11      	ldr	r3, [pc, #68]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002474:	490d      	ldr	r1, [pc, #52]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002476:	4313      	orrs	r3, r2
 8002478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00b      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002488:	4b08      	ldr	r3, [pc, #32]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002498:	4904      	ldr	r1, [pc, #16]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40021000 	.word	0x40021000

080024b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024be:	4b74      	ldr	r3, [pc, #464]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d018      	beq.n	80024fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024ca:	4b71      	ldr	r3, [pc, #452]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f003 0203 	and.w	r2, r3, #3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d10d      	bne.n	80024f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
       ||
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024e2:	4b6b      	ldr	r3, [pc, #428]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
       ||
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d047      	beq.n	8002586 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	73fb      	strb	r3, [r7, #15]
 80024fa:	e044      	b.n	8002586 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b03      	cmp	r3, #3
 8002502:	d018      	beq.n	8002536 <RCCEx_PLLSAI1_Config+0x86>
 8002504:	2b03      	cmp	r3, #3
 8002506:	d825      	bhi.n	8002554 <RCCEx_PLLSAI1_Config+0xa4>
 8002508:	2b01      	cmp	r3, #1
 800250a:	d002      	beq.n	8002512 <RCCEx_PLLSAI1_Config+0x62>
 800250c:	2b02      	cmp	r3, #2
 800250e:	d009      	beq.n	8002524 <RCCEx_PLLSAI1_Config+0x74>
 8002510:	e020      	b.n	8002554 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002512:	4b5f      	ldr	r3, [pc, #380]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d11d      	bne.n	800255a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002522:	e01a      	b.n	800255a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002524:	4b5a      	ldr	r3, [pc, #360]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252c:	2b00      	cmp	r3, #0
 800252e:	d116      	bne.n	800255e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002534:	e013      	b.n	800255e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002536:	4b56      	ldr	r3, [pc, #344]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10f      	bne.n	8002562 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002542:	4b53      	ldr	r3, [pc, #332]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d109      	bne.n	8002562 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002552:	e006      	b.n	8002562 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
      break;
 8002558:	e004      	b.n	8002564 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800255a:	bf00      	nop
 800255c:	e002      	b.n	8002564 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800255e:	bf00      	nop
 8002560:	e000      	b.n	8002564 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002562:	bf00      	nop
    }

    if(status == HAL_OK)
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10d      	bne.n	8002586 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800256a:	4b49      	ldr	r3, [pc, #292]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6819      	ldr	r1, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	3b01      	subs	r3, #1
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	430b      	orrs	r3, r1
 8002580:	4943      	ldr	r1, [pc, #268]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002582:	4313      	orrs	r3, r2
 8002584:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d17c      	bne.n	8002686 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800258c:	4b40      	ldr	r3, [pc, #256]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a3f      	ldr	r2, [pc, #252]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002592:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002596:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002598:	f7fe fb16 	bl	8000bc8 <HAL_GetTick>
 800259c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800259e:	e009      	b.n	80025b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025a0:	f7fe fb12 	bl	8000bc8 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d902      	bls.n	80025b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	73fb      	strb	r3, [r7, #15]
        break;
 80025b2:	e005      	b.n	80025c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025b4:	4b36      	ldr	r3, [pc, #216]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1ef      	bne.n	80025a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d15f      	bne.n	8002686 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d110      	bne.n	80025ee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025cc:	4b30      	ldr	r3, [pc, #192]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80025d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6892      	ldr	r2, [r2, #8]
 80025dc:	0211      	lsls	r1, r2, #8
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	68d2      	ldr	r2, [r2, #12]
 80025e2:	06d2      	lsls	r2, r2, #27
 80025e4:	430a      	orrs	r2, r1
 80025e6:	492a      	ldr	r1, [pc, #168]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	610b      	str	r3, [r1, #16]
 80025ec:	e027      	b.n	800263e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d112      	bne.n	800261a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025f4:	4b26      	ldr	r3, [pc, #152]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6892      	ldr	r2, [r2, #8]
 8002604:	0211      	lsls	r1, r2, #8
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6912      	ldr	r2, [r2, #16]
 800260a:	0852      	lsrs	r2, r2, #1
 800260c:	3a01      	subs	r2, #1
 800260e:	0552      	lsls	r2, r2, #21
 8002610:	430a      	orrs	r2, r1
 8002612:	491f      	ldr	r1, [pc, #124]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002614:	4313      	orrs	r3, r2
 8002616:	610b      	str	r3, [r1, #16]
 8002618:	e011      	b.n	800263e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800261a:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002622:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6892      	ldr	r2, [r2, #8]
 800262a:	0211      	lsls	r1, r2, #8
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6952      	ldr	r2, [r2, #20]
 8002630:	0852      	lsrs	r2, r2, #1
 8002632:	3a01      	subs	r2, #1
 8002634:	0652      	lsls	r2, r2, #25
 8002636:	430a      	orrs	r2, r1
 8002638:	4915      	ldr	r1, [pc, #84]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800263a:	4313      	orrs	r3, r2
 800263c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800263e:	4b14      	ldr	r3, [pc, #80]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a13      	ldr	r2, [pc, #76]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002644:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002648:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264a:	f7fe fabd 	bl	8000bc8 <HAL_GetTick>
 800264e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002650:	e009      	b.n	8002666 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002652:	f7fe fab9 	bl	8000bc8 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d902      	bls.n	8002666 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	73fb      	strb	r3, [r7, #15]
          break;
 8002664:	e005      	b.n	8002672 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002666:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0ef      	beq.n	8002652 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d106      	bne.n	8002686 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002678:	4b05      	ldr	r3, [pc, #20]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	4903      	ldr	r1, [pc, #12]	; (8002690 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002682:	4313      	orrs	r3, r2
 8002684:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002686:	7bfb      	ldrb	r3, [r7, #15]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40021000 	.word	0x40021000

08002694 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026a2:	4b69      	ldr	r3, [pc, #420]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d018      	beq.n	80026e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026ae:	4b66      	ldr	r3, [pc, #408]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f003 0203 	and.w	r2, r3, #3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d10d      	bne.n	80026da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
       ||
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d009      	beq.n	80026da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026c6:	4b60      	ldr	r3, [pc, #384]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	091b      	lsrs	r3, r3, #4
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
       ||
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d047      	beq.n	800276a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	73fb      	strb	r3, [r7, #15]
 80026de:	e044      	b.n	800276a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d018      	beq.n	800271a <RCCEx_PLLSAI2_Config+0x86>
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d825      	bhi.n	8002738 <RCCEx_PLLSAI2_Config+0xa4>
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d002      	beq.n	80026f6 <RCCEx_PLLSAI2_Config+0x62>
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d009      	beq.n	8002708 <RCCEx_PLLSAI2_Config+0x74>
 80026f4:	e020      	b.n	8002738 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026f6:	4b54      	ldr	r3, [pc, #336]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d11d      	bne.n	800273e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002706:	e01a      	b.n	800273e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002708:	4b4f      	ldr	r3, [pc, #316]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002710:	2b00      	cmp	r3, #0
 8002712:	d116      	bne.n	8002742 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002718:	e013      	b.n	8002742 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800271a:	4b4b      	ldr	r3, [pc, #300]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10f      	bne.n	8002746 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002726:	4b48      	ldr	r3, [pc, #288]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d109      	bne.n	8002746 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002736:	e006      	b.n	8002746 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
      break;
 800273c:	e004      	b.n	8002748 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800273e:	bf00      	nop
 8002740:	e002      	b.n	8002748 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002742:	bf00      	nop
 8002744:	e000      	b.n	8002748 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002746:	bf00      	nop
    }

    if(status == HAL_OK)
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10d      	bne.n	800276a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800274e:	4b3e      	ldr	r3, [pc, #248]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6819      	ldr	r1, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	3b01      	subs	r3, #1
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	430b      	orrs	r3, r1
 8002764:	4938      	ldr	r1, [pc, #224]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002766:	4313      	orrs	r3, r2
 8002768:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d166      	bne.n	800283e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002770:	4b35      	ldr	r3, [pc, #212]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a34      	ldr	r2, [pc, #208]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800277a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800277c:	f7fe fa24 	bl	8000bc8 <HAL_GetTick>
 8002780:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002782:	e009      	b.n	8002798 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002784:	f7fe fa20 	bl	8000bc8 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d902      	bls.n	8002798 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	73fb      	strb	r3, [r7, #15]
        break;
 8002796:	e005      	b.n	80027a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002798:	4b2b      	ldr	r3, [pc, #172]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1ef      	bne.n	8002784 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d149      	bne.n	800283e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d110      	bne.n	80027d2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027b0:	4b25      	ldr	r3, [pc, #148]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80027b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6892      	ldr	r2, [r2, #8]
 80027c0:	0211      	lsls	r1, r2, #8
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68d2      	ldr	r2, [r2, #12]
 80027c6:	06d2      	lsls	r2, r2, #27
 80027c8:	430a      	orrs	r2, r1
 80027ca:	491f      	ldr	r1, [pc, #124]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	614b      	str	r3, [r1, #20]
 80027d0:	e011      	b.n	80027f6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027d2:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6892      	ldr	r2, [r2, #8]
 80027e2:	0211      	lsls	r1, r2, #8
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6912      	ldr	r2, [r2, #16]
 80027e8:	0852      	lsrs	r2, r2, #1
 80027ea:	3a01      	subs	r2, #1
 80027ec:	0652      	lsls	r2, r2, #25
 80027ee:	430a      	orrs	r2, r1
 80027f0:	4915      	ldr	r1, [pc, #84]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027f6:	4b14      	ldr	r3, [pc, #80]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a13      	ldr	r2, [pc, #76]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002800:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002802:	f7fe f9e1 	bl	8000bc8 <HAL_GetTick>
 8002806:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002808:	e009      	b.n	800281e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800280a:	f7fe f9dd 	bl	8000bc8 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d902      	bls.n	800281e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	73fb      	strb	r3, [r7, #15]
          break;
 800281c:	e005      	b.n	800282a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800281e:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0ef      	beq.n	800280a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d106      	bne.n	800283e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002830:	4b05      	ldr	r3, [pc, #20]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002832:	695a      	ldr	r2, [r3, #20]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	4903      	ldr	r1, [pc, #12]	; (8002848 <RCCEx_PLLSAI2_Config+0x1b4>)
 800283a:	4313      	orrs	r3, r2
 800283c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800283e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e040      	b.n	80028e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002862:	2b00      	cmp	r3, #0
 8002864:	d106      	bne.n	8002874 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7fe f826 	bl	80008c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2224      	movs	r2, #36	; 0x24
 8002878:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0201 	bic.w	r2, r2, #1
 8002888:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f8c0 	bl	8002a10 <UART_SetConfig>
 8002890:	4603      	mov	r3, r0
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e022      	b.n	80028e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fb3e 	bl	8002f24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0201 	orr.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 fbc5 	bl	8003068 <UART_CheckIdleState>
 80028de:	4603      	mov	r3, r0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08a      	sub	sp, #40	; 0x28
 80028ec:	af02      	add	r7, sp, #8
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	603b      	str	r3, [r7, #0]
 80028f4:	4613      	mov	r3, r2
 80028f6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028fc:	2b20      	cmp	r3, #32
 80028fe:	f040 8082 	bne.w	8002a06 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <HAL_UART_Transmit+0x26>
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e07a      	b.n	8002a08 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_UART_Transmit+0x38>
 800291c:	2302      	movs	r3, #2
 800291e:	e073      	b.n	8002a08 <HAL_UART_Transmit+0x120>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2221      	movs	r2, #33	; 0x21
 8002934:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002936:	f7fe f947 	bl	8000bc8 <HAL_GetTick>
 800293a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	88fa      	ldrh	r2, [r7, #6]
 8002940:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	88fa      	ldrh	r2, [r7, #6]
 8002948:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002954:	d108      	bne.n	8002968 <HAL_UART_Transmit+0x80>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d104      	bne.n	8002968 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	61bb      	str	r3, [r7, #24]
 8002966:	e003      	b.n	8002970 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800296c:	2300      	movs	r3, #0
 800296e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002978:	e02d      	b.n	80029d6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2200      	movs	r2, #0
 8002982:	2180      	movs	r1, #128	; 0x80
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 fbb8 	bl	80030fa <UART_WaitOnFlagUntilTimeout>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e039      	b.n	8002a08 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10b      	bne.n	80029b2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	881a      	ldrh	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029a6:	b292      	uxth	r2, r2
 80029a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	3302      	adds	r3, #2
 80029ae:	61bb      	str	r3, [r7, #24]
 80029b0:	e008      	b.n	80029c4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	781a      	ldrb	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	b292      	uxth	r2, r2
 80029bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	3301      	adds	r3, #1
 80029c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029dc:	b29b      	uxth	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1cb      	bne.n	800297a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2200      	movs	r2, #0
 80029ea:	2140      	movs	r1, #64	; 0x40
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 fb84 	bl	80030fa <UART_WaitOnFlagUntilTimeout>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e005      	b.n	8002a08 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2220      	movs	r2, #32
 8002a00:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	e000      	b.n	8002a08 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002a06:	2302      	movs	r3, #2
  }
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3720      	adds	r7, #32
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a10:	b5b0      	push	{r4, r5, r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4bad      	ldr	r3, [pc, #692]	; (8002cf0 <UART_SetConfig+0x2e0>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	69f9      	ldr	r1, [r7, #28]
 8002a44:	430b      	orrs	r3, r1
 8002a46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4aa2      	ldr	r2, [pc, #648]	; (8002cf4 <UART_SetConfig+0x2e4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d004      	beq.n	8002a78 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	69fa      	ldr	r2, [r7, #28]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	69fa      	ldr	r2, [r7, #28]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a99      	ldr	r2, [pc, #612]	; (8002cf8 <UART_SetConfig+0x2e8>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d121      	bne.n	8002ada <UART_SetConfig+0xca>
 8002a96:	4b99      	ldr	r3, [pc, #612]	; (8002cfc <UART_SetConfig+0x2ec>)
 8002a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d817      	bhi.n	8002ad4 <UART_SetConfig+0xc4>
 8002aa4:	a201      	add	r2, pc, #4	; (adr r2, 8002aac <UART_SetConfig+0x9c>)
 8002aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aaa:	bf00      	nop
 8002aac:	08002abd 	.word	0x08002abd
 8002ab0:	08002ac9 	.word	0x08002ac9
 8002ab4:	08002ac3 	.word	0x08002ac3
 8002ab8:	08002acf 	.word	0x08002acf
 8002abc:	2301      	movs	r3, #1
 8002abe:	76fb      	strb	r3, [r7, #27]
 8002ac0:	e0e7      	b.n	8002c92 <UART_SetConfig+0x282>
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	76fb      	strb	r3, [r7, #27]
 8002ac6:	e0e4      	b.n	8002c92 <UART_SetConfig+0x282>
 8002ac8:	2304      	movs	r3, #4
 8002aca:	76fb      	strb	r3, [r7, #27]
 8002acc:	e0e1      	b.n	8002c92 <UART_SetConfig+0x282>
 8002ace:	2308      	movs	r3, #8
 8002ad0:	76fb      	strb	r3, [r7, #27]
 8002ad2:	e0de      	b.n	8002c92 <UART_SetConfig+0x282>
 8002ad4:	2310      	movs	r3, #16
 8002ad6:	76fb      	strb	r3, [r7, #27]
 8002ad8:	e0db      	b.n	8002c92 <UART_SetConfig+0x282>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a88      	ldr	r2, [pc, #544]	; (8002d00 <UART_SetConfig+0x2f0>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d132      	bne.n	8002b4a <UART_SetConfig+0x13a>
 8002ae4:	4b85      	ldr	r3, [pc, #532]	; (8002cfc <UART_SetConfig+0x2ec>)
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aea:	f003 030c 	and.w	r3, r3, #12
 8002aee:	2b0c      	cmp	r3, #12
 8002af0:	d828      	bhi.n	8002b44 <UART_SetConfig+0x134>
 8002af2:	a201      	add	r2, pc, #4	; (adr r2, 8002af8 <UART_SetConfig+0xe8>)
 8002af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af8:	08002b2d 	.word	0x08002b2d
 8002afc:	08002b45 	.word	0x08002b45
 8002b00:	08002b45 	.word	0x08002b45
 8002b04:	08002b45 	.word	0x08002b45
 8002b08:	08002b39 	.word	0x08002b39
 8002b0c:	08002b45 	.word	0x08002b45
 8002b10:	08002b45 	.word	0x08002b45
 8002b14:	08002b45 	.word	0x08002b45
 8002b18:	08002b33 	.word	0x08002b33
 8002b1c:	08002b45 	.word	0x08002b45
 8002b20:	08002b45 	.word	0x08002b45
 8002b24:	08002b45 	.word	0x08002b45
 8002b28:	08002b3f 	.word	0x08002b3f
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	76fb      	strb	r3, [r7, #27]
 8002b30:	e0af      	b.n	8002c92 <UART_SetConfig+0x282>
 8002b32:	2302      	movs	r3, #2
 8002b34:	76fb      	strb	r3, [r7, #27]
 8002b36:	e0ac      	b.n	8002c92 <UART_SetConfig+0x282>
 8002b38:	2304      	movs	r3, #4
 8002b3a:	76fb      	strb	r3, [r7, #27]
 8002b3c:	e0a9      	b.n	8002c92 <UART_SetConfig+0x282>
 8002b3e:	2308      	movs	r3, #8
 8002b40:	76fb      	strb	r3, [r7, #27]
 8002b42:	e0a6      	b.n	8002c92 <UART_SetConfig+0x282>
 8002b44:	2310      	movs	r3, #16
 8002b46:	76fb      	strb	r3, [r7, #27]
 8002b48:	e0a3      	b.n	8002c92 <UART_SetConfig+0x282>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a6d      	ldr	r2, [pc, #436]	; (8002d04 <UART_SetConfig+0x2f4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d120      	bne.n	8002b96 <UART_SetConfig+0x186>
 8002b54:	4b69      	ldr	r3, [pc, #420]	; (8002cfc <UART_SetConfig+0x2ec>)
 8002b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002b5e:	2b30      	cmp	r3, #48	; 0x30
 8002b60:	d013      	beq.n	8002b8a <UART_SetConfig+0x17a>
 8002b62:	2b30      	cmp	r3, #48	; 0x30
 8002b64:	d814      	bhi.n	8002b90 <UART_SetConfig+0x180>
 8002b66:	2b20      	cmp	r3, #32
 8002b68:	d009      	beq.n	8002b7e <UART_SetConfig+0x16e>
 8002b6a:	2b20      	cmp	r3, #32
 8002b6c:	d810      	bhi.n	8002b90 <UART_SetConfig+0x180>
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <UART_SetConfig+0x168>
 8002b72:	2b10      	cmp	r3, #16
 8002b74:	d006      	beq.n	8002b84 <UART_SetConfig+0x174>
 8002b76:	e00b      	b.n	8002b90 <UART_SetConfig+0x180>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	76fb      	strb	r3, [r7, #27]
 8002b7c:	e089      	b.n	8002c92 <UART_SetConfig+0x282>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	76fb      	strb	r3, [r7, #27]
 8002b82:	e086      	b.n	8002c92 <UART_SetConfig+0x282>
 8002b84:	2304      	movs	r3, #4
 8002b86:	76fb      	strb	r3, [r7, #27]
 8002b88:	e083      	b.n	8002c92 <UART_SetConfig+0x282>
 8002b8a:	2308      	movs	r3, #8
 8002b8c:	76fb      	strb	r3, [r7, #27]
 8002b8e:	e080      	b.n	8002c92 <UART_SetConfig+0x282>
 8002b90:	2310      	movs	r3, #16
 8002b92:	76fb      	strb	r3, [r7, #27]
 8002b94:	e07d      	b.n	8002c92 <UART_SetConfig+0x282>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a5b      	ldr	r2, [pc, #364]	; (8002d08 <UART_SetConfig+0x2f8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d120      	bne.n	8002be2 <UART_SetConfig+0x1d2>
 8002ba0:	4b56      	ldr	r3, [pc, #344]	; (8002cfc <UART_SetConfig+0x2ec>)
 8002ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002baa:	2bc0      	cmp	r3, #192	; 0xc0
 8002bac:	d013      	beq.n	8002bd6 <UART_SetConfig+0x1c6>
 8002bae:	2bc0      	cmp	r3, #192	; 0xc0
 8002bb0:	d814      	bhi.n	8002bdc <UART_SetConfig+0x1cc>
 8002bb2:	2b80      	cmp	r3, #128	; 0x80
 8002bb4:	d009      	beq.n	8002bca <UART_SetConfig+0x1ba>
 8002bb6:	2b80      	cmp	r3, #128	; 0x80
 8002bb8:	d810      	bhi.n	8002bdc <UART_SetConfig+0x1cc>
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <UART_SetConfig+0x1b4>
 8002bbe:	2b40      	cmp	r3, #64	; 0x40
 8002bc0:	d006      	beq.n	8002bd0 <UART_SetConfig+0x1c0>
 8002bc2:	e00b      	b.n	8002bdc <UART_SetConfig+0x1cc>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	76fb      	strb	r3, [r7, #27]
 8002bc8:	e063      	b.n	8002c92 <UART_SetConfig+0x282>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	76fb      	strb	r3, [r7, #27]
 8002bce:	e060      	b.n	8002c92 <UART_SetConfig+0x282>
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	76fb      	strb	r3, [r7, #27]
 8002bd4:	e05d      	b.n	8002c92 <UART_SetConfig+0x282>
 8002bd6:	2308      	movs	r3, #8
 8002bd8:	76fb      	strb	r3, [r7, #27]
 8002bda:	e05a      	b.n	8002c92 <UART_SetConfig+0x282>
 8002bdc:	2310      	movs	r3, #16
 8002bde:	76fb      	strb	r3, [r7, #27]
 8002be0:	e057      	b.n	8002c92 <UART_SetConfig+0x282>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a49      	ldr	r2, [pc, #292]	; (8002d0c <UART_SetConfig+0x2fc>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d125      	bne.n	8002c38 <UART_SetConfig+0x228>
 8002bec:	4b43      	ldr	r3, [pc, #268]	; (8002cfc <UART_SetConfig+0x2ec>)
 8002bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bfa:	d017      	beq.n	8002c2c <UART_SetConfig+0x21c>
 8002bfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c00:	d817      	bhi.n	8002c32 <UART_SetConfig+0x222>
 8002c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c06:	d00b      	beq.n	8002c20 <UART_SetConfig+0x210>
 8002c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c0c:	d811      	bhi.n	8002c32 <UART_SetConfig+0x222>
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <UART_SetConfig+0x20a>
 8002c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c16:	d006      	beq.n	8002c26 <UART_SetConfig+0x216>
 8002c18:	e00b      	b.n	8002c32 <UART_SetConfig+0x222>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	76fb      	strb	r3, [r7, #27]
 8002c1e:	e038      	b.n	8002c92 <UART_SetConfig+0x282>
 8002c20:	2302      	movs	r3, #2
 8002c22:	76fb      	strb	r3, [r7, #27]
 8002c24:	e035      	b.n	8002c92 <UART_SetConfig+0x282>
 8002c26:	2304      	movs	r3, #4
 8002c28:	76fb      	strb	r3, [r7, #27]
 8002c2a:	e032      	b.n	8002c92 <UART_SetConfig+0x282>
 8002c2c:	2308      	movs	r3, #8
 8002c2e:	76fb      	strb	r3, [r7, #27]
 8002c30:	e02f      	b.n	8002c92 <UART_SetConfig+0x282>
 8002c32:	2310      	movs	r3, #16
 8002c34:	76fb      	strb	r3, [r7, #27]
 8002c36:	e02c      	b.n	8002c92 <UART_SetConfig+0x282>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a2d      	ldr	r2, [pc, #180]	; (8002cf4 <UART_SetConfig+0x2e4>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d125      	bne.n	8002c8e <UART_SetConfig+0x27e>
 8002c42:	4b2e      	ldr	r3, [pc, #184]	; (8002cfc <UART_SetConfig+0x2ec>)
 8002c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c50:	d017      	beq.n	8002c82 <UART_SetConfig+0x272>
 8002c52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c56:	d817      	bhi.n	8002c88 <UART_SetConfig+0x278>
 8002c58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c5c:	d00b      	beq.n	8002c76 <UART_SetConfig+0x266>
 8002c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c62:	d811      	bhi.n	8002c88 <UART_SetConfig+0x278>
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <UART_SetConfig+0x260>
 8002c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c6c:	d006      	beq.n	8002c7c <UART_SetConfig+0x26c>
 8002c6e:	e00b      	b.n	8002c88 <UART_SetConfig+0x278>
 8002c70:	2300      	movs	r3, #0
 8002c72:	76fb      	strb	r3, [r7, #27]
 8002c74:	e00d      	b.n	8002c92 <UART_SetConfig+0x282>
 8002c76:	2302      	movs	r3, #2
 8002c78:	76fb      	strb	r3, [r7, #27]
 8002c7a:	e00a      	b.n	8002c92 <UART_SetConfig+0x282>
 8002c7c:	2304      	movs	r3, #4
 8002c7e:	76fb      	strb	r3, [r7, #27]
 8002c80:	e007      	b.n	8002c92 <UART_SetConfig+0x282>
 8002c82:	2308      	movs	r3, #8
 8002c84:	76fb      	strb	r3, [r7, #27]
 8002c86:	e004      	b.n	8002c92 <UART_SetConfig+0x282>
 8002c88:	2310      	movs	r3, #16
 8002c8a:	76fb      	strb	r3, [r7, #27]
 8002c8c:	e001      	b.n	8002c92 <UART_SetConfig+0x282>
 8002c8e:	2310      	movs	r3, #16
 8002c90:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a17      	ldr	r2, [pc, #92]	; (8002cf4 <UART_SetConfig+0x2e4>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	f040 8087 	bne.w	8002dac <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c9e:	7efb      	ldrb	r3, [r7, #27]
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d837      	bhi.n	8002d14 <UART_SetConfig+0x304>
 8002ca4:	a201      	add	r2, pc, #4	; (adr r2, 8002cac <UART_SetConfig+0x29c>)
 8002ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002caa:	bf00      	nop
 8002cac:	08002cd1 	.word	0x08002cd1
 8002cb0:	08002d15 	.word	0x08002d15
 8002cb4:	08002cd9 	.word	0x08002cd9
 8002cb8:	08002d15 	.word	0x08002d15
 8002cbc:	08002cdf 	.word	0x08002cdf
 8002cc0:	08002d15 	.word	0x08002d15
 8002cc4:	08002d15 	.word	0x08002d15
 8002cc8:	08002d15 	.word	0x08002d15
 8002ccc:	08002ce7 	.word	0x08002ce7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cd0:	f7ff f866 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8002cd4:	6178      	str	r0, [r7, #20]
        break;
 8002cd6:	e022      	b.n	8002d1e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cd8:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <UART_SetConfig+0x300>)
 8002cda:	617b      	str	r3, [r7, #20]
        break;
 8002cdc:	e01f      	b.n	8002d1e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cde:	f7fe ffc7 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8002ce2:	6178      	str	r0, [r7, #20]
        break;
 8002ce4:	e01b      	b.n	8002d1e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cea:	617b      	str	r3, [r7, #20]
        break;
 8002cec:	e017      	b.n	8002d1e <UART_SetConfig+0x30e>
 8002cee:	bf00      	nop
 8002cf0:	efff69f3 	.word	0xefff69f3
 8002cf4:	40008000 	.word	0x40008000
 8002cf8:	40013800 	.word	0x40013800
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40004400 	.word	0x40004400
 8002d04:	40004800 	.word	0x40004800
 8002d08:	40004c00 	.word	0x40004c00
 8002d0c:	40005000 	.word	0x40005000
 8002d10:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	76bb      	strb	r3, [r7, #26]
        break;
 8002d1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80f1 	beq.w	8002f08 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	4413      	add	r3, r2
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d305      	bcc.n	8002d42 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d902      	bls.n	8002d48 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	76bb      	strb	r3, [r7, #26]
 8002d46:	e0df      	b.n	8002f08 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f04f 0100 	mov.w	r1, #0
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	f04f 0300 	mov.w	r3, #0
 8002d58:	020b      	lsls	r3, r1, #8
 8002d5a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002d5e:	0202      	lsls	r2, r0, #8
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	6849      	ldr	r1, [r1, #4]
 8002d64:	0849      	lsrs	r1, r1, #1
 8002d66:	4608      	mov	r0, r1
 8002d68:	f04f 0100 	mov.w	r1, #0
 8002d6c:	1814      	adds	r4, r2, r0
 8002d6e:	eb43 0501 	adc.w	r5, r3, r1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	461a      	mov	r2, r3
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	4629      	mov	r1, r5
 8002d80:	f7fd fa8e 	bl	80002a0 <__aeabi_uldivmod>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4613      	mov	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d92:	d308      	bcc.n	8002da6 <UART_SetConfig+0x396>
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d9a:	d204      	bcs.n	8002da6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	60da      	str	r2, [r3, #12]
 8002da4:	e0b0      	b.n	8002f08 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	76bb      	strb	r3, [r7, #26]
 8002daa:	e0ad      	b.n	8002f08 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002db4:	d15c      	bne.n	8002e70 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8002db6:	7efb      	ldrb	r3, [r7, #27]
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d828      	bhi.n	8002e0e <UART_SetConfig+0x3fe>
 8002dbc:	a201      	add	r2, pc, #4	; (adr r2, 8002dc4 <UART_SetConfig+0x3b4>)
 8002dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc2:	bf00      	nop
 8002dc4:	08002de9 	.word	0x08002de9
 8002dc8:	08002df1 	.word	0x08002df1
 8002dcc:	08002df9 	.word	0x08002df9
 8002dd0:	08002e0f 	.word	0x08002e0f
 8002dd4:	08002dff 	.word	0x08002dff
 8002dd8:	08002e0f 	.word	0x08002e0f
 8002ddc:	08002e0f 	.word	0x08002e0f
 8002de0:	08002e0f 	.word	0x08002e0f
 8002de4:	08002e07 	.word	0x08002e07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002de8:	f7fe ffda 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8002dec:	6178      	str	r0, [r7, #20]
        break;
 8002dee:	e013      	b.n	8002e18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002df0:	f7fe ffec 	bl	8001dcc <HAL_RCC_GetPCLK2Freq>
 8002df4:	6178      	str	r0, [r7, #20]
        break;
 8002df6:	e00f      	b.n	8002e18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002df8:	4b49      	ldr	r3, [pc, #292]	; (8002f20 <UART_SetConfig+0x510>)
 8002dfa:	617b      	str	r3, [r7, #20]
        break;
 8002dfc:	e00c      	b.n	8002e18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dfe:	f7fe ff37 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8002e02:	6178      	str	r0, [r7, #20]
        break;
 8002e04:	e008      	b.n	8002e18 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e0a:	617b      	str	r3, [r7, #20]
        break;
 8002e0c:	e004      	b.n	8002e18 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	76bb      	strb	r3, [r7, #26]
        break;
 8002e16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d074      	beq.n	8002f08 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	005a      	lsls	r2, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	085b      	lsrs	r3, r3, #1
 8002e28:	441a      	add	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	2b0f      	cmp	r3, #15
 8002e3a:	d916      	bls.n	8002e6a <UART_SetConfig+0x45a>
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e42:	d212      	bcs.n	8002e6a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	f023 030f 	bic.w	r3, r3, #15
 8002e4c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	085b      	lsrs	r3, r3, #1
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	89fb      	ldrh	r3, [r7, #14]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	89fa      	ldrh	r2, [r7, #14]
 8002e66:	60da      	str	r2, [r3, #12]
 8002e68:	e04e      	b.n	8002f08 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	76bb      	strb	r3, [r7, #26]
 8002e6e:	e04b      	b.n	8002f08 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e70:	7efb      	ldrb	r3, [r7, #27]
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d827      	bhi.n	8002ec6 <UART_SetConfig+0x4b6>
 8002e76:	a201      	add	r2, pc, #4	; (adr r2, 8002e7c <UART_SetConfig+0x46c>)
 8002e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7c:	08002ea1 	.word	0x08002ea1
 8002e80:	08002ea9 	.word	0x08002ea9
 8002e84:	08002eb1 	.word	0x08002eb1
 8002e88:	08002ec7 	.word	0x08002ec7
 8002e8c:	08002eb7 	.word	0x08002eb7
 8002e90:	08002ec7 	.word	0x08002ec7
 8002e94:	08002ec7 	.word	0x08002ec7
 8002e98:	08002ec7 	.word	0x08002ec7
 8002e9c:	08002ebf 	.word	0x08002ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ea0:	f7fe ff7e 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8002ea4:	6178      	str	r0, [r7, #20]
        break;
 8002ea6:	e013      	b.n	8002ed0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ea8:	f7fe ff90 	bl	8001dcc <HAL_RCC_GetPCLK2Freq>
 8002eac:	6178      	str	r0, [r7, #20]
        break;
 8002eae:	e00f      	b.n	8002ed0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <UART_SetConfig+0x510>)
 8002eb2:	617b      	str	r3, [r7, #20]
        break;
 8002eb4:	e00c      	b.n	8002ed0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eb6:	f7fe fedb 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8002eba:	6178      	str	r0, [r7, #20]
        break;
 8002ebc:	e008      	b.n	8002ed0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ec2:	617b      	str	r3, [r7, #20]
        break;
 8002ec4:	e004      	b.n	8002ed0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	76bb      	strb	r3, [r7, #26]
        break;
 8002ece:	bf00      	nop
    }

    if (pclk != 0U)
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d018      	beq.n	8002f08 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	085a      	lsrs	r2, r3, #1
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	441a      	add	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	2b0f      	cmp	r3, #15
 8002ef0:	d908      	bls.n	8002f04 <UART_SetConfig+0x4f4>
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef8:	d204      	bcs.n	8002f04 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	60da      	str	r2, [r3, #12]
 8002f02:	e001      	b.n	8002f08 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f14:	7ebb      	ldrb	r3, [r7, #26]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3720      	adds	r7, #32
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	00f42400 	.word	0x00f42400

08002f24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00a      	beq.n	8002f4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00a      	beq.n	8002f92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00a      	beq.n	8002fd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	f003 0320 	and.w	r3, r3, #32
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003000:	2b00      	cmp	r3, #0
 8003002:	d01a      	beq.n	800303a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003022:	d10a      	bne.n	800303a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00a      	beq.n	800305c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	605a      	str	r2, [r3, #4]
  }
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af02      	add	r7, sp, #8
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003078:	f7fd fda6 	bl	8000bc8 <HAL_GetTick>
 800307c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b08      	cmp	r3, #8
 800308a:	d10e      	bne.n	80030aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800308c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f82d 	bl	80030fa <UART_WaitOnFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e023      	b.n	80030f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d10e      	bne.n	80030d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f817 	bl	80030fa <UART_WaitOnFlagUntilTimeout>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e00d      	b.n	80030f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2220      	movs	r2, #32
 80030da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2220      	movs	r2, #32
 80030e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	603b      	str	r3, [r7, #0]
 8003106:	4613      	mov	r3, r2
 8003108:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800310a:	e05e      	b.n	80031ca <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003112:	d05a      	beq.n	80031ca <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003114:	f7fd fd58 	bl	8000bc8 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	429a      	cmp	r2, r3
 8003122:	d302      	bcc.n	800312a <UART_WaitOnFlagUntilTimeout+0x30>
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d11b      	bne.n	8003162 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003138:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0201 	bic.w	r2, r2, #1
 8003148:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2220      	movs	r2, #32
 800314e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e043      	b.n	80031ea <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d02c      	beq.n	80031ca <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800317a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800317e:	d124      	bne.n	80031ca <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003188:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003198:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0201 	bic.w	r2, r2, #1
 80031a8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2220      	movs	r2, #32
 80031b4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e00f      	b.n	80031ea <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69da      	ldr	r2, [r3, #28]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	4013      	ands	r3, r2
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	bf0c      	ite	eq
 80031da:	2301      	moveq	r3, #1
 80031dc:	2300      	movne	r3, #0
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	461a      	mov	r2, r3
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d091      	beq.n	800310c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <__errno>:
 80031f4:	4b01      	ldr	r3, [pc, #4]	; (80031fc <__errno+0x8>)
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	2000000c 	.word	0x2000000c

08003200 <__libc_init_array>:
 8003200:	b570      	push	{r4, r5, r6, lr}
 8003202:	4d0d      	ldr	r5, [pc, #52]	; (8003238 <__libc_init_array+0x38>)
 8003204:	4c0d      	ldr	r4, [pc, #52]	; (800323c <__libc_init_array+0x3c>)
 8003206:	1b64      	subs	r4, r4, r5
 8003208:	10a4      	asrs	r4, r4, #2
 800320a:	2600      	movs	r6, #0
 800320c:	42a6      	cmp	r6, r4
 800320e:	d109      	bne.n	8003224 <__libc_init_array+0x24>
 8003210:	4d0b      	ldr	r5, [pc, #44]	; (8003240 <__libc_init_array+0x40>)
 8003212:	4c0c      	ldr	r4, [pc, #48]	; (8003244 <__libc_init_array+0x44>)
 8003214:	f000 fc4e 	bl	8003ab4 <_init>
 8003218:	1b64      	subs	r4, r4, r5
 800321a:	10a4      	asrs	r4, r4, #2
 800321c:	2600      	movs	r6, #0
 800321e:	42a6      	cmp	r6, r4
 8003220:	d105      	bne.n	800322e <__libc_init_array+0x2e>
 8003222:	bd70      	pop	{r4, r5, r6, pc}
 8003224:	f855 3b04 	ldr.w	r3, [r5], #4
 8003228:	4798      	blx	r3
 800322a:	3601      	adds	r6, #1
 800322c:	e7ee      	b.n	800320c <__libc_init_array+0xc>
 800322e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003232:	4798      	blx	r3
 8003234:	3601      	adds	r6, #1
 8003236:	e7f2      	b.n	800321e <__libc_init_array+0x1e>
 8003238:	08003b6c 	.word	0x08003b6c
 800323c:	08003b6c 	.word	0x08003b6c
 8003240:	08003b6c 	.word	0x08003b6c
 8003244:	08003b70 	.word	0x08003b70

08003248 <memset>:
 8003248:	4402      	add	r2, r0
 800324a:	4603      	mov	r3, r0
 800324c:	4293      	cmp	r3, r2
 800324e:	d100      	bne.n	8003252 <memset+0xa>
 8003250:	4770      	bx	lr
 8003252:	f803 1b01 	strb.w	r1, [r3], #1
 8003256:	e7f9      	b.n	800324c <memset+0x4>

08003258 <siprintf>:
 8003258:	b40e      	push	{r1, r2, r3}
 800325a:	b500      	push	{lr}
 800325c:	b09c      	sub	sp, #112	; 0x70
 800325e:	ab1d      	add	r3, sp, #116	; 0x74
 8003260:	9002      	str	r0, [sp, #8]
 8003262:	9006      	str	r0, [sp, #24]
 8003264:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003268:	4809      	ldr	r0, [pc, #36]	; (8003290 <siprintf+0x38>)
 800326a:	9107      	str	r1, [sp, #28]
 800326c:	9104      	str	r1, [sp, #16]
 800326e:	4909      	ldr	r1, [pc, #36]	; (8003294 <siprintf+0x3c>)
 8003270:	f853 2b04 	ldr.w	r2, [r3], #4
 8003274:	9105      	str	r1, [sp, #20]
 8003276:	6800      	ldr	r0, [r0, #0]
 8003278:	9301      	str	r3, [sp, #4]
 800327a:	a902      	add	r1, sp, #8
 800327c:	f000 f868 	bl	8003350 <_svfiprintf_r>
 8003280:	9b02      	ldr	r3, [sp, #8]
 8003282:	2200      	movs	r2, #0
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	b01c      	add	sp, #112	; 0x70
 8003288:	f85d eb04 	ldr.w	lr, [sp], #4
 800328c:	b003      	add	sp, #12
 800328e:	4770      	bx	lr
 8003290:	2000000c 	.word	0x2000000c
 8003294:	ffff0208 	.word	0xffff0208

08003298 <__ssputs_r>:
 8003298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800329c:	688e      	ldr	r6, [r1, #8]
 800329e:	429e      	cmp	r6, r3
 80032a0:	4682      	mov	sl, r0
 80032a2:	460c      	mov	r4, r1
 80032a4:	4690      	mov	r8, r2
 80032a6:	461f      	mov	r7, r3
 80032a8:	d838      	bhi.n	800331c <__ssputs_r+0x84>
 80032aa:	898a      	ldrh	r2, [r1, #12]
 80032ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032b0:	d032      	beq.n	8003318 <__ssputs_r+0x80>
 80032b2:	6825      	ldr	r5, [r4, #0]
 80032b4:	6909      	ldr	r1, [r1, #16]
 80032b6:	eba5 0901 	sub.w	r9, r5, r1
 80032ba:	6965      	ldr	r5, [r4, #20]
 80032bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032c4:	3301      	adds	r3, #1
 80032c6:	444b      	add	r3, r9
 80032c8:	106d      	asrs	r5, r5, #1
 80032ca:	429d      	cmp	r5, r3
 80032cc:	bf38      	it	cc
 80032ce:	461d      	movcc	r5, r3
 80032d0:	0553      	lsls	r3, r2, #21
 80032d2:	d531      	bpl.n	8003338 <__ssputs_r+0xa0>
 80032d4:	4629      	mov	r1, r5
 80032d6:	f000 fb47 	bl	8003968 <_malloc_r>
 80032da:	4606      	mov	r6, r0
 80032dc:	b950      	cbnz	r0, 80032f4 <__ssputs_r+0x5c>
 80032de:	230c      	movs	r3, #12
 80032e0:	f8ca 3000 	str.w	r3, [sl]
 80032e4:	89a3      	ldrh	r3, [r4, #12]
 80032e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ea:	81a3      	strh	r3, [r4, #12]
 80032ec:	f04f 30ff 	mov.w	r0, #4294967295
 80032f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032f4:	6921      	ldr	r1, [r4, #16]
 80032f6:	464a      	mov	r2, r9
 80032f8:	f000 fabe 	bl	8003878 <memcpy>
 80032fc:	89a3      	ldrh	r3, [r4, #12]
 80032fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003306:	81a3      	strh	r3, [r4, #12]
 8003308:	6126      	str	r6, [r4, #16]
 800330a:	6165      	str	r5, [r4, #20]
 800330c:	444e      	add	r6, r9
 800330e:	eba5 0509 	sub.w	r5, r5, r9
 8003312:	6026      	str	r6, [r4, #0]
 8003314:	60a5      	str	r5, [r4, #8]
 8003316:	463e      	mov	r6, r7
 8003318:	42be      	cmp	r6, r7
 800331a:	d900      	bls.n	800331e <__ssputs_r+0x86>
 800331c:	463e      	mov	r6, r7
 800331e:	4632      	mov	r2, r6
 8003320:	6820      	ldr	r0, [r4, #0]
 8003322:	4641      	mov	r1, r8
 8003324:	f000 fab6 	bl	8003894 <memmove>
 8003328:	68a3      	ldr	r3, [r4, #8]
 800332a:	6822      	ldr	r2, [r4, #0]
 800332c:	1b9b      	subs	r3, r3, r6
 800332e:	4432      	add	r2, r6
 8003330:	60a3      	str	r3, [r4, #8]
 8003332:	6022      	str	r2, [r4, #0]
 8003334:	2000      	movs	r0, #0
 8003336:	e7db      	b.n	80032f0 <__ssputs_r+0x58>
 8003338:	462a      	mov	r2, r5
 800333a:	f000 fb6f 	bl	8003a1c <_realloc_r>
 800333e:	4606      	mov	r6, r0
 8003340:	2800      	cmp	r0, #0
 8003342:	d1e1      	bne.n	8003308 <__ssputs_r+0x70>
 8003344:	6921      	ldr	r1, [r4, #16]
 8003346:	4650      	mov	r0, sl
 8003348:	f000 fabe 	bl	80038c8 <_free_r>
 800334c:	e7c7      	b.n	80032de <__ssputs_r+0x46>
	...

08003350 <_svfiprintf_r>:
 8003350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003354:	4698      	mov	r8, r3
 8003356:	898b      	ldrh	r3, [r1, #12]
 8003358:	061b      	lsls	r3, r3, #24
 800335a:	b09d      	sub	sp, #116	; 0x74
 800335c:	4607      	mov	r7, r0
 800335e:	460d      	mov	r5, r1
 8003360:	4614      	mov	r4, r2
 8003362:	d50e      	bpl.n	8003382 <_svfiprintf_r+0x32>
 8003364:	690b      	ldr	r3, [r1, #16]
 8003366:	b963      	cbnz	r3, 8003382 <_svfiprintf_r+0x32>
 8003368:	2140      	movs	r1, #64	; 0x40
 800336a:	f000 fafd 	bl	8003968 <_malloc_r>
 800336e:	6028      	str	r0, [r5, #0]
 8003370:	6128      	str	r0, [r5, #16]
 8003372:	b920      	cbnz	r0, 800337e <_svfiprintf_r+0x2e>
 8003374:	230c      	movs	r3, #12
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	f04f 30ff 	mov.w	r0, #4294967295
 800337c:	e0d1      	b.n	8003522 <_svfiprintf_r+0x1d2>
 800337e:	2340      	movs	r3, #64	; 0x40
 8003380:	616b      	str	r3, [r5, #20]
 8003382:	2300      	movs	r3, #0
 8003384:	9309      	str	r3, [sp, #36]	; 0x24
 8003386:	2320      	movs	r3, #32
 8003388:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800338c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003390:	2330      	movs	r3, #48	; 0x30
 8003392:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800353c <_svfiprintf_r+0x1ec>
 8003396:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800339a:	f04f 0901 	mov.w	r9, #1
 800339e:	4623      	mov	r3, r4
 80033a0:	469a      	mov	sl, r3
 80033a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033a6:	b10a      	cbz	r2, 80033ac <_svfiprintf_r+0x5c>
 80033a8:	2a25      	cmp	r2, #37	; 0x25
 80033aa:	d1f9      	bne.n	80033a0 <_svfiprintf_r+0x50>
 80033ac:	ebba 0b04 	subs.w	fp, sl, r4
 80033b0:	d00b      	beq.n	80033ca <_svfiprintf_r+0x7a>
 80033b2:	465b      	mov	r3, fp
 80033b4:	4622      	mov	r2, r4
 80033b6:	4629      	mov	r1, r5
 80033b8:	4638      	mov	r0, r7
 80033ba:	f7ff ff6d 	bl	8003298 <__ssputs_r>
 80033be:	3001      	adds	r0, #1
 80033c0:	f000 80aa 	beq.w	8003518 <_svfiprintf_r+0x1c8>
 80033c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033c6:	445a      	add	r2, fp
 80033c8:	9209      	str	r2, [sp, #36]	; 0x24
 80033ca:	f89a 3000 	ldrb.w	r3, [sl]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 80a2 	beq.w	8003518 <_svfiprintf_r+0x1c8>
 80033d4:	2300      	movs	r3, #0
 80033d6:	f04f 32ff 	mov.w	r2, #4294967295
 80033da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033de:	f10a 0a01 	add.w	sl, sl, #1
 80033e2:	9304      	str	r3, [sp, #16]
 80033e4:	9307      	str	r3, [sp, #28]
 80033e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033ea:	931a      	str	r3, [sp, #104]	; 0x68
 80033ec:	4654      	mov	r4, sl
 80033ee:	2205      	movs	r2, #5
 80033f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033f4:	4851      	ldr	r0, [pc, #324]	; (800353c <_svfiprintf_r+0x1ec>)
 80033f6:	f7fc ff03 	bl	8000200 <memchr>
 80033fa:	9a04      	ldr	r2, [sp, #16]
 80033fc:	b9d8      	cbnz	r0, 8003436 <_svfiprintf_r+0xe6>
 80033fe:	06d0      	lsls	r0, r2, #27
 8003400:	bf44      	itt	mi
 8003402:	2320      	movmi	r3, #32
 8003404:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003408:	0711      	lsls	r1, r2, #28
 800340a:	bf44      	itt	mi
 800340c:	232b      	movmi	r3, #43	; 0x2b
 800340e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003412:	f89a 3000 	ldrb.w	r3, [sl]
 8003416:	2b2a      	cmp	r3, #42	; 0x2a
 8003418:	d015      	beq.n	8003446 <_svfiprintf_r+0xf6>
 800341a:	9a07      	ldr	r2, [sp, #28]
 800341c:	4654      	mov	r4, sl
 800341e:	2000      	movs	r0, #0
 8003420:	f04f 0c0a 	mov.w	ip, #10
 8003424:	4621      	mov	r1, r4
 8003426:	f811 3b01 	ldrb.w	r3, [r1], #1
 800342a:	3b30      	subs	r3, #48	; 0x30
 800342c:	2b09      	cmp	r3, #9
 800342e:	d94e      	bls.n	80034ce <_svfiprintf_r+0x17e>
 8003430:	b1b0      	cbz	r0, 8003460 <_svfiprintf_r+0x110>
 8003432:	9207      	str	r2, [sp, #28]
 8003434:	e014      	b.n	8003460 <_svfiprintf_r+0x110>
 8003436:	eba0 0308 	sub.w	r3, r0, r8
 800343a:	fa09 f303 	lsl.w	r3, r9, r3
 800343e:	4313      	orrs	r3, r2
 8003440:	9304      	str	r3, [sp, #16]
 8003442:	46a2      	mov	sl, r4
 8003444:	e7d2      	b.n	80033ec <_svfiprintf_r+0x9c>
 8003446:	9b03      	ldr	r3, [sp, #12]
 8003448:	1d19      	adds	r1, r3, #4
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	9103      	str	r1, [sp, #12]
 800344e:	2b00      	cmp	r3, #0
 8003450:	bfbb      	ittet	lt
 8003452:	425b      	neglt	r3, r3
 8003454:	f042 0202 	orrlt.w	r2, r2, #2
 8003458:	9307      	strge	r3, [sp, #28]
 800345a:	9307      	strlt	r3, [sp, #28]
 800345c:	bfb8      	it	lt
 800345e:	9204      	strlt	r2, [sp, #16]
 8003460:	7823      	ldrb	r3, [r4, #0]
 8003462:	2b2e      	cmp	r3, #46	; 0x2e
 8003464:	d10c      	bne.n	8003480 <_svfiprintf_r+0x130>
 8003466:	7863      	ldrb	r3, [r4, #1]
 8003468:	2b2a      	cmp	r3, #42	; 0x2a
 800346a:	d135      	bne.n	80034d8 <_svfiprintf_r+0x188>
 800346c:	9b03      	ldr	r3, [sp, #12]
 800346e:	1d1a      	adds	r2, r3, #4
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	9203      	str	r2, [sp, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	bfb8      	it	lt
 8003478:	f04f 33ff 	movlt.w	r3, #4294967295
 800347c:	3402      	adds	r4, #2
 800347e:	9305      	str	r3, [sp, #20]
 8003480:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800354c <_svfiprintf_r+0x1fc>
 8003484:	7821      	ldrb	r1, [r4, #0]
 8003486:	2203      	movs	r2, #3
 8003488:	4650      	mov	r0, sl
 800348a:	f7fc feb9 	bl	8000200 <memchr>
 800348e:	b140      	cbz	r0, 80034a2 <_svfiprintf_r+0x152>
 8003490:	2340      	movs	r3, #64	; 0x40
 8003492:	eba0 000a 	sub.w	r0, r0, sl
 8003496:	fa03 f000 	lsl.w	r0, r3, r0
 800349a:	9b04      	ldr	r3, [sp, #16]
 800349c:	4303      	orrs	r3, r0
 800349e:	3401      	adds	r4, #1
 80034a0:	9304      	str	r3, [sp, #16]
 80034a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034a6:	4826      	ldr	r0, [pc, #152]	; (8003540 <_svfiprintf_r+0x1f0>)
 80034a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034ac:	2206      	movs	r2, #6
 80034ae:	f7fc fea7 	bl	8000200 <memchr>
 80034b2:	2800      	cmp	r0, #0
 80034b4:	d038      	beq.n	8003528 <_svfiprintf_r+0x1d8>
 80034b6:	4b23      	ldr	r3, [pc, #140]	; (8003544 <_svfiprintf_r+0x1f4>)
 80034b8:	bb1b      	cbnz	r3, 8003502 <_svfiprintf_r+0x1b2>
 80034ba:	9b03      	ldr	r3, [sp, #12]
 80034bc:	3307      	adds	r3, #7
 80034be:	f023 0307 	bic.w	r3, r3, #7
 80034c2:	3308      	adds	r3, #8
 80034c4:	9303      	str	r3, [sp, #12]
 80034c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034c8:	4433      	add	r3, r6
 80034ca:	9309      	str	r3, [sp, #36]	; 0x24
 80034cc:	e767      	b.n	800339e <_svfiprintf_r+0x4e>
 80034ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80034d2:	460c      	mov	r4, r1
 80034d4:	2001      	movs	r0, #1
 80034d6:	e7a5      	b.n	8003424 <_svfiprintf_r+0xd4>
 80034d8:	2300      	movs	r3, #0
 80034da:	3401      	adds	r4, #1
 80034dc:	9305      	str	r3, [sp, #20]
 80034de:	4619      	mov	r1, r3
 80034e0:	f04f 0c0a 	mov.w	ip, #10
 80034e4:	4620      	mov	r0, r4
 80034e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034ea:	3a30      	subs	r2, #48	; 0x30
 80034ec:	2a09      	cmp	r2, #9
 80034ee:	d903      	bls.n	80034f8 <_svfiprintf_r+0x1a8>
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0c5      	beq.n	8003480 <_svfiprintf_r+0x130>
 80034f4:	9105      	str	r1, [sp, #20]
 80034f6:	e7c3      	b.n	8003480 <_svfiprintf_r+0x130>
 80034f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80034fc:	4604      	mov	r4, r0
 80034fe:	2301      	movs	r3, #1
 8003500:	e7f0      	b.n	80034e4 <_svfiprintf_r+0x194>
 8003502:	ab03      	add	r3, sp, #12
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	462a      	mov	r2, r5
 8003508:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <_svfiprintf_r+0x1f8>)
 800350a:	a904      	add	r1, sp, #16
 800350c:	4638      	mov	r0, r7
 800350e:	f3af 8000 	nop.w
 8003512:	1c42      	adds	r2, r0, #1
 8003514:	4606      	mov	r6, r0
 8003516:	d1d6      	bne.n	80034c6 <_svfiprintf_r+0x176>
 8003518:	89ab      	ldrh	r3, [r5, #12]
 800351a:	065b      	lsls	r3, r3, #25
 800351c:	f53f af2c 	bmi.w	8003378 <_svfiprintf_r+0x28>
 8003520:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003522:	b01d      	add	sp, #116	; 0x74
 8003524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003528:	ab03      	add	r3, sp, #12
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	462a      	mov	r2, r5
 800352e:	4b06      	ldr	r3, [pc, #24]	; (8003548 <_svfiprintf_r+0x1f8>)
 8003530:	a904      	add	r1, sp, #16
 8003532:	4638      	mov	r0, r7
 8003534:	f000 f87a 	bl	800362c <_printf_i>
 8003538:	e7eb      	b.n	8003512 <_svfiprintf_r+0x1c2>
 800353a:	bf00      	nop
 800353c:	08003b30 	.word	0x08003b30
 8003540:	08003b3a 	.word	0x08003b3a
 8003544:	00000000 	.word	0x00000000
 8003548:	08003299 	.word	0x08003299
 800354c:	08003b36 	.word	0x08003b36

08003550 <_printf_common>:
 8003550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003554:	4616      	mov	r6, r2
 8003556:	4699      	mov	r9, r3
 8003558:	688a      	ldr	r2, [r1, #8]
 800355a:	690b      	ldr	r3, [r1, #16]
 800355c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003560:	4293      	cmp	r3, r2
 8003562:	bfb8      	it	lt
 8003564:	4613      	movlt	r3, r2
 8003566:	6033      	str	r3, [r6, #0]
 8003568:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800356c:	4607      	mov	r7, r0
 800356e:	460c      	mov	r4, r1
 8003570:	b10a      	cbz	r2, 8003576 <_printf_common+0x26>
 8003572:	3301      	adds	r3, #1
 8003574:	6033      	str	r3, [r6, #0]
 8003576:	6823      	ldr	r3, [r4, #0]
 8003578:	0699      	lsls	r1, r3, #26
 800357a:	bf42      	ittt	mi
 800357c:	6833      	ldrmi	r3, [r6, #0]
 800357e:	3302      	addmi	r3, #2
 8003580:	6033      	strmi	r3, [r6, #0]
 8003582:	6825      	ldr	r5, [r4, #0]
 8003584:	f015 0506 	ands.w	r5, r5, #6
 8003588:	d106      	bne.n	8003598 <_printf_common+0x48>
 800358a:	f104 0a19 	add.w	sl, r4, #25
 800358e:	68e3      	ldr	r3, [r4, #12]
 8003590:	6832      	ldr	r2, [r6, #0]
 8003592:	1a9b      	subs	r3, r3, r2
 8003594:	42ab      	cmp	r3, r5
 8003596:	dc26      	bgt.n	80035e6 <_printf_common+0x96>
 8003598:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800359c:	1e13      	subs	r3, r2, #0
 800359e:	6822      	ldr	r2, [r4, #0]
 80035a0:	bf18      	it	ne
 80035a2:	2301      	movne	r3, #1
 80035a4:	0692      	lsls	r2, r2, #26
 80035a6:	d42b      	bmi.n	8003600 <_printf_common+0xb0>
 80035a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035ac:	4649      	mov	r1, r9
 80035ae:	4638      	mov	r0, r7
 80035b0:	47c0      	blx	r8
 80035b2:	3001      	adds	r0, #1
 80035b4:	d01e      	beq.n	80035f4 <_printf_common+0xa4>
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	68e5      	ldr	r5, [r4, #12]
 80035ba:	6832      	ldr	r2, [r6, #0]
 80035bc:	f003 0306 	and.w	r3, r3, #6
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	bf08      	it	eq
 80035c4:	1aad      	subeq	r5, r5, r2
 80035c6:	68a3      	ldr	r3, [r4, #8]
 80035c8:	6922      	ldr	r2, [r4, #16]
 80035ca:	bf0c      	ite	eq
 80035cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035d0:	2500      	movne	r5, #0
 80035d2:	4293      	cmp	r3, r2
 80035d4:	bfc4      	itt	gt
 80035d6:	1a9b      	subgt	r3, r3, r2
 80035d8:	18ed      	addgt	r5, r5, r3
 80035da:	2600      	movs	r6, #0
 80035dc:	341a      	adds	r4, #26
 80035de:	42b5      	cmp	r5, r6
 80035e0:	d11a      	bne.n	8003618 <_printf_common+0xc8>
 80035e2:	2000      	movs	r0, #0
 80035e4:	e008      	b.n	80035f8 <_printf_common+0xa8>
 80035e6:	2301      	movs	r3, #1
 80035e8:	4652      	mov	r2, sl
 80035ea:	4649      	mov	r1, r9
 80035ec:	4638      	mov	r0, r7
 80035ee:	47c0      	blx	r8
 80035f0:	3001      	adds	r0, #1
 80035f2:	d103      	bne.n	80035fc <_printf_common+0xac>
 80035f4:	f04f 30ff 	mov.w	r0, #4294967295
 80035f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035fc:	3501      	adds	r5, #1
 80035fe:	e7c6      	b.n	800358e <_printf_common+0x3e>
 8003600:	18e1      	adds	r1, r4, r3
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	2030      	movs	r0, #48	; 0x30
 8003606:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800360a:	4422      	add	r2, r4
 800360c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003610:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003614:	3302      	adds	r3, #2
 8003616:	e7c7      	b.n	80035a8 <_printf_common+0x58>
 8003618:	2301      	movs	r3, #1
 800361a:	4622      	mov	r2, r4
 800361c:	4649      	mov	r1, r9
 800361e:	4638      	mov	r0, r7
 8003620:	47c0      	blx	r8
 8003622:	3001      	adds	r0, #1
 8003624:	d0e6      	beq.n	80035f4 <_printf_common+0xa4>
 8003626:	3601      	adds	r6, #1
 8003628:	e7d9      	b.n	80035de <_printf_common+0x8e>
	...

0800362c <_printf_i>:
 800362c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003630:	460c      	mov	r4, r1
 8003632:	4691      	mov	r9, r2
 8003634:	7e27      	ldrb	r7, [r4, #24]
 8003636:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003638:	2f78      	cmp	r7, #120	; 0x78
 800363a:	4680      	mov	r8, r0
 800363c:	469a      	mov	sl, r3
 800363e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003642:	d807      	bhi.n	8003654 <_printf_i+0x28>
 8003644:	2f62      	cmp	r7, #98	; 0x62
 8003646:	d80a      	bhi.n	800365e <_printf_i+0x32>
 8003648:	2f00      	cmp	r7, #0
 800364a:	f000 80d8 	beq.w	80037fe <_printf_i+0x1d2>
 800364e:	2f58      	cmp	r7, #88	; 0x58
 8003650:	f000 80a3 	beq.w	800379a <_printf_i+0x16e>
 8003654:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003658:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800365c:	e03a      	b.n	80036d4 <_printf_i+0xa8>
 800365e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003662:	2b15      	cmp	r3, #21
 8003664:	d8f6      	bhi.n	8003654 <_printf_i+0x28>
 8003666:	a001      	add	r0, pc, #4	; (adr r0, 800366c <_printf_i+0x40>)
 8003668:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800366c:	080036c5 	.word	0x080036c5
 8003670:	080036d9 	.word	0x080036d9
 8003674:	08003655 	.word	0x08003655
 8003678:	08003655 	.word	0x08003655
 800367c:	08003655 	.word	0x08003655
 8003680:	08003655 	.word	0x08003655
 8003684:	080036d9 	.word	0x080036d9
 8003688:	08003655 	.word	0x08003655
 800368c:	08003655 	.word	0x08003655
 8003690:	08003655 	.word	0x08003655
 8003694:	08003655 	.word	0x08003655
 8003698:	080037e5 	.word	0x080037e5
 800369c:	08003709 	.word	0x08003709
 80036a0:	080037c7 	.word	0x080037c7
 80036a4:	08003655 	.word	0x08003655
 80036a8:	08003655 	.word	0x08003655
 80036ac:	08003807 	.word	0x08003807
 80036b0:	08003655 	.word	0x08003655
 80036b4:	08003709 	.word	0x08003709
 80036b8:	08003655 	.word	0x08003655
 80036bc:	08003655 	.word	0x08003655
 80036c0:	080037cf 	.word	0x080037cf
 80036c4:	680b      	ldr	r3, [r1, #0]
 80036c6:	1d1a      	adds	r2, r3, #4
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	600a      	str	r2, [r1, #0]
 80036cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80036d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0a3      	b.n	8003820 <_printf_i+0x1f4>
 80036d8:	6825      	ldr	r5, [r4, #0]
 80036da:	6808      	ldr	r0, [r1, #0]
 80036dc:	062e      	lsls	r6, r5, #24
 80036de:	f100 0304 	add.w	r3, r0, #4
 80036e2:	d50a      	bpl.n	80036fa <_printf_i+0xce>
 80036e4:	6805      	ldr	r5, [r0, #0]
 80036e6:	600b      	str	r3, [r1, #0]
 80036e8:	2d00      	cmp	r5, #0
 80036ea:	da03      	bge.n	80036f4 <_printf_i+0xc8>
 80036ec:	232d      	movs	r3, #45	; 0x2d
 80036ee:	426d      	negs	r5, r5
 80036f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036f4:	485e      	ldr	r0, [pc, #376]	; (8003870 <_printf_i+0x244>)
 80036f6:	230a      	movs	r3, #10
 80036f8:	e019      	b.n	800372e <_printf_i+0x102>
 80036fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80036fe:	6805      	ldr	r5, [r0, #0]
 8003700:	600b      	str	r3, [r1, #0]
 8003702:	bf18      	it	ne
 8003704:	b22d      	sxthne	r5, r5
 8003706:	e7ef      	b.n	80036e8 <_printf_i+0xbc>
 8003708:	680b      	ldr	r3, [r1, #0]
 800370a:	6825      	ldr	r5, [r4, #0]
 800370c:	1d18      	adds	r0, r3, #4
 800370e:	6008      	str	r0, [r1, #0]
 8003710:	0628      	lsls	r0, r5, #24
 8003712:	d501      	bpl.n	8003718 <_printf_i+0xec>
 8003714:	681d      	ldr	r5, [r3, #0]
 8003716:	e002      	b.n	800371e <_printf_i+0xf2>
 8003718:	0669      	lsls	r1, r5, #25
 800371a:	d5fb      	bpl.n	8003714 <_printf_i+0xe8>
 800371c:	881d      	ldrh	r5, [r3, #0]
 800371e:	4854      	ldr	r0, [pc, #336]	; (8003870 <_printf_i+0x244>)
 8003720:	2f6f      	cmp	r7, #111	; 0x6f
 8003722:	bf0c      	ite	eq
 8003724:	2308      	moveq	r3, #8
 8003726:	230a      	movne	r3, #10
 8003728:	2100      	movs	r1, #0
 800372a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800372e:	6866      	ldr	r6, [r4, #4]
 8003730:	60a6      	str	r6, [r4, #8]
 8003732:	2e00      	cmp	r6, #0
 8003734:	bfa2      	ittt	ge
 8003736:	6821      	ldrge	r1, [r4, #0]
 8003738:	f021 0104 	bicge.w	r1, r1, #4
 800373c:	6021      	strge	r1, [r4, #0]
 800373e:	b90d      	cbnz	r5, 8003744 <_printf_i+0x118>
 8003740:	2e00      	cmp	r6, #0
 8003742:	d04d      	beq.n	80037e0 <_printf_i+0x1b4>
 8003744:	4616      	mov	r6, r2
 8003746:	fbb5 f1f3 	udiv	r1, r5, r3
 800374a:	fb03 5711 	mls	r7, r3, r1, r5
 800374e:	5dc7      	ldrb	r7, [r0, r7]
 8003750:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003754:	462f      	mov	r7, r5
 8003756:	42bb      	cmp	r3, r7
 8003758:	460d      	mov	r5, r1
 800375a:	d9f4      	bls.n	8003746 <_printf_i+0x11a>
 800375c:	2b08      	cmp	r3, #8
 800375e:	d10b      	bne.n	8003778 <_printf_i+0x14c>
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	07df      	lsls	r7, r3, #31
 8003764:	d508      	bpl.n	8003778 <_printf_i+0x14c>
 8003766:	6923      	ldr	r3, [r4, #16]
 8003768:	6861      	ldr	r1, [r4, #4]
 800376a:	4299      	cmp	r1, r3
 800376c:	bfde      	ittt	le
 800376e:	2330      	movle	r3, #48	; 0x30
 8003770:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003774:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003778:	1b92      	subs	r2, r2, r6
 800377a:	6122      	str	r2, [r4, #16]
 800377c:	f8cd a000 	str.w	sl, [sp]
 8003780:	464b      	mov	r3, r9
 8003782:	aa03      	add	r2, sp, #12
 8003784:	4621      	mov	r1, r4
 8003786:	4640      	mov	r0, r8
 8003788:	f7ff fee2 	bl	8003550 <_printf_common>
 800378c:	3001      	adds	r0, #1
 800378e:	d14c      	bne.n	800382a <_printf_i+0x1fe>
 8003790:	f04f 30ff 	mov.w	r0, #4294967295
 8003794:	b004      	add	sp, #16
 8003796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800379a:	4835      	ldr	r0, [pc, #212]	; (8003870 <_printf_i+0x244>)
 800379c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80037a0:	6823      	ldr	r3, [r4, #0]
 80037a2:	680e      	ldr	r6, [r1, #0]
 80037a4:	061f      	lsls	r7, r3, #24
 80037a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80037aa:	600e      	str	r6, [r1, #0]
 80037ac:	d514      	bpl.n	80037d8 <_printf_i+0x1ac>
 80037ae:	07d9      	lsls	r1, r3, #31
 80037b0:	bf44      	itt	mi
 80037b2:	f043 0320 	orrmi.w	r3, r3, #32
 80037b6:	6023      	strmi	r3, [r4, #0]
 80037b8:	b91d      	cbnz	r5, 80037c2 <_printf_i+0x196>
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	f023 0320 	bic.w	r3, r3, #32
 80037c0:	6023      	str	r3, [r4, #0]
 80037c2:	2310      	movs	r3, #16
 80037c4:	e7b0      	b.n	8003728 <_printf_i+0xfc>
 80037c6:	6823      	ldr	r3, [r4, #0]
 80037c8:	f043 0320 	orr.w	r3, r3, #32
 80037cc:	6023      	str	r3, [r4, #0]
 80037ce:	2378      	movs	r3, #120	; 0x78
 80037d0:	4828      	ldr	r0, [pc, #160]	; (8003874 <_printf_i+0x248>)
 80037d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037d6:	e7e3      	b.n	80037a0 <_printf_i+0x174>
 80037d8:	065e      	lsls	r6, r3, #25
 80037da:	bf48      	it	mi
 80037dc:	b2ad      	uxthmi	r5, r5
 80037de:	e7e6      	b.n	80037ae <_printf_i+0x182>
 80037e0:	4616      	mov	r6, r2
 80037e2:	e7bb      	b.n	800375c <_printf_i+0x130>
 80037e4:	680b      	ldr	r3, [r1, #0]
 80037e6:	6826      	ldr	r6, [r4, #0]
 80037e8:	6960      	ldr	r0, [r4, #20]
 80037ea:	1d1d      	adds	r5, r3, #4
 80037ec:	600d      	str	r5, [r1, #0]
 80037ee:	0635      	lsls	r5, r6, #24
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	d501      	bpl.n	80037f8 <_printf_i+0x1cc>
 80037f4:	6018      	str	r0, [r3, #0]
 80037f6:	e002      	b.n	80037fe <_printf_i+0x1d2>
 80037f8:	0671      	lsls	r1, r6, #25
 80037fa:	d5fb      	bpl.n	80037f4 <_printf_i+0x1c8>
 80037fc:	8018      	strh	r0, [r3, #0]
 80037fe:	2300      	movs	r3, #0
 8003800:	6123      	str	r3, [r4, #16]
 8003802:	4616      	mov	r6, r2
 8003804:	e7ba      	b.n	800377c <_printf_i+0x150>
 8003806:	680b      	ldr	r3, [r1, #0]
 8003808:	1d1a      	adds	r2, r3, #4
 800380a:	600a      	str	r2, [r1, #0]
 800380c:	681e      	ldr	r6, [r3, #0]
 800380e:	6862      	ldr	r2, [r4, #4]
 8003810:	2100      	movs	r1, #0
 8003812:	4630      	mov	r0, r6
 8003814:	f7fc fcf4 	bl	8000200 <memchr>
 8003818:	b108      	cbz	r0, 800381e <_printf_i+0x1f2>
 800381a:	1b80      	subs	r0, r0, r6
 800381c:	6060      	str	r0, [r4, #4]
 800381e:	6863      	ldr	r3, [r4, #4]
 8003820:	6123      	str	r3, [r4, #16]
 8003822:	2300      	movs	r3, #0
 8003824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003828:	e7a8      	b.n	800377c <_printf_i+0x150>
 800382a:	6923      	ldr	r3, [r4, #16]
 800382c:	4632      	mov	r2, r6
 800382e:	4649      	mov	r1, r9
 8003830:	4640      	mov	r0, r8
 8003832:	47d0      	blx	sl
 8003834:	3001      	adds	r0, #1
 8003836:	d0ab      	beq.n	8003790 <_printf_i+0x164>
 8003838:	6823      	ldr	r3, [r4, #0]
 800383a:	079b      	lsls	r3, r3, #30
 800383c:	d413      	bmi.n	8003866 <_printf_i+0x23a>
 800383e:	68e0      	ldr	r0, [r4, #12]
 8003840:	9b03      	ldr	r3, [sp, #12]
 8003842:	4298      	cmp	r0, r3
 8003844:	bfb8      	it	lt
 8003846:	4618      	movlt	r0, r3
 8003848:	e7a4      	b.n	8003794 <_printf_i+0x168>
 800384a:	2301      	movs	r3, #1
 800384c:	4632      	mov	r2, r6
 800384e:	4649      	mov	r1, r9
 8003850:	4640      	mov	r0, r8
 8003852:	47d0      	blx	sl
 8003854:	3001      	adds	r0, #1
 8003856:	d09b      	beq.n	8003790 <_printf_i+0x164>
 8003858:	3501      	adds	r5, #1
 800385a:	68e3      	ldr	r3, [r4, #12]
 800385c:	9903      	ldr	r1, [sp, #12]
 800385e:	1a5b      	subs	r3, r3, r1
 8003860:	42ab      	cmp	r3, r5
 8003862:	dcf2      	bgt.n	800384a <_printf_i+0x21e>
 8003864:	e7eb      	b.n	800383e <_printf_i+0x212>
 8003866:	2500      	movs	r5, #0
 8003868:	f104 0619 	add.w	r6, r4, #25
 800386c:	e7f5      	b.n	800385a <_printf_i+0x22e>
 800386e:	bf00      	nop
 8003870:	08003b41 	.word	0x08003b41
 8003874:	08003b52 	.word	0x08003b52

08003878 <memcpy>:
 8003878:	440a      	add	r2, r1
 800387a:	4291      	cmp	r1, r2
 800387c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003880:	d100      	bne.n	8003884 <memcpy+0xc>
 8003882:	4770      	bx	lr
 8003884:	b510      	push	{r4, lr}
 8003886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800388a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800388e:	4291      	cmp	r1, r2
 8003890:	d1f9      	bne.n	8003886 <memcpy+0xe>
 8003892:	bd10      	pop	{r4, pc}

08003894 <memmove>:
 8003894:	4288      	cmp	r0, r1
 8003896:	b510      	push	{r4, lr}
 8003898:	eb01 0402 	add.w	r4, r1, r2
 800389c:	d902      	bls.n	80038a4 <memmove+0x10>
 800389e:	4284      	cmp	r4, r0
 80038a0:	4623      	mov	r3, r4
 80038a2:	d807      	bhi.n	80038b4 <memmove+0x20>
 80038a4:	1e43      	subs	r3, r0, #1
 80038a6:	42a1      	cmp	r1, r4
 80038a8:	d008      	beq.n	80038bc <memmove+0x28>
 80038aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038b2:	e7f8      	b.n	80038a6 <memmove+0x12>
 80038b4:	4402      	add	r2, r0
 80038b6:	4601      	mov	r1, r0
 80038b8:	428a      	cmp	r2, r1
 80038ba:	d100      	bne.n	80038be <memmove+0x2a>
 80038bc:	bd10      	pop	{r4, pc}
 80038be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038c6:	e7f7      	b.n	80038b8 <memmove+0x24>

080038c8 <_free_r>:
 80038c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038ca:	2900      	cmp	r1, #0
 80038cc:	d048      	beq.n	8003960 <_free_r+0x98>
 80038ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038d2:	9001      	str	r0, [sp, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f1a1 0404 	sub.w	r4, r1, #4
 80038da:	bfb8      	it	lt
 80038dc:	18e4      	addlt	r4, r4, r3
 80038de:	f000 f8d3 	bl	8003a88 <__malloc_lock>
 80038e2:	4a20      	ldr	r2, [pc, #128]	; (8003964 <_free_r+0x9c>)
 80038e4:	9801      	ldr	r0, [sp, #4]
 80038e6:	6813      	ldr	r3, [r2, #0]
 80038e8:	4615      	mov	r5, r2
 80038ea:	b933      	cbnz	r3, 80038fa <_free_r+0x32>
 80038ec:	6063      	str	r3, [r4, #4]
 80038ee:	6014      	str	r4, [r2, #0]
 80038f0:	b003      	add	sp, #12
 80038f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038f6:	f000 b8cd 	b.w	8003a94 <__malloc_unlock>
 80038fa:	42a3      	cmp	r3, r4
 80038fc:	d90b      	bls.n	8003916 <_free_r+0x4e>
 80038fe:	6821      	ldr	r1, [r4, #0]
 8003900:	1862      	adds	r2, r4, r1
 8003902:	4293      	cmp	r3, r2
 8003904:	bf04      	itt	eq
 8003906:	681a      	ldreq	r2, [r3, #0]
 8003908:	685b      	ldreq	r3, [r3, #4]
 800390a:	6063      	str	r3, [r4, #4]
 800390c:	bf04      	itt	eq
 800390e:	1852      	addeq	r2, r2, r1
 8003910:	6022      	streq	r2, [r4, #0]
 8003912:	602c      	str	r4, [r5, #0]
 8003914:	e7ec      	b.n	80038f0 <_free_r+0x28>
 8003916:	461a      	mov	r2, r3
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	b10b      	cbz	r3, 8003920 <_free_r+0x58>
 800391c:	42a3      	cmp	r3, r4
 800391e:	d9fa      	bls.n	8003916 <_free_r+0x4e>
 8003920:	6811      	ldr	r1, [r2, #0]
 8003922:	1855      	adds	r5, r2, r1
 8003924:	42a5      	cmp	r5, r4
 8003926:	d10b      	bne.n	8003940 <_free_r+0x78>
 8003928:	6824      	ldr	r4, [r4, #0]
 800392a:	4421      	add	r1, r4
 800392c:	1854      	adds	r4, r2, r1
 800392e:	42a3      	cmp	r3, r4
 8003930:	6011      	str	r1, [r2, #0]
 8003932:	d1dd      	bne.n	80038f0 <_free_r+0x28>
 8003934:	681c      	ldr	r4, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	6053      	str	r3, [r2, #4]
 800393a:	4421      	add	r1, r4
 800393c:	6011      	str	r1, [r2, #0]
 800393e:	e7d7      	b.n	80038f0 <_free_r+0x28>
 8003940:	d902      	bls.n	8003948 <_free_r+0x80>
 8003942:	230c      	movs	r3, #12
 8003944:	6003      	str	r3, [r0, #0]
 8003946:	e7d3      	b.n	80038f0 <_free_r+0x28>
 8003948:	6825      	ldr	r5, [r4, #0]
 800394a:	1961      	adds	r1, r4, r5
 800394c:	428b      	cmp	r3, r1
 800394e:	bf04      	itt	eq
 8003950:	6819      	ldreq	r1, [r3, #0]
 8003952:	685b      	ldreq	r3, [r3, #4]
 8003954:	6063      	str	r3, [r4, #4]
 8003956:	bf04      	itt	eq
 8003958:	1949      	addeq	r1, r1, r5
 800395a:	6021      	streq	r1, [r4, #0]
 800395c:	6054      	str	r4, [r2, #4]
 800395e:	e7c7      	b.n	80038f0 <_free_r+0x28>
 8003960:	b003      	add	sp, #12
 8003962:	bd30      	pop	{r4, r5, pc}
 8003964:	20000090 	.word	0x20000090

08003968 <_malloc_r>:
 8003968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396a:	1ccd      	adds	r5, r1, #3
 800396c:	f025 0503 	bic.w	r5, r5, #3
 8003970:	3508      	adds	r5, #8
 8003972:	2d0c      	cmp	r5, #12
 8003974:	bf38      	it	cc
 8003976:	250c      	movcc	r5, #12
 8003978:	2d00      	cmp	r5, #0
 800397a:	4606      	mov	r6, r0
 800397c:	db01      	blt.n	8003982 <_malloc_r+0x1a>
 800397e:	42a9      	cmp	r1, r5
 8003980:	d903      	bls.n	800398a <_malloc_r+0x22>
 8003982:	230c      	movs	r3, #12
 8003984:	6033      	str	r3, [r6, #0]
 8003986:	2000      	movs	r0, #0
 8003988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800398a:	f000 f87d 	bl	8003a88 <__malloc_lock>
 800398e:	4921      	ldr	r1, [pc, #132]	; (8003a14 <_malloc_r+0xac>)
 8003990:	680a      	ldr	r2, [r1, #0]
 8003992:	4614      	mov	r4, r2
 8003994:	b99c      	cbnz	r4, 80039be <_malloc_r+0x56>
 8003996:	4f20      	ldr	r7, [pc, #128]	; (8003a18 <_malloc_r+0xb0>)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	b923      	cbnz	r3, 80039a6 <_malloc_r+0x3e>
 800399c:	4621      	mov	r1, r4
 800399e:	4630      	mov	r0, r6
 80039a0:	f000 f862 	bl	8003a68 <_sbrk_r>
 80039a4:	6038      	str	r0, [r7, #0]
 80039a6:	4629      	mov	r1, r5
 80039a8:	4630      	mov	r0, r6
 80039aa:	f000 f85d 	bl	8003a68 <_sbrk_r>
 80039ae:	1c43      	adds	r3, r0, #1
 80039b0:	d123      	bne.n	80039fa <_malloc_r+0x92>
 80039b2:	230c      	movs	r3, #12
 80039b4:	6033      	str	r3, [r6, #0]
 80039b6:	4630      	mov	r0, r6
 80039b8:	f000 f86c 	bl	8003a94 <__malloc_unlock>
 80039bc:	e7e3      	b.n	8003986 <_malloc_r+0x1e>
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	1b5b      	subs	r3, r3, r5
 80039c2:	d417      	bmi.n	80039f4 <_malloc_r+0x8c>
 80039c4:	2b0b      	cmp	r3, #11
 80039c6:	d903      	bls.n	80039d0 <_malloc_r+0x68>
 80039c8:	6023      	str	r3, [r4, #0]
 80039ca:	441c      	add	r4, r3
 80039cc:	6025      	str	r5, [r4, #0]
 80039ce:	e004      	b.n	80039da <_malloc_r+0x72>
 80039d0:	6863      	ldr	r3, [r4, #4]
 80039d2:	42a2      	cmp	r2, r4
 80039d4:	bf0c      	ite	eq
 80039d6:	600b      	streq	r3, [r1, #0]
 80039d8:	6053      	strne	r3, [r2, #4]
 80039da:	4630      	mov	r0, r6
 80039dc:	f000 f85a 	bl	8003a94 <__malloc_unlock>
 80039e0:	f104 000b 	add.w	r0, r4, #11
 80039e4:	1d23      	adds	r3, r4, #4
 80039e6:	f020 0007 	bic.w	r0, r0, #7
 80039ea:	1ac2      	subs	r2, r0, r3
 80039ec:	d0cc      	beq.n	8003988 <_malloc_r+0x20>
 80039ee:	1a1b      	subs	r3, r3, r0
 80039f0:	50a3      	str	r3, [r4, r2]
 80039f2:	e7c9      	b.n	8003988 <_malloc_r+0x20>
 80039f4:	4622      	mov	r2, r4
 80039f6:	6864      	ldr	r4, [r4, #4]
 80039f8:	e7cc      	b.n	8003994 <_malloc_r+0x2c>
 80039fa:	1cc4      	adds	r4, r0, #3
 80039fc:	f024 0403 	bic.w	r4, r4, #3
 8003a00:	42a0      	cmp	r0, r4
 8003a02:	d0e3      	beq.n	80039cc <_malloc_r+0x64>
 8003a04:	1a21      	subs	r1, r4, r0
 8003a06:	4630      	mov	r0, r6
 8003a08:	f000 f82e 	bl	8003a68 <_sbrk_r>
 8003a0c:	3001      	adds	r0, #1
 8003a0e:	d1dd      	bne.n	80039cc <_malloc_r+0x64>
 8003a10:	e7cf      	b.n	80039b2 <_malloc_r+0x4a>
 8003a12:	bf00      	nop
 8003a14:	20000090 	.word	0x20000090
 8003a18:	20000094 	.word	0x20000094

08003a1c <_realloc_r>:
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1e:	4607      	mov	r7, r0
 8003a20:	4614      	mov	r4, r2
 8003a22:	460e      	mov	r6, r1
 8003a24:	b921      	cbnz	r1, 8003a30 <_realloc_r+0x14>
 8003a26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	f7ff bf9c 	b.w	8003968 <_malloc_r>
 8003a30:	b922      	cbnz	r2, 8003a3c <_realloc_r+0x20>
 8003a32:	f7ff ff49 	bl	80038c8 <_free_r>
 8003a36:	4625      	mov	r5, r4
 8003a38:	4628      	mov	r0, r5
 8003a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a3c:	f000 f830 	bl	8003aa0 <_malloc_usable_size_r>
 8003a40:	42a0      	cmp	r0, r4
 8003a42:	d20f      	bcs.n	8003a64 <_realloc_r+0x48>
 8003a44:	4621      	mov	r1, r4
 8003a46:	4638      	mov	r0, r7
 8003a48:	f7ff ff8e 	bl	8003968 <_malloc_r>
 8003a4c:	4605      	mov	r5, r0
 8003a4e:	2800      	cmp	r0, #0
 8003a50:	d0f2      	beq.n	8003a38 <_realloc_r+0x1c>
 8003a52:	4631      	mov	r1, r6
 8003a54:	4622      	mov	r2, r4
 8003a56:	f7ff ff0f 	bl	8003878 <memcpy>
 8003a5a:	4631      	mov	r1, r6
 8003a5c:	4638      	mov	r0, r7
 8003a5e:	f7ff ff33 	bl	80038c8 <_free_r>
 8003a62:	e7e9      	b.n	8003a38 <_realloc_r+0x1c>
 8003a64:	4635      	mov	r5, r6
 8003a66:	e7e7      	b.n	8003a38 <_realloc_r+0x1c>

08003a68 <_sbrk_r>:
 8003a68:	b538      	push	{r3, r4, r5, lr}
 8003a6a:	4d06      	ldr	r5, [pc, #24]	; (8003a84 <_sbrk_r+0x1c>)
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	4604      	mov	r4, r0
 8003a70:	4608      	mov	r0, r1
 8003a72:	602b      	str	r3, [r5, #0]
 8003a74:	f7fc ffae 	bl	80009d4 <_sbrk>
 8003a78:	1c43      	adds	r3, r0, #1
 8003a7a:	d102      	bne.n	8003a82 <_sbrk_r+0x1a>
 8003a7c:	682b      	ldr	r3, [r5, #0]
 8003a7e:	b103      	cbz	r3, 8003a82 <_sbrk_r+0x1a>
 8003a80:	6023      	str	r3, [r4, #0]
 8003a82:	bd38      	pop	{r3, r4, r5, pc}
 8003a84:	20000120 	.word	0x20000120

08003a88 <__malloc_lock>:
 8003a88:	4801      	ldr	r0, [pc, #4]	; (8003a90 <__malloc_lock+0x8>)
 8003a8a:	f000 b811 	b.w	8003ab0 <__retarget_lock_acquire_recursive>
 8003a8e:	bf00      	nop
 8003a90:	20000128 	.word	0x20000128

08003a94 <__malloc_unlock>:
 8003a94:	4801      	ldr	r0, [pc, #4]	; (8003a9c <__malloc_unlock+0x8>)
 8003a96:	f000 b80c 	b.w	8003ab2 <__retarget_lock_release_recursive>
 8003a9a:	bf00      	nop
 8003a9c:	20000128 	.word	0x20000128

08003aa0 <_malloc_usable_size_r>:
 8003aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003aa4:	1f18      	subs	r0, r3, #4
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	bfbc      	itt	lt
 8003aaa:	580b      	ldrlt	r3, [r1, r0]
 8003aac:	18c0      	addlt	r0, r0, r3
 8003aae:	4770      	bx	lr

08003ab0 <__retarget_lock_acquire_recursive>:
 8003ab0:	4770      	bx	lr

08003ab2 <__retarget_lock_release_recursive>:
 8003ab2:	4770      	bx	lr

08003ab4 <_init>:
 8003ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab6:	bf00      	nop
 8003ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aba:	bc08      	pop	{r3}
 8003abc:	469e      	mov	lr, r3
 8003abe:	4770      	bx	lr

08003ac0 <_fini>:
 8003ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ac2:	bf00      	nop
 8003ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ac6:	bc08      	pop	{r3}
 8003ac8:	469e      	mov	lr, r3
 8003aca:	4770      	bx	lr
