
Tech Demo Cube Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ac0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08004c70  08004c70  00014c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d14  08004d14  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004d14  08004d14  00014d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d1c  08004d1c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d1c  08004d1c  00014d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d20  08004d20  00014d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000070  08004d94  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08004d94  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cba2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b8f  00000000  00000000  0002cc42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0002e7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a40  00000000  00000000  0002f2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028cb7  00000000  00000000  0002fd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba8c  00000000  00000000  000589b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa34d  00000000  00000000  00064443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015e790  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003040  00000000  00000000  0015e7e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004c58 	.word	0x08004c58

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004c58 	.word	0x08004c58

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <flush_buffer>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

void flush_buffer(uint8_t* buf, int len) {
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < len; i++) {
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	e007      	b.n	80005b8 <flush_buffer+0x20>
		buf[i] = 0;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	3301      	adds	r3, #1
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fa      	ldr	r2, [r7, #12]
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	429a      	cmp	r2, r3
 80005be:	dbf3      	blt.n	80005a8 <flush_buffer+0x10>
	}
}
 80005c0:	bf00      	nop
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
	...

080005d0 <reset_xsens>:

void reset_xsens() {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005da:	4808      	ldr	r0, [pc, #32]	; (80005fc <reset_xsens+0x2c>)
 80005dc:	f000 ff7a 	bl	80014d4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80005e0:	200a      	movs	r0, #10
 80005e2:	f000 fcc3 	bl	8000f6c <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ec:	4803      	ldr	r0, [pc, #12]	; (80005fc <reset_xsens+0x2c>)
 80005ee:	f000 ff71 	bl	80014d4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80005f2:	2064      	movs	r0, #100	; 0x64
 80005f4:	f000 fcba 	bl	8000f6c <HAL_Delay>
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	48001400 	.word	0x48001400

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b0b2      	sub	sp, #200	; 0xc8
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint8_t buf[64];
	int counter = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	uint8_t spi_tx_buf[64];
	uint8_t spi_rx_buf[64];

	flush_buffer(spi_tx_buf, 64);
 800060c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000610:	2140      	movs	r1, #64	; 0x40
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff ffc0 	bl	8000598 <flush_buffer>
	flush_buffer(spi_rx_buf, 64);
 8000618:	463b      	mov	r3, r7
 800061a:	2140      	movs	r1, #64	; 0x40
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ffbb 	bl	8000598 <flush_buffer>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 fc2e 	bl	8000e82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f8db 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 f997 	bl	800095c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800062e:	f000 f92b 	bl	8000888 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8000632:	f000 f955 	bl	80008e0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  //FA FF 30 00 D1
  spi_tx_buf[0] = PRE;
 8000636:	23fa      	movs	r3, #250	; 0xfa
 8000638:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  spi_tx_buf[1] = BID;
 800063c:	23ff      	movs	r3, #255	; 0xff
 800063e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  spi_tx_buf[2] = 0x30;
 8000642:	2330      	movs	r3, #48	; 0x30
 8000644:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  spi_tx_buf[3] = 0x00;
 8000648:	2300      	movs	r3, #0
 800064a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  spi_tx_buf[4] = 0xD1;
 800064e:	23d1      	movs	r3, #209	; 0xd1
 8000650:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8000654:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000658:	485a      	ldr	r0, [pc, #360]	; (80007c4 <main+0x1c4>)
 800065a:	f000 ff23 	bl	80014a4 <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0f7      	beq.n	8000654 <main+0x54>
	  		  HAL_Delay(25);
 8000664:	2019      	movs	r0, #25
 8000666:	f000 fc81 	bl	8000f6c <HAL_Delay>
	  		  sprintf((char*)buf, "Button Pressed %d Times!\r\n", counter);
 800066a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800066e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000672:	4955      	ldr	r1, [pc, #340]	; (80007c8 <main+0x1c8>)
 8000674:	4618      	mov	r0, r3
 8000676:	f003 fec1 	bl	80043fc <siprintf>
	  		  HAL_UART_Transmit(&hlpuart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 800067a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff fdb6 	bl	80001f0 <strlen>
 8000684:	4603      	mov	r3, r0
 8000686:	b29a      	uxth	r2, r3
 8000688:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800068c:	f04f 33ff 	mov.w	r3, #4294967295
 8000690:	484e      	ldr	r0, [pc, #312]	; (80007cc <main+0x1cc>)
 8000692:	f003 f9fb 	bl	8003a8c <HAL_UART_Transmit>

	  		  reset_xsens();
 8000696:	f7ff ff9b 	bl	80005d0 <reset_xsens>

	  		  while(!HAL_GPIO_ReadPin(DRDY_PORT, DRDY_PIN));
 800069a:	bf00      	nop
 800069c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a0:	484b      	ldr	r0, [pc, #300]	; (80007d0 <main+0x1d0>)
 80006a2:	f000 feff 	bl	80014a4 <HAL_GPIO_ReadPin>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d0f7      	beq.n	800069c <main+0x9c>

	  		  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b2:	4848      	ldr	r0, [pc, #288]	; (80007d4 <main+0x1d4>)
 80006b4:	f000 ff0e 	bl	80014d4 <HAL_GPIO_WritePin>
	  		  HAL_SPI_Transmit(&hspi1, (uint8_t*) spi_tx_buf, 5, 100);
 80006b8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80006bc:	2364      	movs	r3, #100	; 0x64
 80006be:	2205      	movs	r2, #5
 80006c0:	4845      	ldr	r0, [pc, #276]	; (80007d8 <main+0x1d8>)
 80006c2:	f002 fb2c 	bl	8002d1e <HAL_SPI_Transmit>
	  		  //HAL_SPI_Receive(&hspi1, (uint8_t*) spi_rx_buf, 5, 100);
	  		  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80006c6:	2201      	movs	r2, #1
 80006c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006cc:	4841      	ldr	r0, [pc, #260]	; (80007d4 <main+0x1d4>)
 80006ce:	f000 ff01 	bl	80014d4 <HAL_GPIO_WritePin>

	  		  flush_buffer(spi_tx_buf, 64);
 80006d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006d6:	2140      	movs	r1, #64	; 0x40
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff5d 	bl	8000598 <flush_buffer>

	  		  spi_tx_buf[0] = PRE;
 80006de:	23fa      	movs	r3, #250	; 0xfa
 80006e0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	  		  spi_tx_buf[1] = BID;
 80006e4:	23ff      	movs	r3, #255	; 0xff
 80006e6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	  		  spi_tx_buf[2] = 0x00;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	  		  spi_tx_buf[3] = 0x00;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	  		  spi_tx_buf[4] = 0x01;
 80006f6:	2301      	movs	r3, #1
 80006f8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	  		  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000702:	4834      	ldr	r0, [pc, #208]	; (80007d4 <main+0x1d4>)
 8000704:	f000 fee6 	bl	80014d4 <HAL_GPIO_WritePin>
	  		  HAL_SPI_Transmit(&hspi1, (uint8_t*) spi_tx_buf, 5, 100);
 8000708:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800070c:	2364      	movs	r3, #100	; 0x64
 800070e:	2205      	movs	r2, #5
 8000710:	4831      	ldr	r0, [pc, #196]	; (80007d8 <main+0x1d8>)
 8000712:	f002 fb04 	bl	8002d1e <HAL_SPI_Transmit>
	  		  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800071c:	482d      	ldr	r0, [pc, #180]	; (80007d4 <main+0x1d4>)
 800071e:	f000 fed9 	bl	80014d4 <HAL_GPIO_WritePin>

	  		  while(!HAL_GPIO_ReadPin(DRDY_PORT, DRDY_PIN));
 8000722:	bf00      	nop
 8000724:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000728:	4829      	ldr	r0, [pc, #164]	; (80007d0 <main+0x1d0>)
 800072a:	f000 febb 	bl	80014a4 <HAL_GPIO_ReadPin>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d0f7      	beq.n	8000724 <main+0x124>

	  		  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800073a:	4826      	ldr	r0, [pc, #152]	; (80007d4 <main+0x1d4>)
 800073c:	f000 feca 	bl	80014d4 <HAL_GPIO_WritePin>
	  		  HAL_SPI_Receive(&hspi1, (uint8_t*) spi_rx_buf, 64, 100);
 8000740:	4639      	mov	r1, r7
 8000742:	2364      	movs	r3, #100	; 0x64
 8000744:	2240      	movs	r2, #64	; 0x40
 8000746:	4824      	ldr	r0, [pc, #144]	; (80007d8 <main+0x1d8>)
 8000748:	f002 fc57 	bl	8002ffa <HAL_SPI_Receive>
	  		  HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800074c:	2201      	movs	r2, #1
 800074e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000752:	4820      	ldr	r0, [pc, #128]	; (80007d4 <main+0x1d4>)
 8000754:	f000 febe 	bl	80014d4 <HAL_GPIO_WritePin>

	  		  for(int i = 0; i < 64; i++) {
 8000758:	2300      	movs	r3, #0
 800075a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800075e:	e01e      	b.n	800079e <main+0x19e>
	  			  sprintf((char*)buf, "0x%02x\r\n", (uint8_t) spi_rx_buf[i]);
 8000760:	463a      	mov	r2, r7
 8000762:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000766:	4413      	add	r3, r2
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000770:	491a      	ldr	r1, [pc, #104]	; (80007dc <main+0x1dc>)
 8000772:	4618      	mov	r0, r3
 8000774:	f003 fe42 	bl	80043fc <siprintf>
	  			  HAL_UART_Transmit(&hlpuart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000778:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fd37 	bl	80001f0 <strlen>
 8000782:	4603      	mov	r3, r0
 8000784:	b29a      	uxth	r2, r3
 8000786:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800078a:	f04f 33ff 	mov.w	r3, #4294967295
 800078e:	480f      	ldr	r0, [pc, #60]	; (80007cc <main+0x1cc>)
 8000790:	f003 f97c 	bl	8003a8c <HAL_UART_Transmit>
	  		  for(int i = 0; i < 64; i++) {
 8000794:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000798:	3301      	adds	r3, #1
 800079a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800079e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80007a2:	2b3f      	cmp	r3, #63	; 0x3f
 80007a4:	dddc      	ble.n	8000760 <main+0x160>
	  		  }

	  		  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 80007a6:	bf00      	nop
 80007a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ac:	4805      	ldr	r0, [pc, #20]	; (80007c4 <main+0x1c4>)
 80007ae:	f000 fe79 	bl	80014a4 <HAL_GPIO_ReadPin>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1f7      	bne.n	80007a8 <main+0x1a8>
	  		  counter++;
 80007b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80007bc:	3301      	adds	r3, #1
 80007be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 80007c2:	e747      	b.n	8000654 <main+0x54>
 80007c4:	48000800 	.word	0x48000800
 80007c8:	08004c70 	.word	0x08004c70
 80007cc:	20000098 	.word	0x20000098
 80007d0:	48001000 	.word	0x48001000
 80007d4:	48000c00 	.word	0x48000c00
 80007d8:	2000011c 	.word	0x2000011c
 80007dc:	08004c8c 	.word	0x08004c8c

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b096      	sub	sp, #88	; 0x58
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	2244      	movs	r2, #68	; 0x44
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f003 fdfc 	bl	80043ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	463b      	mov	r3, r7
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000802:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000806:	f000 fe8b 	bl	8001520 <HAL_PWREx_ControlVoltageScaling>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000810:	f000 f9b0 	bl	8000b74 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000814:	2310      	movs	r3, #16
 8000816:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000818:	2301      	movs	r3, #1
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8000820:	2390      	movs	r3, #144	; 0x90
 8000822:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000824:	2302      	movs	r3, #2
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000828:	2301      	movs	r3, #1
 800082a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 800082c:	2305      	movs	r3, #5
 800082e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 8000830:	2347      	movs	r3, #71	; 0x47
 8000832:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000834:	2302      	movs	r3, #2
 8000836:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000838:	2302      	movs	r3, #2
 800083a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 800083c:	2306      	movs	r3, #6
 800083e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4618      	mov	r0, r3
 8000846:	f000 fed1 	bl	80015ec <HAL_RCC_OscConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000850:	f000 f990 	bl	8000b74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000854:	230f      	movs	r3, #15
 8000856:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000858:	2303      	movs	r3, #3
 800085a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800085c:	2390      	movs	r3, #144	; 0x90
 800085e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000864:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800086a:	463b      	mov	r3, r7
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f001 fae2 	bl	8001e38 <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800087a:	f000 f97b 	bl	8000b74 <Error_Handler>
  }
}
 800087e:	bf00      	nop
 8000880:	3758      	adds	r7, #88	; 0x58
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 800088e:	4a13      	ldr	r2, [pc, #76]	; (80008dc <MX_LPUART1_UART_Init+0x54>)
 8000890:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_LPUART1_UART_Init+0x50>)
 80008c6:	f003 f893 	bl	80039f0 <HAL_UART_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80008d0:	f000 f950 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000098 	.word	0x20000098
 80008dc:	40008000 	.word	0x40008000

080008e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008e4:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <MX_SPI1_Init+0x74>)
 80008e6:	4a1c      	ldr	r2, [pc, #112]	; (8000958 <MX_SPI1_Init+0x78>)
 80008e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ea:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <MX_SPI1_Init+0x74>)
 80008ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <MX_SPI1_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f8:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_SPI1_Init+0x74>)
 80008fa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_SPI1_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MX_SPI1_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_SPI1_Init+0x74>)
 800090e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000912:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_SPI1_Init+0x74>)
 8000916:	2220      	movs	r2, #32
 8000918:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_SPI1_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_SPI1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_SPI1_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_SPI1_Init+0x74>)
 800092e:	2207      	movs	r2, #7
 8000930:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <MX_SPI1_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_SPI1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_SPI1_Init+0x74>)
 8000940:	f002 f94a 	bl	8002bd8 <HAL_SPI_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800094a:	f000 f913 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	2000011c 	.word	0x2000011c
 8000958:	40013000 	.word	0x40013000

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08e      	sub	sp, #56	; 0x38
 8000960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	4b79      	ldr	r3, [pc, #484]	; (8000b58 <MX_GPIO_Init+0x1fc>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	4a78      	ldr	r2, [pc, #480]	; (8000b58 <MX_GPIO_Init+0x1fc>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097e:	4b76      	ldr	r3, [pc, #472]	; (8000b58 <MX_GPIO_Init+0x1fc>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	623b      	str	r3, [r7, #32]
 8000988:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098a:	4b73      	ldr	r3, [pc, #460]	; (8000b58 <MX_GPIO_Init+0x1fc>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	4a72      	ldr	r2, [pc, #456]	; (8000b58 <MX_GPIO_Init+0x1fc>)
 8000990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000996:	4b70      	ldr	r3, [pc, #448]	; (8000b58 <MX_GPIO_Init+0x1fc>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099e:	61fb      	str	r3, [r7, #28]
 80009a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	4b6d      	ldr	r3, [pc, #436]	; (8000b58 <MX_GPIO_Init+0x1fc>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	4a6c      	ldr	r2, [pc, #432]	; (8000b58 <MX_GPIO_Init+0x1fc>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ae:	4b6a      	ldr	r3, [pc, #424]	; (8000b58 <MX_GPIO_Init+0x1fc>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	61bb      	str	r3, [r7, #24]
 80009b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ba:	4b67      	ldr	r3, [pc, #412]	; (8000b58 <MX_GPIO_Init+0x1fc>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	4a66      	ldr	r2, [pc, #408]	; (8000b58 <MX_GPIO_Init+0x1fc>)
 80009c0:	f043 0320 	orr.w	r3, r3, #32
 80009c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c6:	4b64      	ldr	r3, [pc, #400]	; (8000b58 <MX_GPIO_Init+0x1fc>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	f003 0320 	and.w	r3, r3, #32
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009d2:	4b61      	ldr	r3, [pc, #388]	; (8000b58 <MX_GPIO_Init+0x1fc>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	4a60      	ldr	r2, [pc, #384]	; (8000b58 <MX_GPIO_Init+0x1fc>)
 80009d8:	f043 0310 	orr.w	r3, r3, #16
 80009dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009de:	4b5e      	ldr	r3, [pc, #376]	; (8000b58 <MX_GPIO_Init+0x1fc>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	f003 0310 	and.w	r3, r3, #16
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	4b5b      	ldr	r3, [pc, #364]	; (8000b58 <MX_GPIO_Init+0x1fc>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	4a5a      	ldr	r2, [pc, #360]	; (8000b58 <MX_GPIO_Init+0x1fc>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f6:	4b58      	ldr	r3, [pc, #352]	; (8000b58 <MX_GPIO_Init+0x1fc>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a02:	4b55      	ldr	r3, [pc, #340]	; (8000b58 <MX_GPIO_Init+0x1fc>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	4a54      	ldr	r2, [pc, #336]	; (8000b58 <MX_GPIO_Init+0x1fc>)
 8000a08:	f043 0308 	orr.w	r3, r3, #8
 8000a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0e:	4b52      	ldr	r3, [pc, #328]	; (8000b58 <MX_GPIO_Init+0x1fc>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	f003 0308 	and.w	r3, r3, #8
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a1a:	4b4f      	ldr	r3, [pc, #316]	; (8000b58 <MX_GPIO_Init+0x1fc>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	4a4e      	ldr	r2, [pc, #312]	; (8000b58 <MX_GPIO_Init+0x1fc>)
 8000a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a26:	4b4c      	ldr	r3, [pc, #304]	; (8000b58 <MX_GPIO_Init+0x1fc>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000a32:	f000 fdcb 	bl	80015cc <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a3c:	4847      	ldr	r0, [pc, #284]	; (8000b5c <MX_GPIO_Init+0x200>)
 8000a3e:	f000 fd49 	bl	80014d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000a48:	4845      	ldr	r0, [pc, #276]	; (8000b60 <MX_GPIO_Init+0x204>)
 8000a4a:	f000 fd43 	bl	80014d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a54:	4843      	ldr	r0, [pc, #268]	; (8000b64 <MX_GPIO_Init+0x208>)
 8000a56:	f000 fd3d 	bl	80014d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
 8000a60:	4841      	ldr	r0, [pc, #260]	; (8000b68 <MX_GPIO_Init+0x20c>)
 8000a62:	f000 fd37 	bl	80014d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a78:	4619      	mov	r1, r3
 8000a7a:	483c      	ldr	r0, [pc, #240]	; (8000b6c <MX_GPIO_Init+0x210>)
 8000a7c:	f000 fb80 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	4619      	mov	r1, r3
 8000a98:	4830      	ldr	r0, [pc, #192]	; (8000b5c <MX_GPIO_Init+0x200>)
 8000a9a:	f000 fb71 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	482f      	ldr	r0, [pc, #188]	; (8000b70 <MX_GPIO_Init+0x214>)
 8000ab4:	f000 fb64 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000ab8:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4823      	ldr	r0, [pc, #140]	; (8000b60 <MX_GPIO_Init+0x204>)
 8000ad2:	f000 fb55 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000ad6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aec:	4619      	mov	r1, r3
 8000aee:	481d      	ldr	r0, [pc, #116]	; (8000b64 <MX_GPIO_Init+0x208>)
 8000af0:	f000 fb46 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 8000af4:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b06:	4619      	mov	r1, r3
 8000b08:	4817      	ldr	r0, [pc, #92]	; (8000b68 <MX_GPIO_Init+0x20c>)
 8000b0a:	f000 fb39 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 8000b0e:	f44f 5331 	mov.w	r3, #11328	; 0x2c40
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b24:	4619      	mov	r1, r3
 8000b26:	4810      	ldr	r0, [pc, #64]	; (8000b68 <MX_GPIO_Init+0x20c>)
 8000b28:	f000 fb2a 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b2c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b3e:	230a      	movs	r3, #10
 8000b40:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	4619      	mov	r1, r3
 8000b48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4c:	f000 fb18 	bl	8001180 <HAL_GPIO_Init>

}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	48001400 	.word	0x48001400
 8000b60:	48000400 	.word	0x48000400
 8000b64:	48000c00 	.word	0x48000c00
 8000b68:	48001800 	.word	0x48001800
 8000b6c:	48000800 	.word	0x48000800
 8000b70:	48001000 	.word	0x48001000

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <Error_Handler+0x8>
	...

08000b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <HAL_MspInit+0x44>)
 8000b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8a:	4a0e      	ldr	r2, [pc, #56]	; (8000bc4 <HAL_MspInit+0x44>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6613      	str	r3, [r2, #96]	; 0x60
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <HAL_MspInit+0x44>)
 8000b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <HAL_MspInit+0x44>)
 8000ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba2:	4a08      	ldr	r2, [pc, #32]	; (8000bc4 <HAL_MspInit+0x44>)
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba8:	6593      	str	r3, [r2, #88]	; 0x58
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_MspInit+0x44>)
 8000bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b0ac      	sub	sp, #176	; 0xb0
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	228c      	movs	r2, #140	; 0x8c
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f003 fbff 	bl	80043ec <memset>
  if(huart->Instance==LPUART1)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a22      	ldr	r2, [pc, #136]	; (8000c7c <HAL_UART_MspInit+0xb4>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d13d      	bne.n	8000c74 <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000bf8:	2320      	movs	r3, #32
 8000bfa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c00:	f107 0310 	add.w	r3, r7, #16
 8000c04:	4618      	mov	r0, r3
 8000c06:	f001 fb1d 	bl	8002244 <HAL_RCCEx_PeriphCLKConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c10:	f7ff ffb0 	bl	8000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xb8>)
 8000c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xb8>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xb8>)
 8000c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xb8>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xb8>)
 8000c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xb8>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000c44:	f000 fcc2 	bl	80015cc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c48:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000c62:	2308      	movs	r3, #8
 8000c64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <HAL_UART_MspInit+0xbc>)
 8000c70:	f000 fa86 	bl	8001180 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000c74:	bf00      	nop
 8000c76:	37b0      	adds	r7, #176	; 0xb0
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40008000 	.word	0x40008000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	48001800 	.word	0x48001800

08000c88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <HAL_SPI_MspInit+0x7c>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d128      	bne.n	8000cfc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000caa:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <HAL_SPI_MspInit+0x80>)
 8000cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cae:	4a16      	ldr	r2, [pc, #88]	; (8000d08 <HAL_SPI_MspInit+0x80>)
 8000cb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cb4:	6613      	str	r3, [r2, #96]	; 0x60
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <HAL_SPI_MspInit+0x80>)
 8000cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_SPI_MspInit+0x80>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	4a10      	ldr	r2, [pc, #64]	; (8000d08 <HAL_SPI_MspInit+0x80>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_SPI_MspInit+0x80>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cda:	23e0      	movs	r3, #224	; 0xe0
 8000cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cea:	2305      	movs	r3, #5
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf8:	f000 fa42 	bl	8001180 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cfc:	bf00      	nop
 8000cfe:	3728      	adds	r7, #40	; 0x28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40013000 	.word	0x40013000
 8000d08:	40021000 	.word	0x40021000

08000d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <NMI_Handler+0x4>

08000d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <MemManage_Handler+0x4>

08000d1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <BusFault_Handler+0x4>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <UsageFault_Handler+0x4>

08000d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d58:	f000 f8e8 	bl	8000f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d68:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <_sbrk+0x5c>)
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <_sbrk+0x60>)
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <_sbrk+0x64>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <_sbrk+0x68>)
 8000d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d207      	bcs.n	8000da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d90:	f003 fb02 	bl	8004398 <__errno>
 8000d94:	4603      	mov	r3, r0
 8000d96:	220c      	movs	r2, #12
 8000d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9e:	e009      	b.n	8000db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <_sbrk+0x64>)
 8000db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db2:	68fb      	ldr	r3, [r7, #12]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20040000 	.word	0x20040000
 8000dc0:	00000400 	.word	0x00000400
 8000dc4:	2000008c 	.word	0x2000008c
 8000dc8:	20000198 	.word	0x20000198

08000dcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <SystemInit+0x5c>)
 8000dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd6:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <SystemInit+0x5c>)
 8000dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <SystemInit+0x60>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a11      	ldr	r2, [pc, #68]	; (8000e2c <SystemInit+0x60>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <SystemInit+0x60>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <SystemInit+0x60>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <SystemInit+0x60>)
 8000df8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000dfc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e00:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <SystemInit+0x60>)
 8000e04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e08:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <SystemInit+0x60>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <SystemInit+0x60>)
 8000e10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e14:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e16:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <SystemInit+0x60>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00
 8000e2c:	40021000 	.word	0x40021000

08000e30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e34:	f7ff ffca 	bl	8000dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e38:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e3a:	e003      	b.n	8000e44 <LoopCopyDataInit>

08000e3c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e3e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e40:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e42:	3104      	adds	r1, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e44:	480a      	ldr	r0, [pc, #40]	; (8000e70 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e48:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e4a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e4c:	d3f6      	bcc.n	8000e3c <CopyDataInit>
	ldr	r2, =_sbss
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e50:	e002      	b.n	8000e58 <LoopFillZerobss>

08000e52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e52:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e54:	f842 3b04 	str.w	r3, [r2], #4

08000e58 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <LoopForever+0x16>)
	cmp	r2, r3
 8000e5a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e5c:	d3f9      	bcc.n	8000e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f003 faa1 	bl	80043a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e62:	f7ff fbcd 	bl	8000600 <main>

08000e66 <LoopForever>:

LoopForever:
    b LoopForever
 8000e66:	e7fe      	b.n	8000e66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e68:	20040000 	.word	0x20040000
	ldr	r3, =_sidata
 8000e6c:	08004d24 	.word	0x08004d24
	ldr	r0, =_sdata
 8000e70:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000e74:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000e78:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000e7c:	20000194 	.word	0x20000194

08000e80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC1_2_IRQHandler>

08000e82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	f000 f943 	bl	8001118 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e92:	2000      	movs	r0, #0
 8000e94:	f000 f80e 	bl	8000eb4 <HAL_InitTick>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d002      	beq.n	8000ea4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	71fb      	strb	r3, [r7, #7]
 8000ea2:	e001      	b.n	8000ea8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ea4:	f7ff fe6c 	bl	8000b80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <HAL_InitTick+0x6c>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d023      	beq.n	8000f10 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ec8:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <HAL_InitTick+0x70>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <HAL_InitTick+0x6c>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f941 	bl	8001166 <HAL_SYSTICK_Config>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d10f      	bne.n	8000f0a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b0f      	cmp	r3, #15
 8000eee:	d809      	bhi.n	8000f04 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f000 f919 	bl	800112e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000efc:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <HAL_InitTick+0x74>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	e007      	b.n	8000f14 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	73fb      	strb	r3, [r7, #15]
 8000f08:	e004      	b.n	8000f14 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	73fb      	strb	r3, [r7, #15]
 8000f0e:	e001      	b.n	8000f14 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000008 	.word	0x20000008
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20000004 	.word	0x20000004

08000f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x20>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x24>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <HAL_IncTick+0x24>)
 8000f3e:	6013      	str	r3, [r2, #0]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	20000180 	.word	0x20000180

08000f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return uwTick;
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <HAL_GetTick+0x14>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000180 	.word	0x20000180

08000f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f74:	f7ff ffee 	bl	8000f54 <HAL_GetTick>
 8000f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f84:	d005      	beq.n	8000f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_Delay+0x44>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4413      	add	r3, r2
 8000f90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f92:	bf00      	nop
 8000f94:	f7ff ffde 	bl	8000f54 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d8f7      	bhi.n	8000f94 <HAL_Delay+0x28>
  {
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000008 	.word	0x20000008

08000fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	60d3      	str	r3, [r2, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001028:	2b00      	cmp	r3, #0
 800102a:	db0a      	blt.n	8001042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	b2da      	uxtb	r2, r3
 8001030:	490c      	ldr	r1, [pc, #48]	; (8001064 <__NVIC_SetPriority+0x4c>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	0112      	lsls	r2, r2, #4
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	440b      	add	r3, r1
 800103c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001040:	e00a      	b.n	8001058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4908      	ldr	r1, [pc, #32]	; (8001068 <__NVIC_SetPriority+0x50>)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	3b04      	subs	r3, #4
 8001050:	0112      	lsls	r2, r2, #4
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	440b      	add	r3, r1
 8001056:	761a      	strb	r2, [r3, #24]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000e100 	.word	0xe000e100
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	; 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f1c3 0307 	rsb	r3, r3, #7
 8001086:	2b04      	cmp	r3, #4
 8001088:	bf28      	it	cs
 800108a:	2304      	movcs	r3, #4
 800108c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3304      	adds	r3, #4
 8001092:	2b06      	cmp	r3, #6
 8001094:	d902      	bls.n	800109c <NVIC_EncodePriority+0x30>
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3b03      	subs	r3, #3
 800109a:	e000      	b.n	800109e <NVIC_EncodePriority+0x32>
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	f04f 32ff 	mov.w	r2, #4294967295
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43da      	mvns	r2, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	401a      	ands	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b4:	f04f 31ff 	mov.w	r1, #4294967295
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	43d9      	mvns	r1, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	4313      	orrs	r3, r2
         );
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3724      	adds	r7, #36	; 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e4:	d301      	bcc.n	80010ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00f      	b.n	800110a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <SysTick_Config+0x40>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f2:	210f      	movs	r1, #15
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f7ff ff8e 	bl	8001018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <SysTick_Config+0x40>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <SysTick_Config+0x40>)
 8001104:	2207      	movs	r2, #7
 8001106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	e000e010 	.word	0xe000e010

08001118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff47 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001140:	f7ff ff5c 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 8001144:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	6978      	ldr	r0, [r7, #20]
 800114c:	f7ff ff8e 	bl	800106c <NVIC_EncodePriority>
 8001150:	4602      	mov	r2, r0
 8001152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff5d 	bl	8001018 <__NVIC_SetPriority>
}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ffb0 	bl	80010d4 <SysTick_Config>
 8001174:	4603      	mov	r3, r0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	b480      	push	{r7}
 8001182:	b087      	sub	sp, #28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118e:	e166      	b.n	800145e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	2101      	movs	r1, #1
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	fa01 f303 	lsl.w	r3, r1, r3
 800119c:	4013      	ands	r3, r2
 800119e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 8158 	beq.w	8001458 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d00b      	beq.n	80011c8 <HAL_GPIO_Init+0x48>
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d007      	beq.n	80011c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011bc:	2b11      	cmp	r3, #17
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b12      	cmp	r3, #18
 80011c6:	d130      	bne.n	800122a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	68da      	ldr	r2, [r3, #12]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011fe:	2201      	movs	r2, #1
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	091b      	lsrs	r3, r3, #4
 8001214:	f003 0201 	and.w	r2, r3, #1
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b02      	cmp	r3, #2
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0xea>
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b12      	cmp	r3, #18
 8001268:	d123      	bne.n	80012b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	08da      	lsrs	r2, r3, #3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3208      	adds	r2, #8
 8001272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001276:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	220f      	movs	r2, #15
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	691a      	ldr	r2, [r3, #16]
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	08da      	lsrs	r2, r3, #3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3208      	adds	r2, #8
 80012ac:	6939      	ldr	r1, [r7, #16]
 80012ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	2203      	movs	r2, #3
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4013      	ands	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0203 	and.w	r2, r3, #3
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 80b2 	beq.w	8001458 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f4:	4b61      	ldr	r3, [pc, #388]	; (800147c <HAL_GPIO_Init+0x2fc>)
 80012f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f8:	4a60      	ldr	r2, [pc, #384]	; (800147c <HAL_GPIO_Init+0x2fc>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6613      	str	r3, [r2, #96]	; 0x60
 8001300:	4b5e      	ldr	r3, [pc, #376]	; (800147c <HAL_GPIO_Init+0x2fc>)
 8001302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800130c:	4a5c      	ldr	r2, [pc, #368]	; (8001480 <HAL_GPIO_Init+0x300>)
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3302      	adds	r3, #2
 8001314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	220f      	movs	r2, #15
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001336:	d02b      	beq.n	8001390 <HAL_GPIO_Init+0x210>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a52      	ldr	r2, [pc, #328]	; (8001484 <HAL_GPIO_Init+0x304>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d025      	beq.n	800138c <HAL_GPIO_Init+0x20c>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a51      	ldr	r2, [pc, #324]	; (8001488 <HAL_GPIO_Init+0x308>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d01f      	beq.n	8001388 <HAL_GPIO_Init+0x208>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a50      	ldr	r2, [pc, #320]	; (800148c <HAL_GPIO_Init+0x30c>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d019      	beq.n	8001384 <HAL_GPIO_Init+0x204>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a4f      	ldr	r2, [pc, #316]	; (8001490 <HAL_GPIO_Init+0x310>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d013      	beq.n	8001380 <HAL_GPIO_Init+0x200>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a4e      	ldr	r2, [pc, #312]	; (8001494 <HAL_GPIO_Init+0x314>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d00d      	beq.n	800137c <HAL_GPIO_Init+0x1fc>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a4d      	ldr	r2, [pc, #308]	; (8001498 <HAL_GPIO_Init+0x318>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d007      	beq.n	8001378 <HAL_GPIO_Init+0x1f8>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a4c      	ldr	r2, [pc, #304]	; (800149c <HAL_GPIO_Init+0x31c>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d101      	bne.n	8001374 <HAL_GPIO_Init+0x1f4>
 8001370:	2307      	movs	r3, #7
 8001372:	e00e      	b.n	8001392 <HAL_GPIO_Init+0x212>
 8001374:	2308      	movs	r3, #8
 8001376:	e00c      	b.n	8001392 <HAL_GPIO_Init+0x212>
 8001378:	2306      	movs	r3, #6
 800137a:	e00a      	b.n	8001392 <HAL_GPIO_Init+0x212>
 800137c:	2305      	movs	r3, #5
 800137e:	e008      	b.n	8001392 <HAL_GPIO_Init+0x212>
 8001380:	2304      	movs	r3, #4
 8001382:	e006      	b.n	8001392 <HAL_GPIO_Init+0x212>
 8001384:	2303      	movs	r3, #3
 8001386:	e004      	b.n	8001392 <HAL_GPIO_Init+0x212>
 8001388:	2302      	movs	r3, #2
 800138a:	e002      	b.n	8001392 <HAL_GPIO_Init+0x212>
 800138c:	2301      	movs	r3, #1
 800138e:	e000      	b.n	8001392 <HAL_GPIO_Init+0x212>
 8001390:	2300      	movs	r3, #0
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	f002 0203 	and.w	r2, r2, #3
 8001398:	0092      	lsls	r2, r2, #2
 800139a:	4093      	lsls	r3, r2
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013a2:	4937      	ldr	r1, [pc, #220]	; (8001480 <HAL_GPIO_Init+0x300>)
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	089b      	lsrs	r3, r3, #2
 80013a8:	3302      	adds	r3, #2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013b0:	4b3b      	ldr	r3, [pc, #236]	; (80014a0 <HAL_GPIO_Init+0x320>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013d4:	4a32      	ldr	r2, [pc, #200]	; (80014a0 <HAL_GPIO_Init+0x320>)
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80013da:	4b31      	ldr	r3, [pc, #196]	; (80014a0 <HAL_GPIO_Init+0x320>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013fe:	4a28      	ldr	r2, [pc, #160]	; (80014a0 <HAL_GPIO_Init+0x320>)
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001404:	4b26      	ldr	r3, [pc, #152]	; (80014a0 <HAL_GPIO_Init+0x320>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	43db      	mvns	r3, r3
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001428:	4a1d      	ldr	r2, [pc, #116]	; (80014a0 <HAL_GPIO_Init+0x320>)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800142e:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <HAL_GPIO_Init+0x320>)
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	43db      	mvns	r3, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4313      	orrs	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001452:	4a13      	ldr	r2, [pc, #76]	; (80014a0 <HAL_GPIO_Init+0x320>)
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	3301      	adds	r3, #1
 800145c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	fa22 f303 	lsr.w	r3, r2, r3
 8001468:	2b00      	cmp	r3, #0
 800146a:	f47f ae91 	bne.w	8001190 <HAL_GPIO_Init+0x10>
  }
}
 800146e:	bf00      	nop
 8001470:	bf00      	nop
 8001472:	371c      	adds	r7, #28
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	40021000 	.word	0x40021000
 8001480:	40010000 	.word	0x40010000
 8001484:	48000400 	.word	0x48000400
 8001488:	48000800 	.word	0x48000800
 800148c:	48000c00 	.word	0x48000c00
 8001490:	48001000 	.word	0x48001000
 8001494:	48001400 	.word	0x48001400
 8001498:	48001800 	.word	0x48001800
 800149c:	48001c00 	.word	0x48001c00
 80014a0:	40010400 	.word	0x40010400

080014a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	887b      	ldrh	r3, [r7, #2]
 80014b6:	4013      	ands	r3, r2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d002      	beq.n	80014c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014bc:	2301      	movs	r3, #1
 80014be:	73fb      	strb	r3, [r7, #15]
 80014c0:	e001      	b.n	80014c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014c2:	2300      	movs	r3, #0
 80014c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	807b      	strh	r3, [r7, #2]
 80014e0:	4613      	mov	r3, r2
 80014e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014e4:	787b      	ldrb	r3, [r7, #1]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014ea:	887a      	ldrh	r2, [r7, #2]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014f0:	e002      	b.n	80014f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014f2:	887a      	ldrh	r2, [r7, #2]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <HAL_PWREx_GetVoltageRange+0x18>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001510:	4618      	mov	r0, r3
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40007000 	.word	0x40007000

08001520 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800152e:	d130      	bne.n	8001592 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001530:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800153c:	d038      	beq.n	80015b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800153e:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001546:	4a1e      	ldr	r2, [pc, #120]	; (80015c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001548:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800154c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800154e:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2232      	movs	r2, #50	; 0x32
 8001554:	fb02 f303 	mul.w	r3, r2, r3
 8001558:	4a1b      	ldr	r2, [pc, #108]	; (80015c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	0c9b      	lsrs	r3, r3, #18
 8001560:	3301      	adds	r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001564:	e002      	b.n	800156c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	3b01      	subs	r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800156c:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001578:	d102      	bne.n	8001580 <HAL_PWREx_ControlVoltageScaling+0x60>
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1f2      	bne.n	8001566 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800158c:	d110      	bne.n	80015b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e00f      	b.n	80015b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800159a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800159e:	d007      	beq.n	80015b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015a8:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40007000 	.word	0x40007000
 80015c4:	20000000 	.word	0x20000000
 80015c8:	431bde83 	.word	0x431bde83

080015cc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80015d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015da:	6053      	str	r3, [r2, #4]
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40007000 	.word	0x40007000

080015ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d102      	bne.n	8001600 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	f000 bc16 	b.w	8001e2c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001600:	4ba0      	ldr	r3, [pc, #640]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 030c 	and.w	r3, r3, #12
 8001608:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800160a:	4b9e      	ldr	r3, [pc, #632]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0310 	and.w	r3, r3, #16
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 80e4 	beq.w	80017ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d007      	beq.n	8001638 <HAL_RCC_OscConfig+0x4c>
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	2b0c      	cmp	r3, #12
 800162c:	f040 808b 	bne.w	8001746 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	2b01      	cmp	r3, #1
 8001634:	f040 8087 	bne.w	8001746 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001638:	4b92      	ldr	r3, [pc, #584]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_RCC_OscConfig+0x64>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e3ed      	b.n	8001e2c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a1a      	ldr	r2, [r3, #32]
 8001654:	4b8b      	ldr	r3, [pc, #556]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	2b00      	cmp	r3, #0
 800165e:	d004      	beq.n	800166a <HAL_RCC_OscConfig+0x7e>
 8001660:	4b88      	ldr	r3, [pc, #544]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001668:	e005      	b.n	8001676 <HAL_RCC_OscConfig+0x8a>
 800166a:	4b86      	ldr	r3, [pc, #536]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 800166c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001670:	091b      	lsrs	r3, r3, #4
 8001672:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001676:	4293      	cmp	r3, r2
 8001678:	d223      	bcs.n	80016c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	4618      	mov	r0, r3
 8001680:	f000 fd80 	bl	8002184 <RCC_SetFlashLatencyFromMSIRange>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e3ce      	b.n	8001e2c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800168e:	4b7d      	ldr	r3, [pc, #500]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a7c      	ldr	r2, [pc, #496]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 8001694:	f043 0308 	orr.w	r3, r3, #8
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	4b7a      	ldr	r3, [pc, #488]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	4977      	ldr	r1, [pc, #476]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ac:	4b75      	ldr	r3, [pc, #468]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	4972      	ldr	r1, [pc, #456]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	604b      	str	r3, [r1, #4]
 80016c0:	e025      	b.n	800170e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016c2:	4b70      	ldr	r3, [pc, #448]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a6f      	ldr	r2, [pc, #444]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 80016c8:	f043 0308 	orr.w	r3, r3, #8
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	4b6d      	ldr	r3, [pc, #436]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	496a      	ldr	r1, [pc, #424]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016e0:	4b68      	ldr	r3, [pc, #416]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	4965      	ldr	r1, [pc, #404]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d109      	bne.n	800170e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 fd40 	bl	8002184 <RCC_SetFlashLatencyFromMSIRange>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e38e      	b.n	8001e2c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800170e:	f000 fc75 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 8001712:	4602      	mov	r2, r0
 8001714:	4b5b      	ldr	r3, [pc, #364]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	495a      	ldr	r1, [pc, #360]	; (8001888 <HAL_RCC_OscConfig+0x29c>)
 8001720:	5ccb      	ldrb	r3, [r1, r3]
 8001722:	f003 031f 	and.w	r3, r3, #31
 8001726:	fa22 f303 	lsr.w	r3, r2, r3
 800172a:	4a58      	ldr	r2, [pc, #352]	; (800188c <HAL_RCC_OscConfig+0x2a0>)
 800172c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800172e:	4b58      	ldr	r3, [pc, #352]	; (8001890 <HAL_RCC_OscConfig+0x2a4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fbbe 	bl	8000eb4 <HAL_InitTick>
 8001738:	4603      	mov	r3, r0
 800173a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d052      	beq.n	80017e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	e372      	b.n	8001e2c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d032      	beq.n	80017b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800174e:	4b4d      	ldr	r3, [pc, #308]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a4c      	ldr	r2, [pc, #304]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800175a:	f7ff fbfb 	bl	8000f54 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001762:	f7ff fbf7 	bl	8000f54 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e35b      	b.n	8001e2c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001774:	4b43      	ldr	r3, [pc, #268]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f0      	beq.n	8001762 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001780:	4b40      	ldr	r3, [pc, #256]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a3f      	ldr	r2, [pc, #252]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 8001786:	f043 0308 	orr.w	r3, r3, #8
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4b3d      	ldr	r3, [pc, #244]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	493a      	ldr	r1, [pc, #232]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 800179a:	4313      	orrs	r3, r2
 800179c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800179e:	4b39      	ldr	r3, [pc, #228]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	021b      	lsls	r3, r3, #8
 80017ac:	4935      	ldr	r1, [pc, #212]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	604b      	str	r3, [r1, #4]
 80017b2:	e01a      	b.n	80017ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017b4:	4b33      	ldr	r3, [pc, #204]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a32      	ldr	r2, [pc, #200]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 80017ba:	f023 0301 	bic.w	r3, r3, #1
 80017be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017c0:	f7ff fbc8 	bl	8000f54 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017c8:	f7ff fbc4 	bl	8000f54 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e328      	b.n	8001e2c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017da:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x1dc>
 80017e6:	e000      	b.n	80017ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d073      	beq.n	80018de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_OscConfig+0x21c>
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	2b0c      	cmp	r3, #12
 8001800:	d10e      	bne.n	8001820 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	2b03      	cmp	r3, #3
 8001806:	d10b      	bne.n	8001820 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001808:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d063      	beq.n	80018dc <HAL_RCC_OscConfig+0x2f0>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d15f      	bne.n	80018dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e305      	b.n	8001e2c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001828:	d106      	bne.n	8001838 <HAL_RCC_OscConfig+0x24c>
 800182a:	4b16      	ldr	r3, [pc, #88]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a15      	ldr	r2, [pc, #84]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 8001830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	e01d      	b.n	8001874 <HAL_RCC_OscConfig+0x288>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001840:	d10c      	bne.n	800185c <HAL_RCC_OscConfig+0x270>
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a0f      	ldr	r2, [pc, #60]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 8001848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a0c      	ldr	r2, [pc, #48]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 8001854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	e00b      	b.n	8001874 <HAL_RCC_OscConfig+0x288>
 800185c:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a08      	ldr	r2, [pc, #32]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 8001862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a05      	ldr	r2, [pc, #20]	; (8001884 <HAL_RCC_OscConfig+0x298>)
 800186e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d01b      	beq.n	80018b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187c:	f7ff fb6a 	bl	8000f54 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001882:	e010      	b.n	80018a6 <HAL_RCC_OscConfig+0x2ba>
 8001884:	40021000 	.word	0x40021000
 8001888:	08004c98 	.word	0x08004c98
 800188c:	20000000 	.word	0x20000000
 8001890:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001894:	f7ff fb5e 	bl	8000f54 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	; 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e2c2      	b.n	8001e2c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018a6:	4baf      	ldr	r3, [pc, #700]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f0      	beq.n	8001894 <HAL_RCC_OscConfig+0x2a8>
 80018b2:	e014      	b.n	80018de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff fb4e 	bl	8000f54 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018bc:	f7ff fb4a 	bl	8000f54 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b64      	cmp	r3, #100	; 0x64
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e2ae      	b.n	8001e2c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ce:	4ba5      	ldr	r3, [pc, #660]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x2d0>
 80018da:	e000      	b.n	80018de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d060      	beq.n	80019ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d005      	beq.n	80018fc <HAL_RCC_OscConfig+0x310>
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	2b0c      	cmp	r3, #12
 80018f4:	d119      	bne.n	800192a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d116      	bne.n	800192a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018fc:	4b99      	ldr	r3, [pc, #612]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <HAL_RCC_OscConfig+0x328>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e28b      	b.n	8001e2c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001914:	4b93      	ldr	r3, [pc, #588]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	061b      	lsls	r3, r3, #24
 8001922:	4990      	ldr	r1, [pc, #576]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 8001924:	4313      	orrs	r3, r2
 8001926:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001928:	e040      	b.n	80019ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d023      	beq.n	800197a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001932:	4b8c      	ldr	r3, [pc, #560]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a8b      	ldr	r2, [pc, #556]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 8001938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193e:	f7ff fb09 	bl	8000f54 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001946:	f7ff fb05 	bl	8000f54 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e269      	b.n	8001e2c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001958:	4b82      	ldr	r3, [pc, #520]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0f0      	beq.n	8001946 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001964:	4b7f      	ldr	r3, [pc, #508]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	061b      	lsls	r3, r3, #24
 8001972:	497c      	ldr	r1, [pc, #496]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 8001974:	4313      	orrs	r3, r2
 8001976:	604b      	str	r3, [r1, #4]
 8001978:	e018      	b.n	80019ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800197a:	4b7a      	ldr	r3, [pc, #488]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a79      	ldr	r2, [pc, #484]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 8001980:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001986:	f7ff fae5 	bl	8000f54 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800198e:	f7ff fae1 	bl	8000f54 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e245      	b.n	8001e2c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019a0:	4b70      	ldr	r3, [pc, #448]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f0      	bne.n	800198e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d03c      	beq.n	8001a32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d01c      	beq.n	80019fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c0:	4b68      	ldr	r3, [pc, #416]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 80019c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c6:	4a67      	ldr	r2, [pc, #412]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d0:	f7ff fac0 	bl	8000f54 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d8:	f7ff fabc 	bl	8000f54 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e220      	b.n	8001e2c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ea:	4b5e      	ldr	r3, [pc, #376]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 80019ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0ef      	beq.n	80019d8 <HAL_RCC_OscConfig+0x3ec>
 80019f8:	e01b      	b.n	8001a32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019fa:	4b5a      	ldr	r3, [pc, #360]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 80019fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a00:	4a58      	ldr	r2, [pc, #352]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 8001a02:	f023 0301 	bic.w	r3, r3, #1
 8001a06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0a:	f7ff faa3 	bl	8000f54 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a12:	f7ff fa9f 	bl	8000f54 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e203      	b.n	8001e2c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a24:	4b4f      	ldr	r3, [pc, #316]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 8001a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1ef      	bne.n	8001a12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 80a6 	beq.w	8001b8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a40:	2300      	movs	r3, #0
 8001a42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a44:	4b47      	ldr	r3, [pc, #284]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 8001a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d10d      	bne.n	8001a6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a50:	4b44      	ldr	r3, [pc, #272]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 8001a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a54:	4a43      	ldr	r2, [pc, #268]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 8001a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a5c:	4b41      	ldr	r3, [pc, #260]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 8001a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a6c:	4b3e      	ldr	r3, [pc, #248]	; (8001b68 <HAL_RCC_OscConfig+0x57c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d118      	bne.n	8001aaa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a78:	4b3b      	ldr	r3, [pc, #236]	; (8001b68 <HAL_RCC_OscConfig+0x57c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a3a      	ldr	r2, [pc, #232]	; (8001b68 <HAL_RCC_OscConfig+0x57c>)
 8001a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a84:	f7ff fa66 	bl	8000f54 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a8c:	f7ff fa62 	bl	8000f54 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e1c6      	b.n	8001e2c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a9e:	4b32      	ldr	r3, [pc, #200]	; (8001b68 <HAL_RCC_OscConfig+0x57c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f0      	beq.n	8001a8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d108      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x4d8>
 8001ab2:	4b2c      	ldr	r3, [pc, #176]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 8001ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab8:	4a2a      	ldr	r2, [pc, #168]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ac2:	e024      	b.n	8001b0e <HAL_RCC_OscConfig+0x522>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2b05      	cmp	r3, #5
 8001aca:	d110      	bne.n	8001aee <HAL_RCC_OscConfig+0x502>
 8001acc:	4b25      	ldr	r3, [pc, #148]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 8001ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad2:	4a24      	ldr	r2, [pc, #144]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 8001ad4:	f043 0304 	orr.w	r3, r3, #4
 8001ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001adc:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 8001ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae2:	4a20      	ldr	r2, [pc, #128]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aec:	e00f      	b.n	8001b0e <HAL_RCC_OscConfig+0x522>
 8001aee:	4b1d      	ldr	r3, [pc, #116]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 8001af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af4:	4a1b      	ldr	r2, [pc, #108]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 8001af6:	f023 0301 	bic.w	r3, r3, #1
 8001afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001afe:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 8001b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b04:	4a17      	ldr	r2, [pc, #92]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 8001b06:	f023 0304 	bic.w	r3, r3, #4
 8001b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d016      	beq.n	8001b44 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b16:	f7ff fa1d 	bl	8000f54 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b1c:	e00a      	b.n	8001b34 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1e:	f7ff fa19 	bl	8000f54 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e17b      	b.n	8001e2c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_RCC_OscConfig+0x578>)
 8001b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0ed      	beq.n	8001b1e <HAL_RCC_OscConfig+0x532>
 8001b42:	e01a      	b.n	8001b7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b44:	f7ff fa06 	bl	8000f54 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b4a:	e00f      	b.n	8001b6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4c:	f7ff fa02 	bl	8000f54 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d906      	bls.n	8001b6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e164      	b.n	8001e2c <HAL_RCC_OscConfig+0x840>
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b6c:	4ba8      	ldr	r3, [pc, #672]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1e8      	bne.n	8001b4c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b7a:	7ffb      	ldrb	r3, [r7, #31]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d105      	bne.n	8001b8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b80:	4ba3      	ldr	r3, [pc, #652]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b84:	4aa2      	ldr	r2, [pc, #648]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0320 	and.w	r3, r3, #32
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d03c      	beq.n	8001c12 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d01c      	beq.n	8001bda <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ba0:	4b9b      	ldr	r3, [pc, #620]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001ba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ba6:	4a9a      	ldr	r2, [pc, #616]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb0:	f7ff f9d0 	bl	8000f54 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bb8:	f7ff f9cc 	bl	8000f54 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e130      	b.n	8001e2c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bca:	4b91      	ldr	r3, [pc, #580]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001bcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0ef      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x5cc>
 8001bd8:	e01b      	b.n	8001c12 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bda:	4b8d      	ldr	r3, [pc, #564]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001bdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001be0:	4a8b      	ldr	r2, [pc, #556]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001be2:	f023 0301 	bic.w	r3, r3, #1
 8001be6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bea:	f7ff f9b3 	bl	8000f54 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bf2:	f7ff f9af 	bl	8000f54 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e113      	b.n	8001e2c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c04:	4b82      	ldr	r3, [pc, #520]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001c06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1ef      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 8107 	beq.w	8001e2a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	f040 80cb 	bne.w	8001dbc <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c26:	4b7a      	ldr	r3, [pc, #488]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f003 0203 	and.w	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d12c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	3b01      	subs	r3, #1
 8001c46:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d123      	bne.n	8001c94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c56:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d11b      	bne.n	8001c94 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c66:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d113      	bne.n	8001c94 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c76:	085b      	lsrs	r3, r3, #1
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d109      	bne.n	8001c94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	085b      	lsrs	r3, r3, #1
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d06d      	beq.n	8001d70 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	2b0c      	cmp	r3, #12
 8001c98:	d068      	beq.n	8001d6c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c9a:	4b5d      	ldr	r3, [pc, #372]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d105      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ca6:	4b5a      	ldr	r3, [pc, #360]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e0ba      	b.n	8001e2c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cb6:	4b56      	ldr	r3, [pc, #344]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a55      	ldr	r2, [pc, #340]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001cbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cc0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cc2:	f7ff f947 	bl	8000f54 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cca:	f7ff f943 	bl	8000f54 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e0a7      	b.n	8001e2c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cdc:	4b4c      	ldr	r3, [pc, #304]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1f0      	bne.n	8001cca <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ce8:	4b49      	ldr	r3, [pc, #292]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	4b49      	ldr	r3, [pc, #292]	; (8001e14 <HAL_RCC_OscConfig+0x828>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cf8:	3a01      	subs	r2, #1
 8001cfa:	0112      	lsls	r2, r2, #4
 8001cfc:	4311      	orrs	r1, r2
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d02:	0212      	lsls	r2, r2, #8
 8001d04:	4311      	orrs	r1, r2
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d0a:	0852      	lsrs	r2, r2, #1
 8001d0c:	3a01      	subs	r2, #1
 8001d0e:	0552      	lsls	r2, r2, #21
 8001d10:	4311      	orrs	r1, r2
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d16:	0852      	lsrs	r2, r2, #1
 8001d18:	3a01      	subs	r2, #1
 8001d1a:	0652      	lsls	r2, r2, #25
 8001d1c:	4311      	orrs	r1, r2
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d22:	06d2      	lsls	r2, r2, #27
 8001d24:	430a      	orrs	r2, r1
 8001d26:	493a      	ldr	r1, [pc, #232]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d2c:	4b38      	ldr	r3, [pc, #224]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a37      	ldr	r2, [pc, #220]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d38:	4b35      	ldr	r3, [pc, #212]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4a34      	ldr	r2, [pc, #208]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001d3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d44:	f7ff f906 	bl	8000f54 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4c:	f7ff f902 	bl	8000f54 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e066      	b.n	8001e2c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5e:	4b2c      	ldr	r3, [pc, #176]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d6a:	e05e      	b.n	8001e2a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e05d      	b.n	8001e2c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d70:	4b27      	ldr	r3, [pc, #156]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d156      	bne.n	8001e2a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d7c:	4b24      	ldr	r3, [pc, #144]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a23      	ldr	r2, [pc, #140]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001d82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d88:	4b21      	ldr	r3, [pc, #132]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	4a20      	ldr	r2, [pc, #128]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d94:	f7ff f8de 	bl	8000f54 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7ff f8da 	bl	8000f54 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e03e      	b.n	8001e2c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dae:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x7b0>
 8001dba:	e036      	b.n	8001e2a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	2b0c      	cmp	r3, #12
 8001dc0:	d031      	beq.n	8001e26 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc2:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001dc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dcc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001dce:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d105      	bne.n	8001de6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001dda:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	4a0c      	ldr	r2, [pc, #48]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001de0:	f023 0303 	bic.w	r3, r3, #3
 8001de4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001de6:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	4a09      	ldr	r2, [pc, #36]	; (8001e10 <HAL_RCC_OscConfig+0x824>)
 8001dec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df6:	f7ff f8ad 	bl	8000f54 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dfc:	e00c      	b.n	8001e18 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfe:	f7ff f8a9 	bl	8000f54 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d905      	bls.n	8001e18 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e00d      	b.n	8001e2c <HAL_RCC_OscConfig+0x840>
 8001e10:	40021000 	.word	0x40021000
 8001e14:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_RCC_OscConfig+0x848>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1ec      	bne.n	8001dfe <HAL_RCC_OscConfig+0x812>
 8001e24:	e001      	b.n	8001e2a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3720      	adds	r7, #32
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40021000 	.word	0x40021000

08001e38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0c8      	b.n	8001fde <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e4c:	4b66      	ldr	r3, [pc, #408]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d910      	bls.n	8001e7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5a:	4b63      	ldr	r3, [pc, #396]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 0207 	bic.w	r2, r3, #7
 8001e62:	4961      	ldr	r1, [pc, #388]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b0>)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6a:	4b5f      	ldr	r3, [pc, #380]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b0>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d001      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0b0      	b.n	8001fde <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d04c      	beq.n	8001f22 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d107      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e90:	4b56      	ldr	r3, [pc, #344]	; (8001fec <HAL_RCC_ClockConfig+0x1b4>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d121      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e09e      	b.n	8001fde <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d107      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ea8:	4b50      	ldr	r3, [pc, #320]	; (8001fec <HAL_RCC_ClockConfig+0x1b4>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d115      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e092      	b.n	8001fde <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d107      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ec0:	4b4a      	ldr	r3, [pc, #296]	; (8001fec <HAL_RCC_ClockConfig+0x1b4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d109      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e086      	b.n	8001fde <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed0:	4b46      	ldr	r3, [pc, #280]	; (8001fec <HAL_RCC_ClockConfig+0x1b4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e07e      	b.n	8001fde <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ee0:	4b42      	ldr	r3, [pc, #264]	; (8001fec <HAL_RCC_ClockConfig+0x1b4>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f023 0203 	bic.w	r2, r3, #3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	493f      	ldr	r1, [pc, #252]	; (8001fec <HAL_RCC_ClockConfig+0x1b4>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ef2:	f7ff f82f 	bl	8000f54 <HAL_GetTick>
 8001ef6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef8:	e00a      	b.n	8001f10 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efa:	f7ff f82b 	bl	8000f54 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e066      	b.n	8001fde <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f10:	4b36      	ldr	r3, [pc, #216]	; (8001fec <HAL_RCC_ClockConfig+0x1b4>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 020c 	and.w	r2, r3, #12
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d1eb      	bne.n	8001efa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d008      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2e:	4b2f      	ldr	r3, [pc, #188]	; (8001fec <HAL_RCC_ClockConfig+0x1b4>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	492c      	ldr	r1, [pc, #176]	; (8001fec <HAL_RCC_ClockConfig+0x1b4>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f40:	4b29      	ldr	r3, [pc, #164]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d210      	bcs.n	8001f70 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4e:	4b26      	ldr	r3, [pc, #152]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f023 0207 	bic.w	r2, r3, #7
 8001f56:	4924      	ldr	r1, [pc, #144]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5e:	4b22      	ldr	r3, [pc, #136]	; (8001fe8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d001      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e036      	b.n	8001fde <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d008      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_RCC_ClockConfig+0x1b4>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	4918      	ldr	r1, [pc, #96]	; (8001fec <HAL_RCC_ClockConfig+0x1b4>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d009      	beq.n	8001fae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f9a:	4b14      	ldr	r3, [pc, #80]	; (8001fec <HAL_RCC_ClockConfig+0x1b4>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4910      	ldr	r1, [pc, #64]	; (8001fec <HAL_RCC_ClockConfig+0x1b4>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fae:	f000 f825 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	4b0d      	ldr	r3, [pc, #52]	; (8001fec <HAL_RCC_ClockConfig+0x1b4>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	091b      	lsrs	r3, r3, #4
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	490c      	ldr	r1, [pc, #48]	; (8001ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc0:	5ccb      	ldrb	r3, [r1, r3]
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fca:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fce:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe ff6e 	bl	8000eb4 <HAL_InitTick>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fdc:	7afb      	ldrb	r3, [r7, #11]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40022000 	.word	0x40022000
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	08004c98 	.word	0x08004c98
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	20000004 	.word	0x20000004

08001ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b089      	sub	sp, #36	; 0x24
 8002000:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	2300      	movs	r3, #0
 8002008:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800200a:	4b3e      	ldr	r3, [pc, #248]	; (8002104 <HAL_RCC_GetSysClockFreq+0x108>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 030c 	and.w	r3, r3, #12
 8002012:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002014:	4b3b      	ldr	r3, [pc, #236]	; (8002104 <HAL_RCC_GetSysClockFreq+0x108>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <HAL_RCC_GetSysClockFreq+0x34>
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	2b0c      	cmp	r3, #12
 8002028:	d121      	bne.n	800206e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d11e      	bne.n	800206e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002030:	4b34      	ldr	r3, [pc, #208]	; (8002104 <HAL_RCC_GetSysClockFreq+0x108>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d107      	bne.n	800204c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800203c:	4b31      	ldr	r3, [pc, #196]	; (8002104 <HAL_RCC_GetSysClockFreq+0x108>)
 800203e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002042:	0a1b      	lsrs	r3, r3, #8
 8002044:	f003 030f 	and.w	r3, r3, #15
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	e005      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800204c:	4b2d      	ldr	r3, [pc, #180]	; (8002104 <HAL_RCC_GetSysClockFreq+0x108>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	091b      	lsrs	r3, r3, #4
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002058:	4a2b      	ldr	r2, [pc, #172]	; (8002108 <HAL_RCC_GetSysClockFreq+0x10c>)
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002060:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10d      	bne.n	8002084 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800206c:	e00a      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	2b04      	cmp	r3, #4
 8002072:	d102      	bne.n	800207a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002074:	4b25      	ldr	r3, [pc, #148]	; (800210c <HAL_RCC_GetSysClockFreq+0x110>)
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	e004      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	2b08      	cmp	r3, #8
 800207e:	d101      	bne.n	8002084 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002080:	4b23      	ldr	r3, [pc, #140]	; (8002110 <HAL_RCC_GetSysClockFreq+0x114>)
 8002082:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	2b0c      	cmp	r3, #12
 8002088:	d134      	bne.n	80020f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800208a:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <HAL_RCC_GetSysClockFreq+0x108>)
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d003      	beq.n	80020a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2b03      	cmp	r3, #3
 800209e:	d003      	beq.n	80020a8 <HAL_RCC_GetSysClockFreq+0xac>
 80020a0:	e005      	b.n	80020ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020a2:	4b1a      	ldr	r3, [pc, #104]	; (800210c <HAL_RCC_GetSysClockFreq+0x110>)
 80020a4:	617b      	str	r3, [r7, #20]
      break;
 80020a6:	e005      	b.n	80020b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020a8:	4b19      	ldr	r3, [pc, #100]	; (8002110 <HAL_RCC_GetSysClockFreq+0x114>)
 80020aa:	617b      	str	r3, [r7, #20]
      break;
 80020ac:	e002      	b.n	80020b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	617b      	str	r3, [r7, #20]
      break;
 80020b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020b4:	4b13      	ldr	r3, [pc, #76]	; (8002104 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	3301      	adds	r3, #1
 80020c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <HAL_RCC_GetSysClockFreq+0x108>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	0a1b      	lsrs	r3, r3, #8
 80020c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	fb02 f203 	mul.w	r2, r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020da:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <HAL_RCC_GetSysClockFreq+0x108>)
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	0e5b      	lsrs	r3, r3, #25
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	3301      	adds	r3, #1
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020f4:	69bb      	ldr	r3, [r7, #24]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3724      	adds	r7, #36	; 0x24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000
 8002108:	08004cb0 	.word	0x08004cb0
 800210c:	00f42400 	.word	0x00f42400
 8002110:	007a1200 	.word	0x007a1200

08002114 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002118:	4b03      	ldr	r3, [pc, #12]	; (8002128 <HAL_RCC_GetHCLKFreq+0x14>)
 800211a:	681b      	ldr	r3, [r3, #0]
}
 800211c:	4618      	mov	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000000 	.word	0x20000000

0800212c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002130:	f7ff fff0 	bl	8002114 <HAL_RCC_GetHCLKFreq>
 8002134:	4602      	mov	r2, r0
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	0a1b      	lsrs	r3, r3, #8
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	4904      	ldr	r1, [pc, #16]	; (8002154 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002142:	5ccb      	ldrb	r3, [r1, r3]
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800214c:	4618      	mov	r0, r3
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000
 8002154:	08004ca8 	.word	0x08004ca8

08002158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800215c:	f7ff ffda 	bl	8002114 <HAL_RCC_GetHCLKFreq>
 8002160:	4602      	mov	r2, r0
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	0adb      	lsrs	r3, r3, #11
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	4904      	ldr	r1, [pc, #16]	; (8002180 <HAL_RCC_GetPCLK2Freq+0x28>)
 800216e:	5ccb      	ldrb	r3, [r1, r3]
 8002170:	f003 031f 	and.w	r3, r3, #31
 8002174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002178:	4618      	mov	r0, r3
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40021000 	.word	0x40021000
 8002180:	08004ca8 	.word	0x08004ca8

08002184 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800218c:	2300      	movs	r3, #0
 800218e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002190:	4b2a      	ldr	r3, [pc, #168]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800219c:	f7ff f9b2 	bl	8001504 <HAL_PWREx_GetVoltageRange>
 80021a0:	6178      	str	r0, [r7, #20]
 80021a2:	e014      	b.n	80021ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021a4:	4b25      	ldr	r3, [pc, #148]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a8:	4a24      	ldr	r2, [pc, #144]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ae:	6593      	str	r3, [r2, #88]	; 0x58
 80021b0:	4b22      	ldr	r3, [pc, #136]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021bc:	f7ff f9a2 	bl	8001504 <HAL_PWREx_GetVoltageRange>
 80021c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021c2:	4b1e      	ldr	r3, [pc, #120]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c6:	4a1d      	ldr	r2, [pc, #116]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021d4:	d10b      	bne.n	80021ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b80      	cmp	r3, #128	; 0x80
 80021da:	d919      	bls.n	8002210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2ba0      	cmp	r3, #160	; 0xa0
 80021e0:	d902      	bls.n	80021e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021e2:	2302      	movs	r3, #2
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	e013      	b.n	8002210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021e8:	2301      	movs	r3, #1
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	e010      	b.n	8002210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b80      	cmp	r3, #128	; 0x80
 80021f2:	d902      	bls.n	80021fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021f4:	2303      	movs	r3, #3
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	e00a      	b.n	8002210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b80      	cmp	r3, #128	; 0x80
 80021fe:	d102      	bne.n	8002206 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002200:	2302      	movs	r3, #2
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	e004      	b.n	8002210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b70      	cmp	r3, #112	; 0x70
 800220a:	d101      	bne.n	8002210 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800220c:	2301      	movs	r3, #1
 800220e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002210:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f023 0207 	bic.w	r2, r3, #7
 8002218:	4909      	ldr	r1, [pc, #36]	; (8002240 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002220:	4b07      	ldr	r3, [pc, #28]	; (8002240 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	429a      	cmp	r2, r3
 800222c:	d001      	beq.n	8002232 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40021000 	.word	0x40021000
 8002240:	40022000 	.word	0x40022000

08002244 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800224c:	2300      	movs	r3, #0
 800224e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002250:	2300      	movs	r3, #0
 8002252:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800225c:	2b00      	cmp	r3, #0
 800225e:	d041      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002264:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002268:	d02a      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800226a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800226e:	d824      	bhi.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002270:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002274:	d008      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002276:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800227a:	d81e      	bhi.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00a      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002284:	d010      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002286:	e018      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002288:	4b86      	ldr	r3, [pc, #536]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	4a85      	ldr	r2, [pc, #532]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002292:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002294:	e015      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3304      	adds	r3, #4
 800229a:	2100      	movs	r1, #0
 800229c:	4618      	mov	r0, r3
 800229e:	f000 facd 	bl	800283c <RCCEx_PLLSAI1_Config>
 80022a2:	4603      	mov	r3, r0
 80022a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022a6:	e00c      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3320      	adds	r3, #32
 80022ac:	2100      	movs	r1, #0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 fbb6 	bl	8002a20 <RCCEx_PLLSAI2_Config>
 80022b4:	4603      	mov	r3, r0
 80022b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022b8:	e003      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	74fb      	strb	r3, [r7, #19]
      break;
 80022be:	e000      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80022c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022c2:	7cfb      	ldrb	r3, [r7, #19]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10b      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022c8:	4b76      	ldr	r3, [pc, #472]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022d6:	4973      	ldr	r1, [pc, #460]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022de:	e001      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022e0:	7cfb      	ldrb	r3, [r7, #19]
 80022e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d041      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022f8:	d02a      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80022fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022fe:	d824      	bhi.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002300:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002304:	d008      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002306:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800230a:	d81e      	bhi.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00a      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002314:	d010      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002316:	e018      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002318:	4b62      	ldr	r3, [pc, #392]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4a61      	ldr	r2, [pc, #388]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002322:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002324:	e015      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3304      	adds	r3, #4
 800232a:	2100      	movs	r1, #0
 800232c:	4618      	mov	r0, r3
 800232e:	f000 fa85 	bl	800283c <RCCEx_PLLSAI1_Config>
 8002332:	4603      	mov	r3, r0
 8002334:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002336:	e00c      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3320      	adds	r3, #32
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f000 fb6e 	bl	8002a20 <RCCEx_PLLSAI2_Config>
 8002344:	4603      	mov	r3, r0
 8002346:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002348:	e003      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	74fb      	strb	r3, [r7, #19]
      break;
 800234e:	e000      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002350:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002352:	7cfb      	ldrb	r3, [r7, #19]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10b      	bne.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002358:	4b52      	ldr	r3, [pc, #328]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002366:	494f      	ldr	r1, [pc, #316]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002368:	4313      	orrs	r3, r2
 800236a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800236e:	e001      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002370:	7cfb      	ldrb	r3, [r7, #19]
 8002372:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 80a0 	beq.w	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002382:	2300      	movs	r3, #0
 8002384:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002386:	4b47      	ldr	r3, [pc, #284]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002392:	2301      	movs	r3, #1
 8002394:	e000      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002396:	2300      	movs	r3, #0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00d      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800239c:	4b41      	ldr	r3, [pc, #260]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a0:	4a40      	ldr	r2, [pc, #256]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a6:	6593      	str	r3, [r2, #88]	; 0x58
 80023a8:	4b3e      	ldr	r3, [pc, #248]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b4:	2301      	movs	r3, #1
 80023b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023b8:	4b3b      	ldr	r3, [pc, #236]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a3a      	ldr	r2, [pc, #232]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023c4:	f7fe fdc6 	bl	8000f54 <HAL_GetTick>
 80023c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023ca:	e009      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023cc:	f7fe fdc2 	bl	8000f54 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d902      	bls.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	74fb      	strb	r3, [r7, #19]
        break;
 80023de:	e005      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023e0:	4b31      	ldr	r3, [pc, #196]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0ef      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80023ec:	7cfb      	ldrb	r3, [r7, #19]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d15c      	bne.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023f2:	4b2c      	ldr	r3, [pc, #176]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01f      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	429a      	cmp	r2, r3
 800240e:	d019      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002410:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800241a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800241c:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002422:	4a20      	ldr	r2, [pc, #128]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800242c:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002432:	4a1c      	ldr	r2, [pc, #112]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800243c:	4a19      	ldr	r2, [pc, #100]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d016      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244e:	f7fe fd81 	bl	8000f54 <HAL_GetTick>
 8002452:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002454:	e00b      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002456:	f7fe fd7d 	bl	8000f54 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	f241 3288 	movw	r2, #5000	; 0x1388
 8002464:	4293      	cmp	r3, r2
 8002466:	d902      	bls.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	74fb      	strb	r3, [r7, #19]
            break;
 800246c:	e006      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800246e:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0ec      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10c      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002482:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002488:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002492:	4904      	ldr	r1, [pc, #16]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800249a:	e009      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800249c:	7cfb      	ldrb	r3, [r7, #19]
 800249e:	74bb      	strb	r3, [r7, #18]
 80024a0:	e006      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80024a2:	bf00      	nop
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ac:	7cfb      	ldrb	r3, [r7, #19]
 80024ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024b0:	7c7b      	ldrb	r3, [r7, #17]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d105      	bne.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b6:	4ba6      	ldr	r3, [pc, #664]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ba:	4aa5      	ldr	r2, [pc, #660]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024ce:	4ba0      	ldr	r3, [pc, #640]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d4:	f023 0203 	bic.w	r2, r3, #3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024dc:	499c      	ldr	r1, [pc, #624]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00a      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024f0:	4b97      	ldr	r3, [pc, #604]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f6:	f023 020c 	bic.w	r2, r3, #12
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fe:	4994      	ldr	r1, [pc, #592]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00a      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002512:	4b8f      	ldr	r3, [pc, #572]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002518:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	498b      	ldr	r1, [pc, #556]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00a      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002534:	4b86      	ldr	r3, [pc, #536]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002542:	4983      	ldr	r1, [pc, #524]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002544:	4313      	orrs	r3, r2
 8002546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0310 	and.w	r3, r3, #16
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00a      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002556:	4b7e      	ldr	r3, [pc, #504]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002564:	497a      	ldr	r1, [pc, #488]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0320 	and.w	r3, r3, #32
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00a      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002578:	4b75      	ldr	r3, [pc, #468]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002586:	4972      	ldr	r1, [pc, #456]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00a      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800259a:	4b6d      	ldr	r3, [pc, #436]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800259c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a8:	4969      	ldr	r1, [pc, #420]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00a      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025bc:	4b64      	ldr	r3, [pc, #400]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025ca:	4961      	ldr	r1, [pc, #388]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00a      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025de:	4b5c      	ldr	r3, [pc, #368]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ec:	4958      	ldr	r1, [pc, #352]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00a      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002600:	4b53      	ldr	r3, [pc, #332]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002606:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260e:	4950      	ldr	r1, [pc, #320]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00a      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002622:	4b4b      	ldr	r3, [pc, #300]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002628:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002630:	4947      	ldr	r1, [pc, #284]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00a      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002644:	4b42      	ldr	r3, [pc, #264]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002646:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800264a:	f023 0203 	bic.w	r2, r3, #3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002652:	493f      	ldr	r1, [pc, #252]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d028      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002666:	4b3a      	ldr	r3, [pc, #232]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002674:	4936      	ldr	r1, [pc, #216]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002676:	4313      	orrs	r3, r2
 8002678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002680:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002684:	d106      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002686:	4b32      	ldr	r3, [pc, #200]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	4a31      	ldr	r2, [pc, #196]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800268c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002690:	60d3      	str	r3, [r2, #12]
 8002692:	e011      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002698:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800269c:	d10c      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3304      	adds	r3, #4
 80026a2:	2101      	movs	r1, #1
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 f8c9 	bl	800283c <RCCEx_PLLSAI1_Config>
 80026aa:	4603      	mov	r3, r0
 80026ac:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026ae:	7cfb      	ldrb	r3, [r7, #19]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80026b4:	7cfb      	ldrb	r3, [r7, #19]
 80026b6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d028      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026c4:	4b22      	ldr	r3, [pc, #136]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d2:	491f      	ldr	r1, [pc, #124]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026e2:	d106      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026e4:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4a19      	ldr	r2, [pc, #100]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ee:	60d3      	str	r3, [r2, #12]
 80026f0:	e011      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026fa:	d10c      	bne.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3304      	adds	r3, #4
 8002700:	2101      	movs	r1, #1
 8002702:	4618      	mov	r0, r3
 8002704:	f000 f89a 	bl	800283c <RCCEx_PLLSAI1_Config>
 8002708:	4603      	mov	r3, r0
 800270a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800270c:	7cfb      	ldrb	r3, [r7, #19]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002712:	7cfb      	ldrb	r3, [r7, #19]
 8002714:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d02a      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002722:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002728:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002730:	4907      	ldr	r1, [pc, #28]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002732:	4313      	orrs	r3, r2
 8002734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800273c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002740:	d108      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002742:	4b03      	ldr	r3, [pc, #12]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	4a02      	ldr	r2, [pc, #8]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002748:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800274c:	60d3      	str	r3, [r2, #12]
 800274e:	e013      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002750:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002758:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800275c:	d10c      	bne.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3304      	adds	r3, #4
 8002762:	2101      	movs	r1, #1
 8002764:	4618      	mov	r0, r3
 8002766:	f000 f869 	bl	800283c <RCCEx_PLLSAI1_Config>
 800276a:	4603      	mov	r3, r0
 800276c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800276e:	7cfb      	ldrb	r3, [r7, #19]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002774:	7cfb      	ldrb	r3, [r7, #19]
 8002776:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d02f      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002784:	4b2c      	ldr	r3, [pc, #176]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002792:	4929      	ldr	r1, [pc, #164]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800279e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027a2:	d10d      	bne.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3304      	adds	r3, #4
 80027a8:	2102      	movs	r1, #2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 f846 	bl	800283c <RCCEx_PLLSAI1_Config>
 80027b0:	4603      	mov	r3, r0
 80027b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027b4:	7cfb      	ldrb	r3, [r7, #19]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d014      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80027ba:	7cfb      	ldrb	r3, [r7, #19]
 80027bc:	74bb      	strb	r3, [r7, #18]
 80027be:	e011      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027c8:	d10c      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3320      	adds	r3, #32
 80027ce:	2102      	movs	r1, #2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 f925 	bl	8002a20 <RCCEx_PLLSAI2_Config>
 80027d6:	4603      	mov	r3, r0
 80027d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027da:	7cfb      	ldrb	r3, [r7, #19]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80027e0:	7cfb      	ldrb	r3, [r7, #19]
 80027e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00b      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027f0:	4b11      	ldr	r3, [pc, #68]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80027f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002800:	490d      	ldr	r1, [pc, #52]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00b      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002814:	4b08      	ldr	r3, [pc, #32]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002824:	4904      	ldr	r1, [pc, #16]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800282c:	7cbb      	ldrb	r3, [r7, #18]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000

0800283c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800284a:	4b74      	ldr	r3, [pc, #464]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d018      	beq.n	8002888 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002856:	4b71      	ldr	r3, [pc, #452]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f003 0203 	and.w	r2, r3, #3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d10d      	bne.n	8002882 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
       ||
 800286a:	2b00      	cmp	r3, #0
 800286c:	d009      	beq.n	8002882 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800286e:	4b6b      	ldr	r3, [pc, #428]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	091b      	lsrs	r3, r3, #4
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
       ||
 800287e:	429a      	cmp	r2, r3
 8002880:	d047      	beq.n	8002912 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
 8002886:	e044      	b.n	8002912 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b03      	cmp	r3, #3
 800288e:	d018      	beq.n	80028c2 <RCCEx_PLLSAI1_Config+0x86>
 8002890:	2b03      	cmp	r3, #3
 8002892:	d825      	bhi.n	80028e0 <RCCEx_PLLSAI1_Config+0xa4>
 8002894:	2b01      	cmp	r3, #1
 8002896:	d002      	beq.n	800289e <RCCEx_PLLSAI1_Config+0x62>
 8002898:	2b02      	cmp	r3, #2
 800289a:	d009      	beq.n	80028b0 <RCCEx_PLLSAI1_Config+0x74>
 800289c:	e020      	b.n	80028e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800289e:	4b5f      	ldr	r3, [pc, #380]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d11d      	bne.n	80028e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ae:	e01a      	b.n	80028e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028b0:	4b5a      	ldr	r3, [pc, #360]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d116      	bne.n	80028ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028c0:	e013      	b.n	80028ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028c2:	4b56      	ldr	r3, [pc, #344]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10f      	bne.n	80028ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028ce:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d109      	bne.n	80028ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028de:	e006      	b.n	80028ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
      break;
 80028e4:	e004      	b.n	80028f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028e6:	bf00      	nop
 80028e8:	e002      	b.n	80028f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028ea:	bf00      	nop
 80028ec:	e000      	b.n	80028f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10d      	bne.n	8002912 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028f6:	4b49      	ldr	r3, [pc, #292]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6819      	ldr	r1, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	3b01      	subs	r3, #1
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	430b      	orrs	r3, r1
 800290c:	4943      	ldr	r1, [pc, #268]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 800290e:	4313      	orrs	r3, r2
 8002910:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d17c      	bne.n	8002a12 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002918:	4b40      	ldr	r3, [pc, #256]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a3f      	ldr	r2, [pc, #252]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 800291e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002922:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002924:	f7fe fb16 	bl	8000f54 <HAL_GetTick>
 8002928:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800292a:	e009      	b.n	8002940 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800292c:	f7fe fb12 	bl	8000f54 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d902      	bls.n	8002940 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	73fb      	strb	r3, [r7, #15]
        break;
 800293e:	e005      	b.n	800294c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002940:	4b36      	ldr	r3, [pc, #216]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1ef      	bne.n	800292c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800294c:	7bfb      	ldrb	r3, [r7, #15]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d15f      	bne.n	8002a12 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d110      	bne.n	800297a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002958:	4b30      	ldr	r3, [pc, #192]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002960:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6892      	ldr	r2, [r2, #8]
 8002968:	0211      	lsls	r1, r2, #8
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	68d2      	ldr	r2, [r2, #12]
 800296e:	06d2      	lsls	r2, r2, #27
 8002970:	430a      	orrs	r2, r1
 8002972:	492a      	ldr	r1, [pc, #168]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002974:	4313      	orrs	r3, r2
 8002976:	610b      	str	r3, [r1, #16]
 8002978:	e027      	b.n	80029ca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d112      	bne.n	80029a6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002980:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002988:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6892      	ldr	r2, [r2, #8]
 8002990:	0211      	lsls	r1, r2, #8
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6912      	ldr	r2, [r2, #16]
 8002996:	0852      	lsrs	r2, r2, #1
 8002998:	3a01      	subs	r2, #1
 800299a:	0552      	lsls	r2, r2, #21
 800299c:	430a      	orrs	r2, r1
 800299e:	491f      	ldr	r1, [pc, #124]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	610b      	str	r3, [r1, #16]
 80029a4:	e011      	b.n	80029ca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029a6:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6892      	ldr	r2, [r2, #8]
 80029b6:	0211      	lsls	r1, r2, #8
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6952      	ldr	r2, [r2, #20]
 80029bc:	0852      	lsrs	r2, r2, #1
 80029be:	3a01      	subs	r2, #1
 80029c0:	0652      	lsls	r2, r2, #25
 80029c2:	430a      	orrs	r2, r1
 80029c4:	4915      	ldr	r1, [pc, #84]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029ca:	4b14      	ldr	r3, [pc, #80]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a13      	ldr	r2, [pc, #76]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d6:	f7fe fabd 	bl	8000f54 <HAL_GetTick>
 80029da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029dc:	e009      	b.n	80029f2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029de:	f7fe fab9 	bl	8000f54 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d902      	bls.n	80029f2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	73fb      	strb	r3, [r7, #15]
          break;
 80029f0:	e005      	b.n	80029fe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029f2:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0ef      	beq.n	80029de <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80029fe:	7bfb      	ldrb	r3, [r7, #15]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d106      	bne.n	8002a12 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a04:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	4903      	ldr	r1, [pc, #12]	; (8002a1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40021000 	.word	0x40021000

08002a20 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a2e:	4b69      	ldr	r3, [pc, #420]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d018      	beq.n	8002a6c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a3a:	4b66      	ldr	r3, [pc, #408]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f003 0203 	and.w	r2, r3, #3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d10d      	bne.n	8002a66 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d009      	beq.n	8002a66 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a52:	4b60      	ldr	r3, [pc, #384]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	091b      	lsrs	r3, r3, #4
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
       ||
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d047      	beq.n	8002af6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	73fb      	strb	r3, [r7, #15]
 8002a6a:	e044      	b.n	8002af6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d018      	beq.n	8002aa6 <RCCEx_PLLSAI2_Config+0x86>
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d825      	bhi.n	8002ac4 <RCCEx_PLLSAI2_Config+0xa4>
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d002      	beq.n	8002a82 <RCCEx_PLLSAI2_Config+0x62>
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d009      	beq.n	8002a94 <RCCEx_PLLSAI2_Config+0x74>
 8002a80:	e020      	b.n	8002ac4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a82:	4b54      	ldr	r3, [pc, #336]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d11d      	bne.n	8002aca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a92:	e01a      	b.n	8002aca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a94:	4b4f      	ldr	r3, [pc, #316]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d116      	bne.n	8002ace <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aa4:	e013      	b.n	8002ace <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002aa6:	4b4b      	ldr	r3, [pc, #300]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10f      	bne.n	8002ad2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ab2:	4b48      	ldr	r3, [pc, #288]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d109      	bne.n	8002ad2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ac2:	e006      	b.n	8002ad2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac8:	e004      	b.n	8002ad4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aca:	bf00      	nop
 8002acc:	e002      	b.n	8002ad4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ace:	bf00      	nop
 8002ad0:	e000      	b.n	8002ad4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ad2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10d      	bne.n	8002af6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ada:	4b3e      	ldr	r3, [pc, #248]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6819      	ldr	r1, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	430b      	orrs	r3, r1
 8002af0:	4938      	ldr	r1, [pc, #224]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d166      	bne.n	8002bca <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002afc:	4b35      	ldr	r3, [pc, #212]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a34      	ldr	r2, [pc, #208]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b08:	f7fe fa24 	bl	8000f54 <HAL_GetTick>
 8002b0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b0e:	e009      	b.n	8002b24 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b10:	f7fe fa20 	bl	8000f54 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d902      	bls.n	8002b24 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	73fb      	strb	r3, [r7, #15]
        break;
 8002b22:	e005      	b.n	8002b30 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b24:	4b2b      	ldr	r3, [pc, #172]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1ef      	bne.n	8002b10 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d149      	bne.n	8002bca <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d110      	bne.n	8002b5e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b3c:	4b25      	ldr	r3, [pc, #148]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002b44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6892      	ldr	r2, [r2, #8]
 8002b4c:	0211      	lsls	r1, r2, #8
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68d2      	ldr	r2, [r2, #12]
 8002b52:	06d2      	lsls	r2, r2, #27
 8002b54:	430a      	orrs	r2, r1
 8002b56:	491f      	ldr	r1, [pc, #124]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	614b      	str	r3, [r1, #20]
 8002b5c:	e011      	b.n	8002b82 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b5e:	4b1d      	ldr	r3, [pc, #116]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b66:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6892      	ldr	r2, [r2, #8]
 8002b6e:	0211      	lsls	r1, r2, #8
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6912      	ldr	r2, [r2, #16]
 8002b74:	0852      	lsrs	r2, r2, #1
 8002b76:	3a01      	subs	r2, #1
 8002b78:	0652      	lsls	r2, r2, #25
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	4915      	ldr	r1, [pc, #84]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b82:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a13      	ldr	r2, [pc, #76]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8e:	f7fe f9e1 	bl	8000f54 <HAL_GetTick>
 8002b92:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b94:	e009      	b.n	8002baa <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b96:	f7fe f9dd 	bl	8000f54 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d902      	bls.n	8002baa <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	73fb      	strb	r3, [r7, #15]
          break;
 8002ba8:	e005      	b.n	8002bb6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002baa:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0ef      	beq.n	8002b96 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d106      	bne.n	8002bca <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bbe:	695a      	ldr	r2, [r3, #20]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	4903      	ldr	r1, [pc, #12]	; (8002bd4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40021000 	.word	0x40021000

08002bd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e095      	b.n	8002d16 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d108      	bne.n	8002c04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bfa:	d009      	beq.n	8002c10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	61da      	str	r2, [r3, #28]
 8002c02:	e005      	b.n	8002c10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7fe f82c 	bl	8000c88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c46:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c50:	d902      	bls.n	8002c58 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	e002      	b.n	8002c5e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c5c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002c66:	d007      	beq.n	8002c78 <HAL_SPI_Init+0xa0>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c70:	d002      	beq.n	8002c78 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cba:	ea42 0103 	orr.w	r1, r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	0c1b      	lsrs	r3, r3, #16
 8002cd4:	f003 0204 	and.w	r2, r3, #4
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002cf4:	ea42 0103 	orr.w	r1, r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b088      	sub	sp, #32
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	603b      	str	r3, [r7, #0]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_SPI_Transmit+0x22>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e158      	b.n	8002ff2 <HAL_SPI_Transmit+0x2d4>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d48:	f7fe f904 	bl	8000f54 <HAL_GetTick>
 8002d4c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d4e:	88fb      	ldrh	r3, [r7, #6]
 8002d50:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d002      	beq.n	8002d64 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d62:	e13d      	b.n	8002fe0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <HAL_SPI_Transmit+0x52>
 8002d6a:	88fb      	ldrh	r3, [r7, #6]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d102      	bne.n	8002d76 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d74:	e134      	b.n	8002fe0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2203      	movs	r2, #3
 8002d7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	88fa      	ldrh	r2, [r7, #6]
 8002d8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	88fa      	ldrh	r2, [r7, #6]
 8002d94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dc0:	d10f      	bne.n	8002de2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002de0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dec:	2b40      	cmp	r3, #64	; 0x40
 8002dee:	d007      	beq.n	8002e00 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e08:	d94b      	bls.n	8002ea2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <HAL_SPI_Transmit+0xfa>
 8002e12:	8afb      	ldrh	r3, [r7, #22]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d13e      	bne.n	8002e96 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1c:	881a      	ldrh	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e28:	1c9a      	adds	r2, r3, #2
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e3c:	e02b      	b.n	8002e96 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d112      	bne.n	8002e72 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e50:	881a      	ldrh	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5c:	1c9a      	adds	r2, r3, #2
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e70:	e011      	b.n	8002e96 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e72:	f7fe f86f 	bl	8000f54 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d803      	bhi.n	8002e8a <HAL_SPI_Transmit+0x16c>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e88:	d102      	bne.n	8002e90 <HAL_SPI_Transmit+0x172>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d102      	bne.n	8002e96 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e94:	e0a4      	b.n	8002fe0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1ce      	bne.n	8002e3e <HAL_SPI_Transmit+0x120>
 8002ea0:	e07c      	b.n	8002f9c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <HAL_SPI_Transmit+0x192>
 8002eaa:	8afb      	ldrh	r3, [r7, #22]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d170      	bne.n	8002f92 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d912      	bls.n	8002ee0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	881a      	ldrh	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eca:	1c9a      	adds	r2, r3, #2
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	3b02      	subs	r3, #2
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ede:	e058      	b.n	8002f92 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	330c      	adds	r3, #12
 8002eea:	7812      	ldrb	r2, [r2, #0]
 8002eec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002f06:	e044      	b.n	8002f92 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d12b      	bne.n	8002f6e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d912      	bls.n	8002f46 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f24:	881a      	ldrh	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	1c9a      	adds	r2, r3, #2
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b02      	subs	r3, #2
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f44:	e025      	b.n	8002f92 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	330c      	adds	r3, #12
 8002f50:	7812      	ldrb	r2, [r2, #0]
 8002f52:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f6c:	e011      	b.n	8002f92 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f6e:	f7fd fff1 	bl	8000f54 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d803      	bhi.n	8002f86 <HAL_SPI_Transmit+0x268>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f84:	d102      	bne.n	8002f8c <HAL_SPI_Transmit+0x26e>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d102      	bne.n	8002f92 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f90:	e026      	b.n	8002fe0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1b5      	bne.n	8002f08 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	6839      	ldr	r1, [r7, #0]
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 fcdf 	bl	8003964 <SPI_EndRxTxTransaction>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10a      	bne.n	8002fd0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fba:	2300      	movs	r3, #0
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	77fb      	strb	r3, [r7, #31]
 8002fdc:	e000      	b.n	8002fe0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002fde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002ff0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3720      	adds	r7, #32
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b088      	sub	sp, #32
 8002ffe:	af02      	add	r7, sp, #8
 8003000:	60f8      	str	r0, [r7, #12]
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	603b      	str	r3, [r7, #0]
 8003006:	4613      	mov	r3, r2
 8003008:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003016:	d112      	bne.n	800303e <HAL_SPI_Receive+0x44>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10e      	bne.n	800303e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2204      	movs	r2, #4
 8003024:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003028:	88fa      	ldrh	r2, [r7, #6]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	4613      	mov	r3, r2
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	68b9      	ldr	r1, [r7, #8]
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 f910 	bl	800325a <HAL_SPI_TransmitReceive>
 800303a:	4603      	mov	r3, r0
 800303c:	e109      	b.n	8003252 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_SPI_Receive+0x52>
 8003048:	2302      	movs	r3, #2
 800304a:	e102      	b.n	8003252 <HAL_SPI_Receive+0x258>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003054:	f7fd ff7e 	bl	8000f54 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b01      	cmp	r3, #1
 8003064:	d002      	beq.n	800306c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003066:	2302      	movs	r3, #2
 8003068:	75fb      	strb	r3, [r7, #23]
    goto error;
 800306a:	e0e9      	b.n	8003240 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <HAL_SPI_Receive+0x7e>
 8003072:	88fb      	ldrh	r3, [r7, #6]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d102      	bne.n	800307e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800307c:	e0e0      	b.n	8003240 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2204      	movs	r2, #4
 8003082:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	88fa      	ldrh	r2, [r7, #6]
 8003096:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	88fa      	ldrh	r2, [r7, #6]
 800309e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030c8:	d908      	bls.n	80030dc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	e007      	b.n	80030ec <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030ea:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f4:	d10f      	bne.n	8003116 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003104:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003114:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003120:	2b40      	cmp	r3, #64	; 0x40
 8003122:	d007      	beq.n	8003134 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003132:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800313c:	d867      	bhi.n	800320e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800313e:	e030      	b.n	80031a2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b01      	cmp	r3, #1
 800314c:	d117      	bne.n	800317e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f103 020c 	add.w	r2, r3, #12
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	7812      	ldrb	r2, [r2, #0]
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003170:	b29b      	uxth	r3, r3
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800317c:	e011      	b.n	80031a2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800317e:	f7fd fee9 	bl	8000f54 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d803      	bhi.n	8003196 <HAL_SPI_Receive+0x19c>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003194:	d102      	bne.n	800319c <HAL_SPI_Receive+0x1a2>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d102      	bne.n	80031a2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80031a0:	e04e      	b.n	8003240 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1c8      	bne.n	8003140 <HAL_SPI_Receive+0x146>
 80031ae:	e034      	b.n	800321a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d115      	bne.n	80031ea <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	b292      	uxth	r2, r2
 80031ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	1c9a      	adds	r2, r3, #2
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031dc:	b29b      	uxth	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80031e8:	e011      	b.n	800320e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031ea:	f7fd feb3 	bl	8000f54 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d803      	bhi.n	8003202 <HAL_SPI_Receive+0x208>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003200:	d102      	bne.n	8003208 <HAL_SPI_Receive+0x20e>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d102      	bne.n	800320e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800320c:	e018      	b.n	8003240 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1ca      	bne.n	80031b0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	6839      	ldr	r1, [r7, #0]
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 fb48 	bl	80038b4 <SPI_EndRxTransaction>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2220      	movs	r2, #32
 800322e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	75fb      	strb	r3, [r7, #23]
 800323c:	e000      	b.n	8003240 <HAL_SPI_Receive+0x246>
  }

error :
 800323e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003250:	7dfb      	ldrb	r3, [r7, #23]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b08a      	sub	sp, #40	; 0x28
 800325e:	af00      	add	r7, sp, #0
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	607a      	str	r2, [r7, #4]
 8003266:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003268:	2301      	movs	r3, #1
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_SPI_TransmitReceive+0x26>
 800327c:	2302      	movs	r3, #2
 800327e:	e1fb      	b.n	8003678 <HAL_SPI_TransmitReceive+0x41e>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003288:	f7fd fe64 	bl	8000f54 <HAL_GetTick>
 800328c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003294:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800329c:	887b      	ldrh	r3, [r7, #2]
 800329e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80032a0:	887b      	ldrh	r3, [r7, #2]
 80032a2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032a4:	7efb      	ldrb	r3, [r7, #27]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d00e      	beq.n	80032c8 <HAL_SPI_TransmitReceive+0x6e>
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032b0:	d106      	bne.n	80032c0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d102      	bne.n	80032c0 <HAL_SPI_TransmitReceive+0x66>
 80032ba:	7efb      	ldrb	r3, [r7, #27]
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d003      	beq.n	80032c8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80032c0:	2302      	movs	r3, #2
 80032c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80032c6:	e1cd      	b.n	8003664 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <HAL_SPI_TransmitReceive+0x80>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <HAL_SPI_TransmitReceive+0x80>
 80032d4:	887b      	ldrh	r3, [r7, #2]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d103      	bne.n	80032e2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80032e0:	e1c0      	b.n	8003664 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d003      	beq.n	80032f6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2205      	movs	r2, #5
 80032f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	887a      	ldrh	r2, [r7, #2]
 8003306:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	887a      	ldrh	r2, [r7, #2]
 800330e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	887a      	ldrh	r2, [r7, #2]
 800331c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	887a      	ldrh	r2, [r7, #2]
 8003322:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003338:	d802      	bhi.n	8003340 <HAL_SPI_TransmitReceive+0xe6>
 800333a:	8a3b      	ldrh	r3, [r7, #16]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d908      	bls.n	8003352 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800334e:	605a      	str	r2, [r3, #4]
 8003350:	e007      	b.n	8003362 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003360:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336c:	2b40      	cmp	r3, #64	; 0x40
 800336e:	d007      	beq.n	8003380 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800337e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003388:	d97c      	bls.n	8003484 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <HAL_SPI_TransmitReceive+0x13e>
 8003392:	8a7b      	ldrh	r3, [r7, #18]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d169      	bne.n	800346c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	881a      	ldrh	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a8:	1c9a      	adds	r2, r3, #2
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033bc:	e056      	b.n	800346c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d11b      	bne.n	8003404 <HAL_SPI_TransmitReceive+0x1aa>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d016      	beq.n	8003404 <HAL_SPI_TransmitReceive+0x1aa>
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d113      	bne.n	8003404 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	881a      	ldrh	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ec:	1c9a      	adds	r2, r3, #2
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b01      	cmp	r3, #1
 8003410:	d11c      	bne.n	800344c <HAL_SPI_TransmitReceive+0x1f2>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003418:	b29b      	uxth	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d016      	beq.n	800344c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68da      	ldr	r2, [r3, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	b292      	uxth	r2, r2
 800342a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	1c9a      	adds	r2, r3, #2
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800343c:	b29b      	uxth	r3, r3
 800343e:	3b01      	subs	r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003448:	2301      	movs	r3, #1
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800344c:	f7fd fd82 	bl	8000f54 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003458:	429a      	cmp	r2, r3
 800345a:	d807      	bhi.n	800346c <HAL_SPI_TransmitReceive+0x212>
 800345c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003462:	d003      	beq.n	800346c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800346a:	e0fb      	b.n	8003664 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003470:	b29b      	uxth	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1a3      	bne.n	80033be <HAL_SPI_TransmitReceive+0x164>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d19d      	bne.n	80033be <HAL_SPI_TransmitReceive+0x164>
 8003482:	e0df      	b.n	8003644 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <HAL_SPI_TransmitReceive+0x23a>
 800348c:	8a7b      	ldrh	r3, [r7, #18]
 800348e:	2b01      	cmp	r3, #1
 8003490:	f040 80cb 	bne.w	800362a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	d912      	bls.n	80034c4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a2:	881a      	ldrh	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ae:	1c9a      	adds	r2, r3, #2
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	3b02      	subs	r3, #2
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034c2:	e0b2      	b.n	800362a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	330c      	adds	r3, #12
 80034ce:	7812      	ldrb	r2, [r2, #0]
 80034d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034ea:	e09e      	b.n	800362a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d134      	bne.n	8003564 <HAL_SPI_TransmitReceive+0x30a>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034fe:	b29b      	uxth	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d02f      	beq.n	8003564 <HAL_SPI_TransmitReceive+0x30a>
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	2b01      	cmp	r3, #1
 8003508:	d12c      	bne.n	8003564 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b01      	cmp	r3, #1
 8003512:	d912      	bls.n	800353a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003518:	881a      	ldrh	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	1c9a      	adds	r2, r3, #2
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b02      	subs	r3, #2
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003538:	e012      	b.n	8003560 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	330c      	adds	r3, #12
 8003544:	7812      	ldrb	r2, [r2, #0]
 8003546:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003556:	b29b      	uxth	r3, r3
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b01      	cmp	r3, #1
 8003570:	d148      	bne.n	8003604 <HAL_SPI_TransmitReceive+0x3aa>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003578:	b29b      	uxth	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d042      	beq.n	8003604 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003584:	b29b      	uxth	r3, r3
 8003586:	2b01      	cmp	r3, #1
 8003588:	d923      	bls.n	80035d2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	b292      	uxth	r2, r2
 8003596:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	1c9a      	adds	r2, r3, #2
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	3b02      	subs	r3, #2
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d81f      	bhi.n	8003600 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035ce:	605a      	str	r2, [r3, #4]
 80035d0:	e016      	b.n	8003600 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f103 020c 	add.w	r2, r3, #12
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	7812      	ldrb	r2, [r2, #0]
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003600:	2301      	movs	r3, #1
 8003602:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003604:	f7fd fca6 	bl	8000f54 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003610:	429a      	cmp	r2, r3
 8003612:	d803      	bhi.n	800361c <HAL_SPI_TransmitReceive+0x3c2>
 8003614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361a:	d102      	bne.n	8003622 <HAL_SPI_TransmitReceive+0x3c8>
 800361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361e:	2b00      	cmp	r3, #0
 8003620:	d103      	bne.n	800362a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003628:	e01c      	b.n	8003664 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800362e:	b29b      	uxth	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	f47f af5b 	bne.w	80034ec <HAL_SPI_TransmitReceive+0x292>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	f47f af54 	bne.w	80034ec <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 f98b 	bl	8003964 <SPI_EndRxTxTransaction>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d006      	beq.n	8003662 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2220      	movs	r2, #32
 800365e:	661a      	str	r2, [r3, #96]	; 0x60
 8003660:	e000      	b.n	8003664 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003662:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003674:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003678:	4618      	mov	r0, r3
 800367a:	3728      	adds	r7, #40	; 0x28
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	603b      	str	r3, [r7, #0]
 800368c:	4613      	mov	r3, r2
 800368e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003690:	f7fd fc60 	bl	8000f54 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	4413      	add	r3, r2
 800369e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036a0:	f7fd fc58 	bl	8000f54 <HAL_GetTick>
 80036a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036a6:	4b39      	ldr	r3, [pc, #228]	; (800378c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	015b      	lsls	r3, r3, #5
 80036ac:	0d1b      	lsrs	r3, r3, #20
 80036ae:	69fa      	ldr	r2, [r7, #28]
 80036b0:	fb02 f303 	mul.w	r3, r2, r3
 80036b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036b6:	e054      	b.n	8003762 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036be:	d050      	beq.n	8003762 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036c0:	f7fd fc48 	bl	8000f54 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	69fa      	ldr	r2, [r7, #28]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d902      	bls.n	80036d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d13d      	bne.n	8003752 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036ee:	d111      	bne.n	8003714 <SPI_WaitFlagStateUntilTimeout+0x94>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036f8:	d004      	beq.n	8003704 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003702:	d107      	bne.n	8003714 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003712:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003718:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800371c:	d10f      	bne.n	800373e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800373c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e017      	b.n	8003782 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	3b01      	subs	r3, #1
 8003760:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4013      	ands	r3, r2
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	429a      	cmp	r2, r3
 8003770:	bf0c      	ite	eq
 8003772:	2301      	moveq	r3, #1
 8003774:	2300      	movne	r3, #0
 8003776:	b2db      	uxtb	r3, r3
 8003778:	461a      	mov	r2, r3
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	429a      	cmp	r2, r3
 800377e:	d19b      	bne.n	80036b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3720      	adds	r7, #32
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	20000000 	.word	0x20000000

08003790 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800379e:	f7fd fbd9 	bl	8000f54 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a6:	1a9b      	subs	r3, r3, r2
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	4413      	add	r3, r2
 80037ac:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037ae:	f7fd fbd1 	bl	8000f54 <HAL_GetTick>
 80037b2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80037b4:	4b3e      	ldr	r3, [pc, #248]	; (80038b0 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	4613      	mov	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	00da      	lsls	r2, r3, #3
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	0d1b      	lsrs	r3, r3, #20
 80037c4:	69fa      	ldr	r2, [r7, #28]
 80037c6:	fb02 f303 	mul.w	r3, r2, r3
 80037ca:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80037cc:	e062      	b.n	8003894 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80037d4:	d109      	bne.n	80037ea <SPI_WaitFifoStateUntilTimeout+0x5a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d106      	bne.n	80037ea <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	330c      	adds	r3, #12
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80037e8:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f0:	d050      	beq.n	8003894 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037f2:	f7fd fbaf 	bl	8000f54 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	69fa      	ldr	r2, [r7, #28]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d902      	bls.n	8003808 <SPI_WaitFifoStateUntilTimeout+0x78>
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d13d      	bne.n	8003884 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003816:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003820:	d111      	bne.n	8003846 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800382a:	d004      	beq.n	8003836 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003834:	d107      	bne.n	8003846 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003844:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800384e:	d10f      	bne.n	8003870 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800386e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e010      	b.n	80038a6 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	3b01      	subs	r3, #1
 8003892:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	4013      	ands	r3, r2
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d194      	bne.n	80037ce <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3720      	adds	r7, #32
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20000000 	.word	0x20000000

080038b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af02      	add	r7, sp, #8
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038c8:	d111      	bne.n	80038ee <SPI_EndRxTransaction+0x3a>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d2:	d004      	beq.n	80038de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038dc:	d107      	bne.n	80038ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ec:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2200      	movs	r2, #0
 80038f6:	2180      	movs	r1, #128	; 0x80
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f7ff fec1 	bl	8003680 <SPI_WaitFlagStateUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d007      	beq.n	8003914 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003908:	f043 0220 	orr.w	r2, r3, #32
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e023      	b.n	800395c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800391c:	d11d      	bne.n	800395a <SPI_EndRxTransaction+0xa6>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003926:	d004      	beq.n	8003932 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003930:	d113      	bne.n	800395a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2200      	movs	r2, #0
 800393a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f7ff ff26 	bl	8003790 <SPI_WaitFifoStateUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d007      	beq.n	800395a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800394e:	f043 0220 	orr.w	r2, r3, #32
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e000      	b.n	800395c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af02      	add	r7, sp, #8
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2200      	movs	r2, #0
 8003978:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f7ff ff07 	bl	8003790 <SPI_WaitFifoStateUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d007      	beq.n	8003998 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800398c:	f043 0220 	orr.w	r2, r3, #32
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e027      	b.n	80039e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2200      	movs	r2, #0
 80039a0:	2180      	movs	r1, #128	; 0x80
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f7ff fe6c 	bl	8003680 <SPI_WaitFlagStateUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d007      	beq.n	80039be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b2:	f043 0220 	orr.w	r2, r3, #32
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e014      	b.n	80039e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f7ff fee0 	bl	8003790 <SPI_WaitFifoStateUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d007      	beq.n	80039e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039da:	f043 0220 	orr.w	r2, r3, #32
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e000      	b.n	80039e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e040      	b.n	8003a84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d106      	bne.n	8003a18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fd f8d8 	bl	8000bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2224      	movs	r2, #36	; 0x24
 8003a1c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0201 	bic.w	r2, r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f8c0 	bl	8003bb4 <UART_SetConfig>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e022      	b.n	8003a84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d002      	beq.n	8003a4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fb3e 	bl	80040c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0201 	orr.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 fbc5 	bl	800420c <UART_CheckIdleState>
 8003a82:	4603      	mov	r3, r0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08a      	sub	sp, #40	; 0x28
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aa0:	2b20      	cmp	r3, #32
 8003aa2:	f040 8082 	bne.w	8003baa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <HAL_UART_Transmit+0x26>
 8003aac:	88fb      	ldrh	r3, [r7, #6]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e07a      	b.n	8003bac <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_UART_Transmit+0x38>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e073      	b.n	8003bac <HAL_UART_Transmit+0x120>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2221      	movs	r2, #33	; 0x21
 8003ad8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ada:	f7fd fa3b 	bl	8000f54 <HAL_GetTick>
 8003ade:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	88fa      	ldrh	r2, [r7, #6]
 8003ae4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	88fa      	ldrh	r2, [r7, #6]
 8003aec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af8:	d108      	bne.n	8003b0c <HAL_UART_Transmit+0x80>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d104      	bne.n	8003b0c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	61bb      	str	r3, [r7, #24]
 8003b0a:	e003      	b.n	8003b14 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003b1c:	e02d      	b.n	8003b7a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2200      	movs	r2, #0
 8003b26:	2180      	movs	r1, #128	; 0x80
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 fbb8 	bl	800429e <UART_WaitOnFlagUntilTimeout>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e039      	b.n	8003bac <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10b      	bne.n	8003b56 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	881a      	ldrh	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b4a:	b292      	uxth	r2, r2
 8003b4c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	3302      	adds	r3, #2
 8003b52:	61bb      	str	r3, [r7, #24]
 8003b54:	e008      	b.n	8003b68 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	781a      	ldrb	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	b292      	uxth	r2, r2
 8003b60:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	3301      	adds	r3, #1
 8003b66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1cb      	bne.n	8003b1e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2140      	movs	r1, #64	; 0x40
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 fb84 	bl	800429e <UART_WaitOnFlagUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e005      	b.n	8003bac <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	e000      	b.n	8003bac <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003baa:	2302      	movs	r3, #2
  }
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3720      	adds	r7, #32
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bb4:	b5b0      	push	{r4, r5, r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	4bad      	ldr	r3, [pc, #692]	; (8003e94 <UART_SetConfig+0x2e0>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6812      	ldr	r2, [r2, #0]
 8003be6:	69f9      	ldr	r1, [r7, #28]
 8003be8:	430b      	orrs	r3, r1
 8003bea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4aa2      	ldr	r2, [pc, #648]	; (8003e98 <UART_SetConfig+0x2e4>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d004      	beq.n	8003c1c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69fa      	ldr	r2, [r7, #28]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a99      	ldr	r2, [pc, #612]	; (8003e9c <UART_SetConfig+0x2e8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d121      	bne.n	8003c7e <UART_SetConfig+0xca>
 8003c3a:	4b99      	ldr	r3, [pc, #612]	; (8003ea0 <UART_SetConfig+0x2ec>)
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c40:	f003 0303 	and.w	r3, r3, #3
 8003c44:	2b03      	cmp	r3, #3
 8003c46:	d817      	bhi.n	8003c78 <UART_SetConfig+0xc4>
 8003c48:	a201      	add	r2, pc, #4	; (adr r2, 8003c50 <UART_SetConfig+0x9c>)
 8003c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4e:	bf00      	nop
 8003c50:	08003c61 	.word	0x08003c61
 8003c54:	08003c6d 	.word	0x08003c6d
 8003c58:	08003c67 	.word	0x08003c67
 8003c5c:	08003c73 	.word	0x08003c73
 8003c60:	2301      	movs	r3, #1
 8003c62:	76fb      	strb	r3, [r7, #27]
 8003c64:	e0e7      	b.n	8003e36 <UART_SetConfig+0x282>
 8003c66:	2302      	movs	r3, #2
 8003c68:	76fb      	strb	r3, [r7, #27]
 8003c6a:	e0e4      	b.n	8003e36 <UART_SetConfig+0x282>
 8003c6c:	2304      	movs	r3, #4
 8003c6e:	76fb      	strb	r3, [r7, #27]
 8003c70:	e0e1      	b.n	8003e36 <UART_SetConfig+0x282>
 8003c72:	2308      	movs	r3, #8
 8003c74:	76fb      	strb	r3, [r7, #27]
 8003c76:	e0de      	b.n	8003e36 <UART_SetConfig+0x282>
 8003c78:	2310      	movs	r3, #16
 8003c7a:	76fb      	strb	r3, [r7, #27]
 8003c7c:	e0db      	b.n	8003e36 <UART_SetConfig+0x282>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a88      	ldr	r2, [pc, #544]	; (8003ea4 <UART_SetConfig+0x2f0>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d132      	bne.n	8003cee <UART_SetConfig+0x13a>
 8003c88:	4b85      	ldr	r3, [pc, #532]	; (8003ea0 <UART_SetConfig+0x2ec>)
 8003c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8e:	f003 030c 	and.w	r3, r3, #12
 8003c92:	2b0c      	cmp	r3, #12
 8003c94:	d828      	bhi.n	8003ce8 <UART_SetConfig+0x134>
 8003c96:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <UART_SetConfig+0xe8>)
 8003c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9c:	08003cd1 	.word	0x08003cd1
 8003ca0:	08003ce9 	.word	0x08003ce9
 8003ca4:	08003ce9 	.word	0x08003ce9
 8003ca8:	08003ce9 	.word	0x08003ce9
 8003cac:	08003cdd 	.word	0x08003cdd
 8003cb0:	08003ce9 	.word	0x08003ce9
 8003cb4:	08003ce9 	.word	0x08003ce9
 8003cb8:	08003ce9 	.word	0x08003ce9
 8003cbc:	08003cd7 	.word	0x08003cd7
 8003cc0:	08003ce9 	.word	0x08003ce9
 8003cc4:	08003ce9 	.word	0x08003ce9
 8003cc8:	08003ce9 	.word	0x08003ce9
 8003ccc:	08003ce3 	.word	0x08003ce3
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	76fb      	strb	r3, [r7, #27]
 8003cd4:	e0af      	b.n	8003e36 <UART_SetConfig+0x282>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	76fb      	strb	r3, [r7, #27]
 8003cda:	e0ac      	b.n	8003e36 <UART_SetConfig+0x282>
 8003cdc:	2304      	movs	r3, #4
 8003cde:	76fb      	strb	r3, [r7, #27]
 8003ce0:	e0a9      	b.n	8003e36 <UART_SetConfig+0x282>
 8003ce2:	2308      	movs	r3, #8
 8003ce4:	76fb      	strb	r3, [r7, #27]
 8003ce6:	e0a6      	b.n	8003e36 <UART_SetConfig+0x282>
 8003ce8:	2310      	movs	r3, #16
 8003cea:	76fb      	strb	r3, [r7, #27]
 8003cec:	e0a3      	b.n	8003e36 <UART_SetConfig+0x282>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a6d      	ldr	r2, [pc, #436]	; (8003ea8 <UART_SetConfig+0x2f4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d120      	bne.n	8003d3a <UART_SetConfig+0x186>
 8003cf8:	4b69      	ldr	r3, [pc, #420]	; (8003ea0 <UART_SetConfig+0x2ec>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d02:	2b30      	cmp	r3, #48	; 0x30
 8003d04:	d013      	beq.n	8003d2e <UART_SetConfig+0x17a>
 8003d06:	2b30      	cmp	r3, #48	; 0x30
 8003d08:	d814      	bhi.n	8003d34 <UART_SetConfig+0x180>
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d009      	beq.n	8003d22 <UART_SetConfig+0x16e>
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	d810      	bhi.n	8003d34 <UART_SetConfig+0x180>
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <UART_SetConfig+0x168>
 8003d16:	2b10      	cmp	r3, #16
 8003d18:	d006      	beq.n	8003d28 <UART_SetConfig+0x174>
 8003d1a:	e00b      	b.n	8003d34 <UART_SetConfig+0x180>
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	76fb      	strb	r3, [r7, #27]
 8003d20:	e089      	b.n	8003e36 <UART_SetConfig+0x282>
 8003d22:	2302      	movs	r3, #2
 8003d24:	76fb      	strb	r3, [r7, #27]
 8003d26:	e086      	b.n	8003e36 <UART_SetConfig+0x282>
 8003d28:	2304      	movs	r3, #4
 8003d2a:	76fb      	strb	r3, [r7, #27]
 8003d2c:	e083      	b.n	8003e36 <UART_SetConfig+0x282>
 8003d2e:	2308      	movs	r3, #8
 8003d30:	76fb      	strb	r3, [r7, #27]
 8003d32:	e080      	b.n	8003e36 <UART_SetConfig+0x282>
 8003d34:	2310      	movs	r3, #16
 8003d36:	76fb      	strb	r3, [r7, #27]
 8003d38:	e07d      	b.n	8003e36 <UART_SetConfig+0x282>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a5b      	ldr	r2, [pc, #364]	; (8003eac <UART_SetConfig+0x2f8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d120      	bne.n	8003d86 <UART_SetConfig+0x1d2>
 8003d44:	4b56      	ldr	r3, [pc, #344]	; (8003ea0 <UART_SetConfig+0x2ec>)
 8003d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d4e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d50:	d013      	beq.n	8003d7a <UART_SetConfig+0x1c6>
 8003d52:	2bc0      	cmp	r3, #192	; 0xc0
 8003d54:	d814      	bhi.n	8003d80 <UART_SetConfig+0x1cc>
 8003d56:	2b80      	cmp	r3, #128	; 0x80
 8003d58:	d009      	beq.n	8003d6e <UART_SetConfig+0x1ba>
 8003d5a:	2b80      	cmp	r3, #128	; 0x80
 8003d5c:	d810      	bhi.n	8003d80 <UART_SetConfig+0x1cc>
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <UART_SetConfig+0x1b4>
 8003d62:	2b40      	cmp	r3, #64	; 0x40
 8003d64:	d006      	beq.n	8003d74 <UART_SetConfig+0x1c0>
 8003d66:	e00b      	b.n	8003d80 <UART_SetConfig+0x1cc>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	76fb      	strb	r3, [r7, #27]
 8003d6c:	e063      	b.n	8003e36 <UART_SetConfig+0x282>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	76fb      	strb	r3, [r7, #27]
 8003d72:	e060      	b.n	8003e36 <UART_SetConfig+0x282>
 8003d74:	2304      	movs	r3, #4
 8003d76:	76fb      	strb	r3, [r7, #27]
 8003d78:	e05d      	b.n	8003e36 <UART_SetConfig+0x282>
 8003d7a:	2308      	movs	r3, #8
 8003d7c:	76fb      	strb	r3, [r7, #27]
 8003d7e:	e05a      	b.n	8003e36 <UART_SetConfig+0x282>
 8003d80:	2310      	movs	r3, #16
 8003d82:	76fb      	strb	r3, [r7, #27]
 8003d84:	e057      	b.n	8003e36 <UART_SetConfig+0x282>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a49      	ldr	r2, [pc, #292]	; (8003eb0 <UART_SetConfig+0x2fc>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d125      	bne.n	8003ddc <UART_SetConfig+0x228>
 8003d90:	4b43      	ldr	r3, [pc, #268]	; (8003ea0 <UART_SetConfig+0x2ec>)
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d9e:	d017      	beq.n	8003dd0 <UART_SetConfig+0x21c>
 8003da0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003da4:	d817      	bhi.n	8003dd6 <UART_SetConfig+0x222>
 8003da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003daa:	d00b      	beq.n	8003dc4 <UART_SetConfig+0x210>
 8003dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003db0:	d811      	bhi.n	8003dd6 <UART_SetConfig+0x222>
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <UART_SetConfig+0x20a>
 8003db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dba:	d006      	beq.n	8003dca <UART_SetConfig+0x216>
 8003dbc:	e00b      	b.n	8003dd6 <UART_SetConfig+0x222>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	76fb      	strb	r3, [r7, #27]
 8003dc2:	e038      	b.n	8003e36 <UART_SetConfig+0x282>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	76fb      	strb	r3, [r7, #27]
 8003dc8:	e035      	b.n	8003e36 <UART_SetConfig+0x282>
 8003dca:	2304      	movs	r3, #4
 8003dcc:	76fb      	strb	r3, [r7, #27]
 8003dce:	e032      	b.n	8003e36 <UART_SetConfig+0x282>
 8003dd0:	2308      	movs	r3, #8
 8003dd2:	76fb      	strb	r3, [r7, #27]
 8003dd4:	e02f      	b.n	8003e36 <UART_SetConfig+0x282>
 8003dd6:	2310      	movs	r3, #16
 8003dd8:	76fb      	strb	r3, [r7, #27]
 8003dda:	e02c      	b.n	8003e36 <UART_SetConfig+0x282>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a2d      	ldr	r2, [pc, #180]	; (8003e98 <UART_SetConfig+0x2e4>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d125      	bne.n	8003e32 <UART_SetConfig+0x27e>
 8003de6:	4b2e      	ldr	r3, [pc, #184]	; (8003ea0 <UART_SetConfig+0x2ec>)
 8003de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003df0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003df4:	d017      	beq.n	8003e26 <UART_SetConfig+0x272>
 8003df6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dfa:	d817      	bhi.n	8003e2c <UART_SetConfig+0x278>
 8003dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e00:	d00b      	beq.n	8003e1a <UART_SetConfig+0x266>
 8003e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e06:	d811      	bhi.n	8003e2c <UART_SetConfig+0x278>
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <UART_SetConfig+0x260>
 8003e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e10:	d006      	beq.n	8003e20 <UART_SetConfig+0x26c>
 8003e12:	e00b      	b.n	8003e2c <UART_SetConfig+0x278>
 8003e14:	2300      	movs	r3, #0
 8003e16:	76fb      	strb	r3, [r7, #27]
 8003e18:	e00d      	b.n	8003e36 <UART_SetConfig+0x282>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	76fb      	strb	r3, [r7, #27]
 8003e1e:	e00a      	b.n	8003e36 <UART_SetConfig+0x282>
 8003e20:	2304      	movs	r3, #4
 8003e22:	76fb      	strb	r3, [r7, #27]
 8003e24:	e007      	b.n	8003e36 <UART_SetConfig+0x282>
 8003e26:	2308      	movs	r3, #8
 8003e28:	76fb      	strb	r3, [r7, #27]
 8003e2a:	e004      	b.n	8003e36 <UART_SetConfig+0x282>
 8003e2c:	2310      	movs	r3, #16
 8003e2e:	76fb      	strb	r3, [r7, #27]
 8003e30:	e001      	b.n	8003e36 <UART_SetConfig+0x282>
 8003e32:	2310      	movs	r3, #16
 8003e34:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a17      	ldr	r2, [pc, #92]	; (8003e98 <UART_SetConfig+0x2e4>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	f040 8087 	bne.w	8003f50 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e42:	7efb      	ldrb	r3, [r7, #27]
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d837      	bhi.n	8003eb8 <UART_SetConfig+0x304>
 8003e48:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <UART_SetConfig+0x29c>)
 8003e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4e:	bf00      	nop
 8003e50:	08003e75 	.word	0x08003e75
 8003e54:	08003eb9 	.word	0x08003eb9
 8003e58:	08003e7d 	.word	0x08003e7d
 8003e5c:	08003eb9 	.word	0x08003eb9
 8003e60:	08003e83 	.word	0x08003e83
 8003e64:	08003eb9 	.word	0x08003eb9
 8003e68:	08003eb9 	.word	0x08003eb9
 8003e6c:	08003eb9 	.word	0x08003eb9
 8003e70:	08003e8b 	.word	0x08003e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e74:	f7fe f95a 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 8003e78:	6178      	str	r0, [r7, #20]
        break;
 8003e7a:	e022      	b.n	8003ec2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e7c:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <UART_SetConfig+0x300>)
 8003e7e:	617b      	str	r3, [r7, #20]
        break;
 8003e80:	e01f      	b.n	8003ec2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e82:	f7fe f8bb 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 8003e86:	6178      	str	r0, [r7, #20]
        break;
 8003e88:	e01b      	b.n	8003ec2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e8e:	617b      	str	r3, [r7, #20]
        break;
 8003e90:	e017      	b.n	8003ec2 <UART_SetConfig+0x30e>
 8003e92:	bf00      	nop
 8003e94:	efff69f3 	.word	0xefff69f3
 8003e98:	40008000 	.word	0x40008000
 8003e9c:	40013800 	.word	0x40013800
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	40004400 	.word	0x40004400
 8003ea8:	40004800 	.word	0x40004800
 8003eac:	40004c00 	.word	0x40004c00
 8003eb0:	40005000 	.word	0x40005000
 8003eb4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	76bb      	strb	r3, [r7, #26]
        break;
 8003ec0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 80f1 	beq.w	80040ac <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	4413      	add	r3, r2
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d305      	bcc.n	8003ee6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d902      	bls.n	8003eec <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	76bb      	strb	r3, [r7, #26]
 8003eea:	e0df      	b.n	80040ac <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f04f 0100 	mov.w	r1, #0
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	020b      	lsls	r3, r1, #8
 8003efe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f02:	0202      	lsls	r2, r0, #8
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	6849      	ldr	r1, [r1, #4]
 8003f08:	0849      	lsrs	r1, r1, #1
 8003f0a:	4608      	mov	r0, r1
 8003f0c:	f04f 0100 	mov.w	r1, #0
 8003f10:	1814      	adds	r4, r2, r0
 8003f12:	eb43 0501 	adc.w	r5, r3, r1
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	4620      	mov	r0, r4
 8003f22:	4629      	mov	r1, r5
 8003f24:	f7fc f9bc 	bl	80002a0 <__aeabi_uldivmod>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f36:	d308      	bcc.n	8003f4a <UART_SetConfig+0x396>
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f3e:	d204      	bcs.n	8003f4a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	60da      	str	r2, [r3, #12]
 8003f48:	e0b0      	b.n	80040ac <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	76bb      	strb	r3, [r7, #26]
 8003f4e:	e0ad      	b.n	80040ac <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f58:	d15c      	bne.n	8004014 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003f5a:	7efb      	ldrb	r3, [r7, #27]
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d828      	bhi.n	8003fb2 <UART_SetConfig+0x3fe>
 8003f60:	a201      	add	r2, pc, #4	; (adr r2, 8003f68 <UART_SetConfig+0x3b4>)
 8003f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f66:	bf00      	nop
 8003f68:	08003f8d 	.word	0x08003f8d
 8003f6c:	08003f95 	.word	0x08003f95
 8003f70:	08003f9d 	.word	0x08003f9d
 8003f74:	08003fb3 	.word	0x08003fb3
 8003f78:	08003fa3 	.word	0x08003fa3
 8003f7c:	08003fb3 	.word	0x08003fb3
 8003f80:	08003fb3 	.word	0x08003fb3
 8003f84:	08003fb3 	.word	0x08003fb3
 8003f88:	08003fab 	.word	0x08003fab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f8c:	f7fe f8ce 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 8003f90:	6178      	str	r0, [r7, #20]
        break;
 8003f92:	e013      	b.n	8003fbc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f94:	f7fe f8e0 	bl	8002158 <HAL_RCC_GetPCLK2Freq>
 8003f98:	6178      	str	r0, [r7, #20]
        break;
 8003f9a:	e00f      	b.n	8003fbc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f9c:	4b49      	ldr	r3, [pc, #292]	; (80040c4 <UART_SetConfig+0x510>)
 8003f9e:	617b      	str	r3, [r7, #20]
        break;
 8003fa0:	e00c      	b.n	8003fbc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fa2:	f7fe f82b 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 8003fa6:	6178      	str	r0, [r7, #20]
        break;
 8003fa8:	e008      	b.n	8003fbc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fae:	617b      	str	r3, [r7, #20]
        break;
 8003fb0:	e004      	b.n	8003fbc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	76bb      	strb	r3, [r7, #26]
        break;
 8003fba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d074      	beq.n	80040ac <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	005a      	lsls	r2, r3, #1
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	085b      	lsrs	r3, r3, #1
 8003fcc:	441a      	add	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	2b0f      	cmp	r3, #15
 8003fde:	d916      	bls.n	800400e <UART_SetConfig+0x45a>
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe6:	d212      	bcs.n	800400e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	f023 030f 	bic.w	r3, r3, #15
 8003ff0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	085b      	lsrs	r3, r3, #1
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	89fb      	ldrh	r3, [r7, #14]
 8004000:	4313      	orrs	r3, r2
 8004002:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	89fa      	ldrh	r2, [r7, #14]
 800400a:	60da      	str	r2, [r3, #12]
 800400c:	e04e      	b.n	80040ac <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	76bb      	strb	r3, [r7, #26]
 8004012:	e04b      	b.n	80040ac <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004014:	7efb      	ldrb	r3, [r7, #27]
 8004016:	2b08      	cmp	r3, #8
 8004018:	d827      	bhi.n	800406a <UART_SetConfig+0x4b6>
 800401a:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <UART_SetConfig+0x46c>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	08004045 	.word	0x08004045
 8004024:	0800404d 	.word	0x0800404d
 8004028:	08004055 	.word	0x08004055
 800402c:	0800406b 	.word	0x0800406b
 8004030:	0800405b 	.word	0x0800405b
 8004034:	0800406b 	.word	0x0800406b
 8004038:	0800406b 	.word	0x0800406b
 800403c:	0800406b 	.word	0x0800406b
 8004040:	08004063 	.word	0x08004063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004044:	f7fe f872 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 8004048:	6178      	str	r0, [r7, #20]
        break;
 800404a:	e013      	b.n	8004074 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800404c:	f7fe f884 	bl	8002158 <HAL_RCC_GetPCLK2Freq>
 8004050:	6178      	str	r0, [r7, #20]
        break;
 8004052:	e00f      	b.n	8004074 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004054:	4b1b      	ldr	r3, [pc, #108]	; (80040c4 <UART_SetConfig+0x510>)
 8004056:	617b      	str	r3, [r7, #20]
        break;
 8004058:	e00c      	b.n	8004074 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800405a:	f7fd ffcf 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 800405e:	6178      	str	r0, [r7, #20]
        break;
 8004060:	e008      	b.n	8004074 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004066:	617b      	str	r3, [r7, #20]
        break;
 8004068:	e004      	b.n	8004074 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	76bb      	strb	r3, [r7, #26]
        break;
 8004072:	bf00      	nop
    }

    if (pclk != 0U)
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d018      	beq.n	80040ac <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	085a      	lsrs	r2, r3, #1
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	441a      	add	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	fbb2 f3f3 	udiv	r3, r2, r3
 800408c:	b29b      	uxth	r3, r3
 800408e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	2b0f      	cmp	r3, #15
 8004094:	d908      	bls.n	80040a8 <UART_SetConfig+0x4f4>
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800409c:	d204      	bcs.n	80040a8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	60da      	str	r2, [r3, #12]
 80040a6:	e001      	b.n	80040ac <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80040b8:	7ebb      	ldrb	r3, [r7, #26]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3720      	adds	r7, #32
 80040be:	46bd      	mov	sp, r7
 80040c0:	bdb0      	pop	{r4, r5, r7, pc}
 80040c2:	bf00      	nop
 80040c4:	00f42400 	.word	0x00f42400

080040c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	f003 0310 	and.w	r3, r3, #16
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	f003 0320 	and.w	r3, r3, #32
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d01a      	beq.n	80041de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041c6:	d10a      	bne.n	80041de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	605a      	str	r2, [r3, #4]
  }
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af02      	add	r7, sp, #8
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800421c:	f7fc fe9a 	bl	8000f54 <HAL_GetTick>
 8004220:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b08      	cmp	r3, #8
 800422e:	d10e      	bne.n	800424e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f82d 	bl	800429e <UART_WaitOnFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e023      	b.n	8004296 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b04      	cmp	r3, #4
 800425a:	d10e      	bne.n	800427a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800425c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f817 	bl	800429e <UART_WaitOnFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e00d      	b.n	8004296 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2220      	movs	r2, #32
 800427e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2220      	movs	r2, #32
 8004284:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	603b      	str	r3, [r7, #0]
 80042aa:	4613      	mov	r3, r2
 80042ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ae:	e05e      	b.n	800436e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b6:	d05a      	beq.n	800436e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b8:	f7fc fe4c 	bl	8000f54 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d302      	bcc.n	80042ce <UART_WaitOnFlagUntilTimeout+0x30>
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d11b      	bne.n	8004306 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042dc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0201 	bic.w	r2, r2, #1
 80042ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2220      	movs	r2, #32
 80042f2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2220      	movs	r2, #32
 80042f8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e043      	b.n	800438e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d02c      	beq.n	800436e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800431e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004322:	d124      	bne.n	800436e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800432c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800433c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0201 	bic.w	r2, r2, #1
 800434c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2220      	movs	r2, #32
 8004352:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2220      	movs	r2, #32
 800435e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e00f      	b.n	800438e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	69da      	ldr	r2, [r3, #28]
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	4013      	ands	r3, r2
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	429a      	cmp	r2, r3
 800437c:	bf0c      	ite	eq
 800437e:	2301      	moveq	r3, #1
 8004380:	2300      	movne	r3, #0
 8004382:	b2db      	uxtb	r3, r3
 8004384:	461a      	mov	r2, r3
 8004386:	79fb      	ldrb	r3, [r7, #7]
 8004388:	429a      	cmp	r2, r3
 800438a:	d091      	beq.n	80042b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <__errno>:
 8004398:	4b01      	ldr	r3, [pc, #4]	; (80043a0 <__errno+0x8>)
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	2000000c 	.word	0x2000000c

080043a4 <__libc_init_array>:
 80043a4:	b570      	push	{r4, r5, r6, lr}
 80043a6:	4d0d      	ldr	r5, [pc, #52]	; (80043dc <__libc_init_array+0x38>)
 80043a8:	4c0d      	ldr	r4, [pc, #52]	; (80043e0 <__libc_init_array+0x3c>)
 80043aa:	1b64      	subs	r4, r4, r5
 80043ac:	10a4      	asrs	r4, r4, #2
 80043ae:	2600      	movs	r6, #0
 80043b0:	42a6      	cmp	r6, r4
 80043b2:	d109      	bne.n	80043c8 <__libc_init_array+0x24>
 80043b4:	4d0b      	ldr	r5, [pc, #44]	; (80043e4 <__libc_init_array+0x40>)
 80043b6:	4c0c      	ldr	r4, [pc, #48]	; (80043e8 <__libc_init_array+0x44>)
 80043b8:	f000 fc4e 	bl	8004c58 <_init>
 80043bc:	1b64      	subs	r4, r4, r5
 80043be:	10a4      	asrs	r4, r4, #2
 80043c0:	2600      	movs	r6, #0
 80043c2:	42a6      	cmp	r6, r4
 80043c4:	d105      	bne.n	80043d2 <__libc_init_array+0x2e>
 80043c6:	bd70      	pop	{r4, r5, r6, pc}
 80043c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043cc:	4798      	blx	r3
 80043ce:	3601      	adds	r6, #1
 80043d0:	e7ee      	b.n	80043b0 <__libc_init_array+0xc>
 80043d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d6:	4798      	blx	r3
 80043d8:	3601      	adds	r6, #1
 80043da:	e7f2      	b.n	80043c2 <__libc_init_array+0x1e>
 80043dc:	08004d1c 	.word	0x08004d1c
 80043e0:	08004d1c 	.word	0x08004d1c
 80043e4:	08004d1c 	.word	0x08004d1c
 80043e8:	08004d20 	.word	0x08004d20

080043ec <memset>:
 80043ec:	4402      	add	r2, r0
 80043ee:	4603      	mov	r3, r0
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d100      	bne.n	80043f6 <memset+0xa>
 80043f4:	4770      	bx	lr
 80043f6:	f803 1b01 	strb.w	r1, [r3], #1
 80043fa:	e7f9      	b.n	80043f0 <memset+0x4>

080043fc <siprintf>:
 80043fc:	b40e      	push	{r1, r2, r3}
 80043fe:	b500      	push	{lr}
 8004400:	b09c      	sub	sp, #112	; 0x70
 8004402:	ab1d      	add	r3, sp, #116	; 0x74
 8004404:	9002      	str	r0, [sp, #8]
 8004406:	9006      	str	r0, [sp, #24]
 8004408:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800440c:	4809      	ldr	r0, [pc, #36]	; (8004434 <siprintf+0x38>)
 800440e:	9107      	str	r1, [sp, #28]
 8004410:	9104      	str	r1, [sp, #16]
 8004412:	4909      	ldr	r1, [pc, #36]	; (8004438 <siprintf+0x3c>)
 8004414:	f853 2b04 	ldr.w	r2, [r3], #4
 8004418:	9105      	str	r1, [sp, #20]
 800441a:	6800      	ldr	r0, [r0, #0]
 800441c:	9301      	str	r3, [sp, #4]
 800441e:	a902      	add	r1, sp, #8
 8004420:	f000 f868 	bl	80044f4 <_svfiprintf_r>
 8004424:	9b02      	ldr	r3, [sp, #8]
 8004426:	2200      	movs	r2, #0
 8004428:	701a      	strb	r2, [r3, #0]
 800442a:	b01c      	add	sp, #112	; 0x70
 800442c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004430:	b003      	add	sp, #12
 8004432:	4770      	bx	lr
 8004434:	2000000c 	.word	0x2000000c
 8004438:	ffff0208 	.word	0xffff0208

0800443c <__ssputs_r>:
 800443c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004440:	688e      	ldr	r6, [r1, #8]
 8004442:	429e      	cmp	r6, r3
 8004444:	4682      	mov	sl, r0
 8004446:	460c      	mov	r4, r1
 8004448:	4690      	mov	r8, r2
 800444a:	461f      	mov	r7, r3
 800444c:	d838      	bhi.n	80044c0 <__ssputs_r+0x84>
 800444e:	898a      	ldrh	r2, [r1, #12]
 8004450:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004454:	d032      	beq.n	80044bc <__ssputs_r+0x80>
 8004456:	6825      	ldr	r5, [r4, #0]
 8004458:	6909      	ldr	r1, [r1, #16]
 800445a:	eba5 0901 	sub.w	r9, r5, r1
 800445e:	6965      	ldr	r5, [r4, #20]
 8004460:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004464:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004468:	3301      	adds	r3, #1
 800446a:	444b      	add	r3, r9
 800446c:	106d      	asrs	r5, r5, #1
 800446e:	429d      	cmp	r5, r3
 8004470:	bf38      	it	cc
 8004472:	461d      	movcc	r5, r3
 8004474:	0553      	lsls	r3, r2, #21
 8004476:	d531      	bpl.n	80044dc <__ssputs_r+0xa0>
 8004478:	4629      	mov	r1, r5
 800447a:	f000 fb47 	bl	8004b0c <_malloc_r>
 800447e:	4606      	mov	r6, r0
 8004480:	b950      	cbnz	r0, 8004498 <__ssputs_r+0x5c>
 8004482:	230c      	movs	r3, #12
 8004484:	f8ca 3000 	str.w	r3, [sl]
 8004488:	89a3      	ldrh	r3, [r4, #12]
 800448a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800448e:	81a3      	strh	r3, [r4, #12]
 8004490:	f04f 30ff 	mov.w	r0, #4294967295
 8004494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004498:	6921      	ldr	r1, [r4, #16]
 800449a:	464a      	mov	r2, r9
 800449c:	f000 fabe 	bl	8004a1c <memcpy>
 80044a0:	89a3      	ldrh	r3, [r4, #12]
 80044a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80044a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044aa:	81a3      	strh	r3, [r4, #12]
 80044ac:	6126      	str	r6, [r4, #16]
 80044ae:	6165      	str	r5, [r4, #20]
 80044b0:	444e      	add	r6, r9
 80044b2:	eba5 0509 	sub.w	r5, r5, r9
 80044b6:	6026      	str	r6, [r4, #0]
 80044b8:	60a5      	str	r5, [r4, #8]
 80044ba:	463e      	mov	r6, r7
 80044bc:	42be      	cmp	r6, r7
 80044be:	d900      	bls.n	80044c2 <__ssputs_r+0x86>
 80044c0:	463e      	mov	r6, r7
 80044c2:	4632      	mov	r2, r6
 80044c4:	6820      	ldr	r0, [r4, #0]
 80044c6:	4641      	mov	r1, r8
 80044c8:	f000 fab6 	bl	8004a38 <memmove>
 80044cc:	68a3      	ldr	r3, [r4, #8]
 80044ce:	6822      	ldr	r2, [r4, #0]
 80044d0:	1b9b      	subs	r3, r3, r6
 80044d2:	4432      	add	r2, r6
 80044d4:	60a3      	str	r3, [r4, #8]
 80044d6:	6022      	str	r2, [r4, #0]
 80044d8:	2000      	movs	r0, #0
 80044da:	e7db      	b.n	8004494 <__ssputs_r+0x58>
 80044dc:	462a      	mov	r2, r5
 80044de:	f000 fb6f 	bl	8004bc0 <_realloc_r>
 80044e2:	4606      	mov	r6, r0
 80044e4:	2800      	cmp	r0, #0
 80044e6:	d1e1      	bne.n	80044ac <__ssputs_r+0x70>
 80044e8:	6921      	ldr	r1, [r4, #16]
 80044ea:	4650      	mov	r0, sl
 80044ec:	f000 fabe 	bl	8004a6c <_free_r>
 80044f0:	e7c7      	b.n	8004482 <__ssputs_r+0x46>
	...

080044f4 <_svfiprintf_r>:
 80044f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f8:	4698      	mov	r8, r3
 80044fa:	898b      	ldrh	r3, [r1, #12]
 80044fc:	061b      	lsls	r3, r3, #24
 80044fe:	b09d      	sub	sp, #116	; 0x74
 8004500:	4607      	mov	r7, r0
 8004502:	460d      	mov	r5, r1
 8004504:	4614      	mov	r4, r2
 8004506:	d50e      	bpl.n	8004526 <_svfiprintf_r+0x32>
 8004508:	690b      	ldr	r3, [r1, #16]
 800450a:	b963      	cbnz	r3, 8004526 <_svfiprintf_r+0x32>
 800450c:	2140      	movs	r1, #64	; 0x40
 800450e:	f000 fafd 	bl	8004b0c <_malloc_r>
 8004512:	6028      	str	r0, [r5, #0]
 8004514:	6128      	str	r0, [r5, #16]
 8004516:	b920      	cbnz	r0, 8004522 <_svfiprintf_r+0x2e>
 8004518:	230c      	movs	r3, #12
 800451a:	603b      	str	r3, [r7, #0]
 800451c:	f04f 30ff 	mov.w	r0, #4294967295
 8004520:	e0d1      	b.n	80046c6 <_svfiprintf_r+0x1d2>
 8004522:	2340      	movs	r3, #64	; 0x40
 8004524:	616b      	str	r3, [r5, #20]
 8004526:	2300      	movs	r3, #0
 8004528:	9309      	str	r3, [sp, #36]	; 0x24
 800452a:	2320      	movs	r3, #32
 800452c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004530:	f8cd 800c 	str.w	r8, [sp, #12]
 8004534:	2330      	movs	r3, #48	; 0x30
 8004536:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80046e0 <_svfiprintf_r+0x1ec>
 800453a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800453e:	f04f 0901 	mov.w	r9, #1
 8004542:	4623      	mov	r3, r4
 8004544:	469a      	mov	sl, r3
 8004546:	f813 2b01 	ldrb.w	r2, [r3], #1
 800454a:	b10a      	cbz	r2, 8004550 <_svfiprintf_r+0x5c>
 800454c:	2a25      	cmp	r2, #37	; 0x25
 800454e:	d1f9      	bne.n	8004544 <_svfiprintf_r+0x50>
 8004550:	ebba 0b04 	subs.w	fp, sl, r4
 8004554:	d00b      	beq.n	800456e <_svfiprintf_r+0x7a>
 8004556:	465b      	mov	r3, fp
 8004558:	4622      	mov	r2, r4
 800455a:	4629      	mov	r1, r5
 800455c:	4638      	mov	r0, r7
 800455e:	f7ff ff6d 	bl	800443c <__ssputs_r>
 8004562:	3001      	adds	r0, #1
 8004564:	f000 80aa 	beq.w	80046bc <_svfiprintf_r+0x1c8>
 8004568:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800456a:	445a      	add	r2, fp
 800456c:	9209      	str	r2, [sp, #36]	; 0x24
 800456e:	f89a 3000 	ldrb.w	r3, [sl]
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 80a2 	beq.w	80046bc <_svfiprintf_r+0x1c8>
 8004578:	2300      	movs	r3, #0
 800457a:	f04f 32ff 	mov.w	r2, #4294967295
 800457e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004582:	f10a 0a01 	add.w	sl, sl, #1
 8004586:	9304      	str	r3, [sp, #16]
 8004588:	9307      	str	r3, [sp, #28]
 800458a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800458e:	931a      	str	r3, [sp, #104]	; 0x68
 8004590:	4654      	mov	r4, sl
 8004592:	2205      	movs	r2, #5
 8004594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004598:	4851      	ldr	r0, [pc, #324]	; (80046e0 <_svfiprintf_r+0x1ec>)
 800459a:	f7fb fe31 	bl	8000200 <memchr>
 800459e:	9a04      	ldr	r2, [sp, #16]
 80045a0:	b9d8      	cbnz	r0, 80045da <_svfiprintf_r+0xe6>
 80045a2:	06d0      	lsls	r0, r2, #27
 80045a4:	bf44      	itt	mi
 80045a6:	2320      	movmi	r3, #32
 80045a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045ac:	0711      	lsls	r1, r2, #28
 80045ae:	bf44      	itt	mi
 80045b0:	232b      	movmi	r3, #43	; 0x2b
 80045b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045b6:	f89a 3000 	ldrb.w	r3, [sl]
 80045ba:	2b2a      	cmp	r3, #42	; 0x2a
 80045bc:	d015      	beq.n	80045ea <_svfiprintf_r+0xf6>
 80045be:	9a07      	ldr	r2, [sp, #28]
 80045c0:	4654      	mov	r4, sl
 80045c2:	2000      	movs	r0, #0
 80045c4:	f04f 0c0a 	mov.w	ip, #10
 80045c8:	4621      	mov	r1, r4
 80045ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045ce:	3b30      	subs	r3, #48	; 0x30
 80045d0:	2b09      	cmp	r3, #9
 80045d2:	d94e      	bls.n	8004672 <_svfiprintf_r+0x17e>
 80045d4:	b1b0      	cbz	r0, 8004604 <_svfiprintf_r+0x110>
 80045d6:	9207      	str	r2, [sp, #28]
 80045d8:	e014      	b.n	8004604 <_svfiprintf_r+0x110>
 80045da:	eba0 0308 	sub.w	r3, r0, r8
 80045de:	fa09 f303 	lsl.w	r3, r9, r3
 80045e2:	4313      	orrs	r3, r2
 80045e4:	9304      	str	r3, [sp, #16]
 80045e6:	46a2      	mov	sl, r4
 80045e8:	e7d2      	b.n	8004590 <_svfiprintf_r+0x9c>
 80045ea:	9b03      	ldr	r3, [sp, #12]
 80045ec:	1d19      	adds	r1, r3, #4
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	9103      	str	r1, [sp, #12]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	bfbb      	ittet	lt
 80045f6:	425b      	neglt	r3, r3
 80045f8:	f042 0202 	orrlt.w	r2, r2, #2
 80045fc:	9307      	strge	r3, [sp, #28]
 80045fe:	9307      	strlt	r3, [sp, #28]
 8004600:	bfb8      	it	lt
 8004602:	9204      	strlt	r2, [sp, #16]
 8004604:	7823      	ldrb	r3, [r4, #0]
 8004606:	2b2e      	cmp	r3, #46	; 0x2e
 8004608:	d10c      	bne.n	8004624 <_svfiprintf_r+0x130>
 800460a:	7863      	ldrb	r3, [r4, #1]
 800460c:	2b2a      	cmp	r3, #42	; 0x2a
 800460e:	d135      	bne.n	800467c <_svfiprintf_r+0x188>
 8004610:	9b03      	ldr	r3, [sp, #12]
 8004612:	1d1a      	adds	r2, r3, #4
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	9203      	str	r2, [sp, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	bfb8      	it	lt
 800461c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004620:	3402      	adds	r4, #2
 8004622:	9305      	str	r3, [sp, #20]
 8004624:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80046f0 <_svfiprintf_r+0x1fc>
 8004628:	7821      	ldrb	r1, [r4, #0]
 800462a:	2203      	movs	r2, #3
 800462c:	4650      	mov	r0, sl
 800462e:	f7fb fde7 	bl	8000200 <memchr>
 8004632:	b140      	cbz	r0, 8004646 <_svfiprintf_r+0x152>
 8004634:	2340      	movs	r3, #64	; 0x40
 8004636:	eba0 000a 	sub.w	r0, r0, sl
 800463a:	fa03 f000 	lsl.w	r0, r3, r0
 800463e:	9b04      	ldr	r3, [sp, #16]
 8004640:	4303      	orrs	r3, r0
 8004642:	3401      	adds	r4, #1
 8004644:	9304      	str	r3, [sp, #16]
 8004646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800464a:	4826      	ldr	r0, [pc, #152]	; (80046e4 <_svfiprintf_r+0x1f0>)
 800464c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004650:	2206      	movs	r2, #6
 8004652:	f7fb fdd5 	bl	8000200 <memchr>
 8004656:	2800      	cmp	r0, #0
 8004658:	d038      	beq.n	80046cc <_svfiprintf_r+0x1d8>
 800465a:	4b23      	ldr	r3, [pc, #140]	; (80046e8 <_svfiprintf_r+0x1f4>)
 800465c:	bb1b      	cbnz	r3, 80046a6 <_svfiprintf_r+0x1b2>
 800465e:	9b03      	ldr	r3, [sp, #12]
 8004660:	3307      	adds	r3, #7
 8004662:	f023 0307 	bic.w	r3, r3, #7
 8004666:	3308      	adds	r3, #8
 8004668:	9303      	str	r3, [sp, #12]
 800466a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800466c:	4433      	add	r3, r6
 800466e:	9309      	str	r3, [sp, #36]	; 0x24
 8004670:	e767      	b.n	8004542 <_svfiprintf_r+0x4e>
 8004672:	fb0c 3202 	mla	r2, ip, r2, r3
 8004676:	460c      	mov	r4, r1
 8004678:	2001      	movs	r0, #1
 800467a:	e7a5      	b.n	80045c8 <_svfiprintf_r+0xd4>
 800467c:	2300      	movs	r3, #0
 800467e:	3401      	adds	r4, #1
 8004680:	9305      	str	r3, [sp, #20]
 8004682:	4619      	mov	r1, r3
 8004684:	f04f 0c0a 	mov.w	ip, #10
 8004688:	4620      	mov	r0, r4
 800468a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800468e:	3a30      	subs	r2, #48	; 0x30
 8004690:	2a09      	cmp	r2, #9
 8004692:	d903      	bls.n	800469c <_svfiprintf_r+0x1a8>
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0c5      	beq.n	8004624 <_svfiprintf_r+0x130>
 8004698:	9105      	str	r1, [sp, #20]
 800469a:	e7c3      	b.n	8004624 <_svfiprintf_r+0x130>
 800469c:	fb0c 2101 	mla	r1, ip, r1, r2
 80046a0:	4604      	mov	r4, r0
 80046a2:	2301      	movs	r3, #1
 80046a4:	e7f0      	b.n	8004688 <_svfiprintf_r+0x194>
 80046a6:	ab03      	add	r3, sp, #12
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	462a      	mov	r2, r5
 80046ac:	4b0f      	ldr	r3, [pc, #60]	; (80046ec <_svfiprintf_r+0x1f8>)
 80046ae:	a904      	add	r1, sp, #16
 80046b0:	4638      	mov	r0, r7
 80046b2:	f3af 8000 	nop.w
 80046b6:	1c42      	adds	r2, r0, #1
 80046b8:	4606      	mov	r6, r0
 80046ba:	d1d6      	bne.n	800466a <_svfiprintf_r+0x176>
 80046bc:	89ab      	ldrh	r3, [r5, #12]
 80046be:	065b      	lsls	r3, r3, #25
 80046c0:	f53f af2c 	bmi.w	800451c <_svfiprintf_r+0x28>
 80046c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046c6:	b01d      	add	sp, #116	; 0x74
 80046c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046cc:	ab03      	add	r3, sp, #12
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	462a      	mov	r2, r5
 80046d2:	4b06      	ldr	r3, [pc, #24]	; (80046ec <_svfiprintf_r+0x1f8>)
 80046d4:	a904      	add	r1, sp, #16
 80046d6:	4638      	mov	r0, r7
 80046d8:	f000 f87a 	bl	80047d0 <_printf_i>
 80046dc:	e7eb      	b.n	80046b6 <_svfiprintf_r+0x1c2>
 80046de:	bf00      	nop
 80046e0:	08004ce0 	.word	0x08004ce0
 80046e4:	08004cea 	.word	0x08004cea
 80046e8:	00000000 	.word	0x00000000
 80046ec:	0800443d 	.word	0x0800443d
 80046f0:	08004ce6 	.word	0x08004ce6

080046f4 <_printf_common>:
 80046f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046f8:	4616      	mov	r6, r2
 80046fa:	4699      	mov	r9, r3
 80046fc:	688a      	ldr	r2, [r1, #8]
 80046fe:	690b      	ldr	r3, [r1, #16]
 8004700:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004704:	4293      	cmp	r3, r2
 8004706:	bfb8      	it	lt
 8004708:	4613      	movlt	r3, r2
 800470a:	6033      	str	r3, [r6, #0]
 800470c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004710:	4607      	mov	r7, r0
 8004712:	460c      	mov	r4, r1
 8004714:	b10a      	cbz	r2, 800471a <_printf_common+0x26>
 8004716:	3301      	adds	r3, #1
 8004718:	6033      	str	r3, [r6, #0]
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	0699      	lsls	r1, r3, #26
 800471e:	bf42      	ittt	mi
 8004720:	6833      	ldrmi	r3, [r6, #0]
 8004722:	3302      	addmi	r3, #2
 8004724:	6033      	strmi	r3, [r6, #0]
 8004726:	6825      	ldr	r5, [r4, #0]
 8004728:	f015 0506 	ands.w	r5, r5, #6
 800472c:	d106      	bne.n	800473c <_printf_common+0x48>
 800472e:	f104 0a19 	add.w	sl, r4, #25
 8004732:	68e3      	ldr	r3, [r4, #12]
 8004734:	6832      	ldr	r2, [r6, #0]
 8004736:	1a9b      	subs	r3, r3, r2
 8004738:	42ab      	cmp	r3, r5
 800473a:	dc26      	bgt.n	800478a <_printf_common+0x96>
 800473c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004740:	1e13      	subs	r3, r2, #0
 8004742:	6822      	ldr	r2, [r4, #0]
 8004744:	bf18      	it	ne
 8004746:	2301      	movne	r3, #1
 8004748:	0692      	lsls	r2, r2, #26
 800474a:	d42b      	bmi.n	80047a4 <_printf_common+0xb0>
 800474c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004750:	4649      	mov	r1, r9
 8004752:	4638      	mov	r0, r7
 8004754:	47c0      	blx	r8
 8004756:	3001      	adds	r0, #1
 8004758:	d01e      	beq.n	8004798 <_printf_common+0xa4>
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	68e5      	ldr	r5, [r4, #12]
 800475e:	6832      	ldr	r2, [r6, #0]
 8004760:	f003 0306 	and.w	r3, r3, #6
 8004764:	2b04      	cmp	r3, #4
 8004766:	bf08      	it	eq
 8004768:	1aad      	subeq	r5, r5, r2
 800476a:	68a3      	ldr	r3, [r4, #8]
 800476c:	6922      	ldr	r2, [r4, #16]
 800476e:	bf0c      	ite	eq
 8004770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004774:	2500      	movne	r5, #0
 8004776:	4293      	cmp	r3, r2
 8004778:	bfc4      	itt	gt
 800477a:	1a9b      	subgt	r3, r3, r2
 800477c:	18ed      	addgt	r5, r5, r3
 800477e:	2600      	movs	r6, #0
 8004780:	341a      	adds	r4, #26
 8004782:	42b5      	cmp	r5, r6
 8004784:	d11a      	bne.n	80047bc <_printf_common+0xc8>
 8004786:	2000      	movs	r0, #0
 8004788:	e008      	b.n	800479c <_printf_common+0xa8>
 800478a:	2301      	movs	r3, #1
 800478c:	4652      	mov	r2, sl
 800478e:	4649      	mov	r1, r9
 8004790:	4638      	mov	r0, r7
 8004792:	47c0      	blx	r8
 8004794:	3001      	adds	r0, #1
 8004796:	d103      	bne.n	80047a0 <_printf_common+0xac>
 8004798:	f04f 30ff 	mov.w	r0, #4294967295
 800479c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047a0:	3501      	adds	r5, #1
 80047a2:	e7c6      	b.n	8004732 <_printf_common+0x3e>
 80047a4:	18e1      	adds	r1, r4, r3
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	2030      	movs	r0, #48	; 0x30
 80047aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047ae:	4422      	add	r2, r4
 80047b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047b8:	3302      	adds	r3, #2
 80047ba:	e7c7      	b.n	800474c <_printf_common+0x58>
 80047bc:	2301      	movs	r3, #1
 80047be:	4622      	mov	r2, r4
 80047c0:	4649      	mov	r1, r9
 80047c2:	4638      	mov	r0, r7
 80047c4:	47c0      	blx	r8
 80047c6:	3001      	adds	r0, #1
 80047c8:	d0e6      	beq.n	8004798 <_printf_common+0xa4>
 80047ca:	3601      	adds	r6, #1
 80047cc:	e7d9      	b.n	8004782 <_printf_common+0x8e>
	...

080047d0 <_printf_i>:
 80047d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047d4:	460c      	mov	r4, r1
 80047d6:	4691      	mov	r9, r2
 80047d8:	7e27      	ldrb	r7, [r4, #24]
 80047da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80047dc:	2f78      	cmp	r7, #120	; 0x78
 80047de:	4680      	mov	r8, r0
 80047e0:	469a      	mov	sl, r3
 80047e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047e6:	d807      	bhi.n	80047f8 <_printf_i+0x28>
 80047e8:	2f62      	cmp	r7, #98	; 0x62
 80047ea:	d80a      	bhi.n	8004802 <_printf_i+0x32>
 80047ec:	2f00      	cmp	r7, #0
 80047ee:	f000 80d8 	beq.w	80049a2 <_printf_i+0x1d2>
 80047f2:	2f58      	cmp	r7, #88	; 0x58
 80047f4:	f000 80a3 	beq.w	800493e <_printf_i+0x16e>
 80047f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004800:	e03a      	b.n	8004878 <_printf_i+0xa8>
 8004802:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004806:	2b15      	cmp	r3, #21
 8004808:	d8f6      	bhi.n	80047f8 <_printf_i+0x28>
 800480a:	a001      	add	r0, pc, #4	; (adr r0, 8004810 <_printf_i+0x40>)
 800480c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004810:	08004869 	.word	0x08004869
 8004814:	0800487d 	.word	0x0800487d
 8004818:	080047f9 	.word	0x080047f9
 800481c:	080047f9 	.word	0x080047f9
 8004820:	080047f9 	.word	0x080047f9
 8004824:	080047f9 	.word	0x080047f9
 8004828:	0800487d 	.word	0x0800487d
 800482c:	080047f9 	.word	0x080047f9
 8004830:	080047f9 	.word	0x080047f9
 8004834:	080047f9 	.word	0x080047f9
 8004838:	080047f9 	.word	0x080047f9
 800483c:	08004989 	.word	0x08004989
 8004840:	080048ad 	.word	0x080048ad
 8004844:	0800496b 	.word	0x0800496b
 8004848:	080047f9 	.word	0x080047f9
 800484c:	080047f9 	.word	0x080047f9
 8004850:	080049ab 	.word	0x080049ab
 8004854:	080047f9 	.word	0x080047f9
 8004858:	080048ad 	.word	0x080048ad
 800485c:	080047f9 	.word	0x080047f9
 8004860:	080047f9 	.word	0x080047f9
 8004864:	08004973 	.word	0x08004973
 8004868:	680b      	ldr	r3, [r1, #0]
 800486a:	1d1a      	adds	r2, r3, #4
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	600a      	str	r2, [r1, #0]
 8004870:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004874:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004878:	2301      	movs	r3, #1
 800487a:	e0a3      	b.n	80049c4 <_printf_i+0x1f4>
 800487c:	6825      	ldr	r5, [r4, #0]
 800487e:	6808      	ldr	r0, [r1, #0]
 8004880:	062e      	lsls	r6, r5, #24
 8004882:	f100 0304 	add.w	r3, r0, #4
 8004886:	d50a      	bpl.n	800489e <_printf_i+0xce>
 8004888:	6805      	ldr	r5, [r0, #0]
 800488a:	600b      	str	r3, [r1, #0]
 800488c:	2d00      	cmp	r5, #0
 800488e:	da03      	bge.n	8004898 <_printf_i+0xc8>
 8004890:	232d      	movs	r3, #45	; 0x2d
 8004892:	426d      	negs	r5, r5
 8004894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004898:	485e      	ldr	r0, [pc, #376]	; (8004a14 <_printf_i+0x244>)
 800489a:	230a      	movs	r3, #10
 800489c:	e019      	b.n	80048d2 <_printf_i+0x102>
 800489e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80048a2:	6805      	ldr	r5, [r0, #0]
 80048a4:	600b      	str	r3, [r1, #0]
 80048a6:	bf18      	it	ne
 80048a8:	b22d      	sxthne	r5, r5
 80048aa:	e7ef      	b.n	800488c <_printf_i+0xbc>
 80048ac:	680b      	ldr	r3, [r1, #0]
 80048ae:	6825      	ldr	r5, [r4, #0]
 80048b0:	1d18      	adds	r0, r3, #4
 80048b2:	6008      	str	r0, [r1, #0]
 80048b4:	0628      	lsls	r0, r5, #24
 80048b6:	d501      	bpl.n	80048bc <_printf_i+0xec>
 80048b8:	681d      	ldr	r5, [r3, #0]
 80048ba:	e002      	b.n	80048c2 <_printf_i+0xf2>
 80048bc:	0669      	lsls	r1, r5, #25
 80048be:	d5fb      	bpl.n	80048b8 <_printf_i+0xe8>
 80048c0:	881d      	ldrh	r5, [r3, #0]
 80048c2:	4854      	ldr	r0, [pc, #336]	; (8004a14 <_printf_i+0x244>)
 80048c4:	2f6f      	cmp	r7, #111	; 0x6f
 80048c6:	bf0c      	ite	eq
 80048c8:	2308      	moveq	r3, #8
 80048ca:	230a      	movne	r3, #10
 80048cc:	2100      	movs	r1, #0
 80048ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048d2:	6866      	ldr	r6, [r4, #4]
 80048d4:	60a6      	str	r6, [r4, #8]
 80048d6:	2e00      	cmp	r6, #0
 80048d8:	bfa2      	ittt	ge
 80048da:	6821      	ldrge	r1, [r4, #0]
 80048dc:	f021 0104 	bicge.w	r1, r1, #4
 80048e0:	6021      	strge	r1, [r4, #0]
 80048e2:	b90d      	cbnz	r5, 80048e8 <_printf_i+0x118>
 80048e4:	2e00      	cmp	r6, #0
 80048e6:	d04d      	beq.n	8004984 <_printf_i+0x1b4>
 80048e8:	4616      	mov	r6, r2
 80048ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80048ee:	fb03 5711 	mls	r7, r3, r1, r5
 80048f2:	5dc7      	ldrb	r7, [r0, r7]
 80048f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048f8:	462f      	mov	r7, r5
 80048fa:	42bb      	cmp	r3, r7
 80048fc:	460d      	mov	r5, r1
 80048fe:	d9f4      	bls.n	80048ea <_printf_i+0x11a>
 8004900:	2b08      	cmp	r3, #8
 8004902:	d10b      	bne.n	800491c <_printf_i+0x14c>
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	07df      	lsls	r7, r3, #31
 8004908:	d508      	bpl.n	800491c <_printf_i+0x14c>
 800490a:	6923      	ldr	r3, [r4, #16]
 800490c:	6861      	ldr	r1, [r4, #4]
 800490e:	4299      	cmp	r1, r3
 8004910:	bfde      	ittt	le
 8004912:	2330      	movle	r3, #48	; 0x30
 8004914:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004918:	f106 36ff 	addle.w	r6, r6, #4294967295
 800491c:	1b92      	subs	r2, r2, r6
 800491e:	6122      	str	r2, [r4, #16]
 8004920:	f8cd a000 	str.w	sl, [sp]
 8004924:	464b      	mov	r3, r9
 8004926:	aa03      	add	r2, sp, #12
 8004928:	4621      	mov	r1, r4
 800492a:	4640      	mov	r0, r8
 800492c:	f7ff fee2 	bl	80046f4 <_printf_common>
 8004930:	3001      	adds	r0, #1
 8004932:	d14c      	bne.n	80049ce <_printf_i+0x1fe>
 8004934:	f04f 30ff 	mov.w	r0, #4294967295
 8004938:	b004      	add	sp, #16
 800493a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800493e:	4835      	ldr	r0, [pc, #212]	; (8004a14 <_printf_i+0x244>)
 8004940:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	680e      	ldr	r6, [r1, #0]
 8004948:	061f      	lsls	r7, r3, #24
 800494a:	f856 5b04 	ldr.w	r5, [r6], #4
 800494e:	600e      	str	r6, [r1, #0]
 8004950:	d514      	bpl.n	800497c <_printf_i+0x1ac>
 8004952:	07d9      	lsls	r1, r3, #31
 8004954:	bf44      	itt	mi
 8004956:	f043 0320 	orrmi.w	r3, r3, #32
 800495a:	6023      	strmi	r3, [r4, #0]
 800495c:	b91d      	cbnz	r5, 8004966 <_printf_i+0x196>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	f023 0320 	bic.w	r3, r3, #32
 8004964:	6023      	str	r3, [r4, #0]
 8004966:	2310      	movs	r3, #16
 8004968:	e7b0      	b.n	80048cc <_printf_i+0xfc>
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	f043 0320 	orr.w	r3, r3, #32
 8004970:	6023      	str	r3, [r4, #0]
 8004972:	2378      	movs	r3, #120	; 0x78
 8004974:	4828      	ldr	r0, [pc, #160]	; (8004a18 <_printf_i+0x248>)
 8004976:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800497a:	e7e3      	b.n	8004944 <_printf_i+0x174>
 800497c:	065e      	lsls	r6, r3, #25
 800497e:	bf48      	it	mi
 8004980:	b2ad      	uxthmi	r5, r5
 8004982:	e7e6      	b.n	8004952 <_printf_i+0x182>
 8004984:	4616      	mov	r6, r2
 8004986:	e7bb      	b.n	8004900 <_printf_i+0x130>
 8004988:	680b      	ldr	r3, [r1, #0]
 800498a:	6826      	ldr	r6, [r4, #0]
 800498c:	6960      	ldr	r0, [r4, #20]
 800498e:	1d1d      	adds	r5, r3, #4
 8004990:	600d      	str	r5, [r1, #0]
 8004992:	0635      	lsls	r5, r6, #24
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	d501      	bpl.n	800499c <_printf_i+0x1cc>
 8004998:	6018      	str	r0, [r3, #0]
 800499a:	e002      	b.n	80049a2 <_printf_i+0x1d2>
 800499c:	0671      	lsls	r1, r6, #25
 800499e:	d5fb      	bpl.n	8004998 <_printf_i+0x1c8>
 80049a0:	8018      	strh	r0, [r3, #0]
 80049a2:	2300      	movs	r3, #0
 80049a4:	6123      	str	r3, [r4, #16]
 80049a6:	4616      	mov	r6, r2
 80049a8:	e7ba      	b.n	8004920 <_printf_i+0x150>
 80049aa:	680b      	ldr	r3, [r1, #0]
 80049ac:	1d1a      	adds	r2, r3, #4
 80049ae:	600a      	str	r2, [r1, #0]
 80049b0:	681e      	ldr	r6, [r3, #0]
 80049b2:	6862      	ldr	r2, [r4, #4]
 80049b4:	2100      	movs	r1, #0
 80049b6:	4630      	mov	r0, r6
 80049b8:	f7fb fc22 	bl	8000200 <memchr>
 80049bc:	b108      	cbz	r0, 80049c2 <_printf_i+0x1f2>
 80049be:	1b80      	subs	r0, r0, r6
 80049c0:	6060      	str	r0, [r4, #4]
 80049c2:	6863      	ldr	r3, [r4, #4]
 80049c4:	6123      	str	r3, [r4, #16]
 80049c6:	2300      	movs	r3, #0
 80049c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049cc:	e7a8      	b.n	8004920 <_printf_i+0x150>
 80049ce:	6923      	ldr	r3, [r4, #16]
 80049d0:	4632      	mov	r2, r6
 80049d2:	4649      	mov	r1, r9
 80049d4:	4640      	mov	r0, r8
 80049d6:	47d0      	blx	sl
 80049d8:	3001      	adds	r0, #1
 80049da:	d0ab      	beq.n	8004934 <_printf_i+0x164>
 80049dc:	6823      	ldr	r3, [r4, #0]
 80049de:	079b      	lsls	r3, r3, #30
 80049e0:	d413      	bmi.n	8004a0a <_printf_i+0x23a>
 80049e2:	68e0      	ldr	r0, [r4, #12]
 80049e4:	9b03      	ldr	r3, [sp, #12]
 80049e6:	4298      	cmp	r0, r3
 80049e8:	bfb8      	it	lt
 80049ea:	4618      	movlt	r0, r3
 80049ec:	e7a4      	b.n	8004938 <_printf_i+0x168>
 80049ee:	2301      	movs	r3, #1
 80049f0:	4632      	mov	r2, r6
 80049f2:	4649      	mov	r1, r9
 80049f4:	4640      	mov	r0, r8
 80049f6:	47d0      	blx	sl
 80049f8:	3001      	adds	r0, #1
 80049fa:	d09b      	beq.n	8004934 <_printf_i+0x164>
 80049fc:	3501      	adds	r5, #1
 80049fe:	68e3      	ldr	r3, [r4, #12]
 8004a00:	9903      	ldr	r1, [sp, #12]
 8004a02:	1a5b      	subs	r3, r3, r1
 8004a04:	42ab      	cmp	r3, r5
 8004a06:	dcf2      	bgt.n	80049ee <_printf_i+0x21e>
 8004a08:	e7eb      	b.n	80049e2 <_printf_i+0x212>
 8004a0a:	2500      	movs	r5, #0
 8004a0c:	f104 0619 	add.w	r6, r4, #25
 8004a10:	e7f5      	b.n	80049fe <_printf_i+0x22e>
 8004a12:	bf00      	nop
 8004a14:	08004cf1 	.word	0x08004cf1
 8004a18:	08004d02 	.word	0x08004d02

08004a1c <memcpy>:
 8004a1c:	440a      	add	r2, r1
 8004a1e:	4291      	cmp	r1, r2
 8004a20:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a24:	d100      	bne.n	8004a28 <memcpy+0xc>
 8004a26:	4770      	bx	lr
 8004a28:	b510      	push	{r4, lr}
 8004a2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a32:	4291      	cmp	r1, r2
 8004a34:	d1f9      	bne.n	8004a2a <memcpy+0xe>
 8004a36:	bd10      	pop	{r4, pc}

08004a38 <memmove>:
 8004a38:	4288      	cmp	r0, r1
 8004a3a:	b510      	push	{r4, lr}
 8004a3c:	eb01 0402 	add.w	r4, r1, r2
 8004a40:	d902      	bls.n	8004a48 <memmove+0x10>
 8004a42:	4284      	cmp	r4, r0
 8004a44:	4623      	mov	r3, r4
 8004a46:	d807      	bhi.n	8004a58 <memmove+0x20>
 8004a48:	1e43      	subs	r3, r0, #1
 8004a4a:	42a1      	cmp	r1, r4
 8004a4c:	d008      	beq.n	8004a60 <memmove+0x28>
 8004a4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a56:	e7f8      	b.n	8004a4a <memmove+0x12>
 8004a58:	4402      	add	r2, r0
 8004a5a:	4601      	mov	r1, r0
 8004a5c:	428a      	cmp	r2, r1
 8004a5e:	d100      	bne.n	8004a62 <memmove+0x2a>
 8004a60:	bd10      	pop	{r4, pc}
 8004a62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a6a:	e7f7      	b.n	8004a5c <memmove+0x24>

08004a6c <_free_r>:
 8004a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a6e:	2900      	cmp	r1, #0
 8004a70:	d048      	beq.n	8004b04 <_free_r+0x98>
 8004a72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a76:	9001      	str	r0, [sp, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f1a1 0404 	sub.w	r4, r1, #4
 8004a7e:	bfb8      	it	lt
 8004a80:	18e4      	addlt	r4, r4, r3
 8004a82:	f000 f8d3 	bl	8004c2c <__malloc_lock>
 8004a86:	4a20      	ldr	r2, [pc, #128]	; (8004b08 <_free_r+0x9c>)
 8004a88:	9801      	ldr	r0, [sp, #4]
 8004a8a:	6813      	ldr	r3, [r2, #0]
 8004a8c:	4615      	mov	r5, r2
 8004a8e:	b933      	cbnz	r3, 8004a9e <_free_r+0x32>
 8004a90:	6063      	str	r3, [r4, #4]
 8004a92:	6014      	str	r4, [r2, #0]
 8004a94:	b003      	add	sp, #12
 8004a96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a9a:	f000 b8cd 	b.w	8004c38 <__malloc_unlock>
 8004a9e:	42a3      	cmp	r3, r4
 8004aa0:	d90b      	bls.n	8004aba <_free_r+0x4e>
 8004aa2:	6821      	ldr	r1, [r4, #0]
 8004aa4:	1862      	adds	r2, r4, r1
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	bf04      	itt	eq
 8004aaa:	681a      	ldreq	r2, [r3, #0]
 8004aac:	685b      	ldreq	r3, [r3, #4]
 8004aae:	6063      	str	r3, [r4, #4]
 8004ab0:	bf04      	itt	eq
 8004ab2:	1852      	addeq	r2, r2, r1
 8004ab4:	6022      	streq	r2, [r4, #0]
 8004ab6:	602c      	str	r4, [r5, #0]
 8004ab8:	e7ec      	b.n	8004a94 <_free_r+0x28>
 8004aba:	461a      	mov	r2, r3
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	b10b      	cbz	r3, 8004ac4 <_free_r+0x58>
 8004ac0:	42a3      	cmp	r3, r4
 8004ac2:	d9fa      	bls.n	8004aba <_free_r+0x4e>
 8004ac4:	6811      	ldr	r1, [r2, #0]
 8004ac6:	1855      	adds	r5, r2, r1
 8004ac8:	42a5      	cmp	r5, r4
 8004aca:	d10b      	bne.n	8004ae4 <_free_r+0x78>
 8004acc:	6824      	ldr	r4, [r4, #0]
 8004ace:	4421      	add	r1, r4
 8004ad0:	1854      	adds	r4, r2, r1
 8004ad2:	42a3      	cmp	r3, r4
 8004ad4:	6011      	str	r1, [r2, #0]
 8004ad6:	d1dd      	bne.n	8004a94 <_free_r+0x28>
 8004ad8:	681c      	ldr	r4, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	6053      	str	r3, [r2, #4]
 8004ade:	4421      	add	r1, r4
 8004ae0:	6011      	str	r1, [r2, #0]
 8004ae2:	e7d7      	b.n	8004a94 <_free_r+0x28>
 8004ae4:	d902      	bls.n	8004aec <_free_r+0x80>
 8004ae6:	230c      	movs	r3, #12
 8004ae8:	6003      	str	r3, [r0, #0]
 8004aea:	e7d3      	b.n	8004a94 <_free_r+0x28>
 8004aec:	6825      	ldr	r5, [r4, #0]
 8004aee:	1961      	adds	r1, r4, r5
 8004af0:	428b      	cmp	r3, r1
 8004af2:	bf04      	itt	eq
 8004af4:	6819      	ldreq	r1, [r3, #0]
 8004af6:	685b      	ldreq	r3, [r3, #4]
 8004af8:	6063      	str	r3, [r4, #4]
 8004afa:	bf04      	itt	eq
 8004afc:	1949      	addeq	r1, r1, r5
 8004afe:	6021      	streq	r1, [r4, #0]
 8004b00:	6054      	str	r4, [r2, #4]
 8004b02:	e7c7      	b.n	8004a94 <_free_r+0x28>
 8004b04:	b003      	add	sp, #12
 8004b06:	bd30      	pop	{r4, r5, pc}
 8004b08:	20000090 	.word	0x20000090

08004b0c <_malloc_r>:
 8004b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0e:	1ccd      	adds	r5, r1, #3
 8004b10:	f025 0503 	bic.w	r5, r5, #3
 8004b14:	3508      	adds	r5, #8
 8004b16:	2d0c      	cmp	r5, #12
 8004b18:	bf38      	it	cc
 8004b1a:	250c      	movcc	r5, #12
 8004b1c:	2d00      	cmp	r5, #0
 8004b1e:	4606      	mov	r6, r0
 8004b20:	db01      	blt.n	8004b26 <_malloc_r+0x1a>
 8004b22:	42a9      	cmp	r1, r5
 8004b24:	d903      	bls.n	8004b2e <_malloc_r+0x22>
 8004b26:	230c      	movs	r3, #12
 8004b28:	6033      	str	r3, [r6, #0]
 8004b2a:	2000      	movs	r0, #0
 8004b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b2e:	f000 f87d 	bl	8004c2c <__malloc_lock>
 8004b32:	4921      	ldr	r1, [pc, #132]	; (8004bb8 <_malloc_r+0xac>)
 8004b34:	680a      	ldr	r2, [r1, #0]
 8004b36:	4614      	mov	r4, r2
 8004b38:	b99c      	cbnz	r4, 8004b62 <_malloc_r+0x56>
 8004b3a:	4f20      	ldr	r7, [pc, #128]	; (8004bbc <_malloc_r+0xb0>)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	b923      	cbnz	r3, 8004b4a <_malloc_r+0x3e>
 8004b40:	4621      	mov	r1, r4
 8004b42:	4630      	mov	r0, r6
 8004b44:	f000 f862 	bl	8004c0c <_sbrk_r>
 8004b48:	6038      	str	r0, [r7, #0]
 8004b4a:	4629      	mov	r1, r5
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	f000 f85d 	bl	8004c0c <_sbrk_r>
 8004b52:	1c43      	adds	r3, r0, #1
 8004b54:	d123      	bne.n	8004b9e <_malloc_r+0x92>
 8004b56:	230c      	movs	r3, #12
 8004b58:	6033      	str	r3, [r6, #0]
 8004b5a:	4630      	mov	r0, r6
 8004b5c:	f000 f86c 	bl	8004c38 <__malloc_unlock>
 8004b60:	e7e3      	b.n	8004b2a <_malloc_r+0x1e>
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	1b5b      	subs	r3, r3, r5
 8004b66:	d417      	bmi.n	8004b98 <_malloc_r+0x8c>
 8004b68:	2b0b      	cmp	r3, #11
 8004b6a:	d903      	bls.n	8004b74 <_malloc_r+0x68>
 8004b6c:	6023      	str	r3, [r4, #0]
 8004b6e:	441c      	add	r4, r3
 8004b70:	6025      	str	r5, [r4, #0]
 8004b72:	e004      	b.n	8004b7e <_malloc_r+0x72>
 8004b74:	6863      	ldr	r3, [r4, #4]
 8004b76:	42a2      	cmp	r2, r4
 8004b78:	bf0c      	ite	eq
 8004b7a:	600b      	streq	r3, [r1, #0]
 8004b7c:	6053      	strne	r3, [r2, #4]
 8004b7e:	4630      	mov	r0, r6
 8004b80:	f000 f85a 	bl	8004c38 <__malloc_unlock>
 8004b84:	f104 000b 	add.w	r0, r4, #11
 8004b88:	1d23      	adds	r3, r4, #4
 8004b8a:	f020 0007 	bic.w	r0, r0, #7
 8004b8e:	1ac2      	subs	r2, r0, r3
 8004b90:	d0cc      	beq.n	8004b2c <_malloc_r+0x20>
 8004b92:	1a1b      	subs	r3, r3, r0
 8004b94:	50a3      	str	r3, [r4, r2]
 8004b96:	e7c9      	b.n	8004b2c <_malloc_r+0x20>
 8004b98:	4622      	mov	r2, r4
 8004b9a:	6864      	ldr	r4, [r4, #4]
 8004b9c:	e7cc      	b.n	8004b38 <_malloc_r+0x2c>
 8004b9e:	1cc4      	adds	r4, r0, #3
 8004ba0:	f024 0403 	bic.w	r4, r4, #3
 8004ba4:	42a0      	cmp	r0, r4
 8004ba6:	d0e3      	beq.n	8004b70 <_malloc_r+0x64>
 8004ba8:	1a21      	subs	r1, r4, r0
 8004baa:	4630      	mov	r0, r6
 8004bac:	f000 f82e 	bl	8004c0c <_sbrk_r>
 8004bb0:	3001      	adds	r0, #1
 8004bb2:	d1dd      	bne.n	8004b70 <_malloc_r+0x64>
 8004bb4:	e7cf      	b.n	8004b56 <_malloc_r+0x4a>
 8004bb6:	bf00      	nop
 8004bb8:	20000090 	.word	0x20000090
 8004bbc:	20000094 	.word	0x20000094

08004bc0 <_realloc_r>:
 8004bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc2:	4607      	mov	r7, r0
 8004bc4:	4614      	mov	r4, r2
 8004bc6:	460e      	mov	r6, r1
 8004bc8:	b921      	cbnz	r1, 8004bd4 <_realloc_r+0x14>
 8004bca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004bce:	4611      	mov	r1, r2
 8004bd0:	f7ff bf9c 	b.w	8004b0c <_malloc_r>
 8004bd4:	b922      	cbnz	r2, 8004be0 <_realloc_r+0x20>
 8004bd6:	f7ff ff49 	bl	8004a6c <_free_r>
 8004bda:	4625      	mov	r5, r4
 8004bdc:	4628      	mov	r0, r5
 8004bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004be0:	f000 f830 	bl	8004c44 <_malloc_usable_size_r>
 8004be4:	42a0      	cmp	r0, r4
 8004be6:	d20f      	bcs.n	8004c08 <_realloc_r+0x48>
 8004be8:	4621      	mov	r1, r4
 8004bea:	4638      	mov	r0, r7
 8004bec:	f7ff ff8e 	bl	8004b0c <_malloc_r>
 8004bf0:	4605      	mov	r5, r0
 8004bf2:	2800      	cmp	r0, #0
 8004bf4:	d0f2      	beq.n	8004bdc <_realloc_r+0x1c>
 8004bf6:	4631      	mov	r1, r6
 8004bf8:	4622      	mov	r2, r4
 8004bfa:	f7ff ff0f 	bl	8004a1c <memcpy>
 8004bfe:	4631      	mov	r1, r6
 8004c00:	4638      	mov	r0, r7
 8004c02:	f7ff ff33 	bl	8004a6c <_free_r>
 8004c06:	e7e9      	b.n	8004bdc <_realloc_r+0x1c>
 8004c08:	4635      	mov	r5, r6
 8004c0a:	e7e7      	b.n	8004bdc <_realloc_r+0x1c>

08004c0c <_sbrk_r>:
 8004c0c:	b538      	push	{r3, r4, r5, lr}
 8004c0e:	4d06      	ldr	r5, [pc, #24]	; (8004c28 <_sbrk_r+0x1c>)
 8004c10:	2300      	movs	r3, #0
 8004c12:	4604      	mov	r4, r0
 8004c14:	4608      	mov	r0, r1
 8004c16:	602b      	str	r3, [r5, #0]
 8004c18:	f7fc f8a2 	bl	8000d60 <_sbrk>
 8004c1c:	1c43      	adds	r3, r0, #1
 8004c1e:	d102      	bne.n	8004c26 <_sbrk_r+0x1a>
 8004c20:	682b      	ldr	r3, [r5, #0]
 8004c22:	b103      	cbz	r3, 8004c26 <_sbrk_r+0x1a>
 8004c24:	6023      	str	r3, [r4, #0]
 8004c26:	bd38      	pop	{r3, r4, r5, pc}
 8004c28:	20000184 	.word	0x20000184

08004c2c <__malloc_lock>:
 8004c2c:	4801      	ldr	r0, [pc, #4]	; (8004c34 <__malloc_lock+0x8>)
 8004c2e:	f000 b811 	b.w	8004c54 <__retarget_lock_acquire_recursive>
 8004c32:	bf00      	nop
 8004c34:	2000018c 	.word	0x2000018c

08004c38 <__malloc_unlock>:
 8004c38:	4801      	ldr	r0, [pc, #4]	; (8004c40 <__malloc_unlock+0x8>)
 8004c3a:	f000 b80c 	b.w	8004c56 <__retarget_lock_release_recursive>
 8004c3e:	bf00      	nop
 8004c40:	2000018c 	.word	0x2000018c

08004c44 <_malloc_usable_size_r>:
 8004c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c48:	1f18      	subs	r0, r3, #4
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	bfbc      	itt	lt
 8004c4e:	580b      	ldrlt	r3, [r1, r0]
 8004c50:	18c0      	addlt	r0, r0, r3
 8004c52:	4770      	bx	lr

08004c54 <__retarget_lock_acquire_recursive>:
 8004c54:	4770      	bx	lr

08004c56 <__retarget_lock_release_recursive>:
 8004c56:	4770      	bx	lr

08004c58 <_init>:
 8004c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5a:	bf00      	nop
 8004c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c5e:	bc08      	pop	{r3}
 8004c60:	469e      	mov	lr, r3
 8004c62:	4770      	bx	lr

08004c64 <_fini>:
 8004c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c66:	bf00      	nop
 8004c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c6a:	bc08      	pop	{r3}
 8004c6c:	469e      	mov	lr, r3
 8004c6e:	4770      	bx	lr
